title
Improved Semantic Representations From Tree - Structured Long Short - Term Memory Networks
abstract
Because of their superior ability to preserve sequence information overtime , Long Short - Term Memory ( LSTM ) networks , a type of recurrent neural network with a more complex computational unit , have obtained strong results on a variety of sequence modeling tasks .
The only underlying LSTM structure that has been explored so far is a linear chain .
However , natural language exhibits syntactic properties that would naturally combine words to phrases .
We introduce the Tree - LSTM , a generalization of LSTMs to tree - structured network topologies .
Tree - LSTMs outperform all existing systems and strong LSTM baselines on two tasks : predicting the semantic relatedness of two sentences ( Sem Eval 2014 , Task 1 ) and sentiment classification ( Stanford Sentiment Treebank ) .
Introduction
Most models for distributed representations of phrases and sentences - that is , models where realvalued vectors are used to represent meaning - fall into one of three classes : bag - of - words models , sequence models , and tree - structured models .
In bag - of - words models , phrase and sentence representations are independent of word order ; for example , they can be generated by averaging constituent word representations .
In contrast , sequence models construct sentence representations as an order - sensitive function of the sequence of tokens .
Lastly , tree - structured models compose each phrase and sentence representation from its constituent subphrases according to a given syntactic structure over the sentence ) .
x
1
x 2 x 3 x 4 y 1 y 2 y 3 y 4
x
1
x 2
x 4
x 5 x 6 y 1 y 2 y 3 y 4 y 6 : Top :
A chain - structured LSTM network .
Bottom :
A tree - structured LSTM network with arbitrary branching factor .
Order-insensitive models are insufficient to fully capture the semantics of natural language due to their inability to account for differences in meaning as a result of differences in word order or syntactic structure ( e.g. , " cats climb trees " vs. " trees climb cats " ) .
We therefore turn to ordersensitive sequential or tree - structured models .
In particular , tree - structured models are a linguistically attractive option due to their relation to syntactic interpretations of sentence structure .
A natural question , then , is the following : to what extent ( if at all ) can we do better with tree - structured models as opposed to sequential models for sentence representation ?
In this paper , we work towards addressing this question by directly comparing a type of sequential model that has recently been used to achieve state - of - the - art results in several NLP tasks against its tree - structured generalization .
Due to their capability for processing arbitrarylength sequences , recurrent neural networks ( RNNs ) are a natural choice for sequence modeling tasks .
Recently , RNNs with Long Short - Term Memory ( LSTM ) units ) have re-emerged as a popular architecture due to their representational power and effectiveness at capturing long - term dependencies .
LSTM networks , which we review in Sec. 2 , have been successfully applied to a variety of sequence modeling and prediction tasks , notably machine translation , speech recognition , image caption generation , and program execution .
In this paper , we introduce a generalization of the standard LSTM architecture to tree - structured network topologies and show its superiority for representing sentence meaning over a sequential LSTM .
While the standard LSTM composes its hidden state from the input at the current time step and the hidden state of the LSTM unit in the previous time step , the tree - structured LSTM , or Tree - LSTM , composes its state from an input vector and the hidden states of arbitrarily many child units .
The standard LSTM can then be considered a special case of the Tree - LSTM where each internal node has exactly one child .
In our evaluations , we demonstrate the empirical strength of Tree - LSTMs as models for representing sentences .
We evaluate the Tree - LSTM architecture on two tasks : semantic relatedness prediction on sentence pairs and sentiment classification of sentences drawn from movie reviews .
Our experiments show that Tree - LSTMs outperform existing systems and sequential LSTM baselines on both tasks .
Implementations of our models and experiments are available at https :// github.com/stanfordnlp/treelstm.
Long Short - Term Memory Networks
Overview
Recurrent neural networks ( RNNs ) are able to process input sequences of arbitrary length via the recursive application of a transition function on a hidden state vector ht .
At each time step t , the hidden state ht is a function of the input vector x t that the network receives at time t and it s previous hidden state h t?1 .
For example , the input vector x t could be a vector representation of the t- th word in body of text .
The hidden state ht ?
Rd can be interpreted as a d-dimensional distributed representation of the sequence of tokens observed up to time t.
Commonly , the RNN transition function is an affine transformation followed by a pointwise nonlinearity such as the hyperbolic tangent function :
Unfortunately , a problem with RNNs with transition functions of this form is that during training , components of the gradient vector can grow or decay exponentially overlong sequences .
This problem with exploding or vanishing gradients makes it difficult for the RNN model to learn long - distance correlations in a sequence .
The LSTM architecture addresses this problem of learning long - term dependencies by introducing a memory cell that is able to preserve state overlong periods of time .
While numerous LSTM variants have been described , here we describe the version used by .
We define the LSTM unit at each time step t to be a collection of vectors in Rd : an input gate it , a forget gate ft , an output gate o t , a memory cell ct and a hidden state ht .
The entries of the gating vectors it , ft and o tare in [ 0 , 1 ] .
We refer to d as the memory dimension of the LSTM .
The LSTM transition equations are the following :
( 1 )
where x t is the input at the current time step , ?
denotes the logistic sigmoid function and denotes elementwise multiplication .
Intuitively , the forget gate controls the extent to which the previous memory cell is forgotten , the input gate controls how much each unit is updated , and the output gate controls the exposure of the internal memory state .
The hidden state vector in an LSTM unit is therefore a gated , partial view of the state of the unit 's internal memory cell .
Since the value of the gating variables vary for each vector element , the model can learn to represent information over multiple time scales .
Variants
Two commonly - used variants of the basic LSTM architecture are the Bidirectional LSTM and the Multilayer LSTM ( also known as the stacked or deep LSTM ) .
Bidirectional LSTM .
A Bidirectional LSTM consists of two LSTMs thatare run in parallel : one on the input sequence and the other on the reverse of the input sequence .
At each time step , the hidden state of the Bidirectional LSTM is the concatenation of the forward and backward hidden states .
This setup allows the hidden state to capture both past and future information .
Multilayer LSTM .
In Multilayer LSTM architectures , the hidden state of an LSTM unit in layer is used as input to the LSTM unit in layer + 1 in the same time step .
Here , the idea is to let the higher layers capture longerterm dependencies of the input sequence .
These two variants can be combined as a Multilayer Bidirectional LSTM .
Tree-Structured LSTMs
A limitation of the LSTM architectures described in the previous section is that they only allow for strictly sequential information propagation .
Here , we propose two natural extensions to the basic LSTM architecture : the Child - Sum Tree - LSTM and the N - ary Tree - LSTM .
Both variants allow for richer network topologies where each LSTM unit is able to incorporate information from multiple child units .
As in standard LSTM units , each Tree - LSTM unit ( indexed by j ) contains input and output gates i j and o j , a memory cell c j and hidden state h j .
The difference between the standard LSTM unit and Tree - LSTM units is that gating vectors and memory cell updates are dependent on the states of possibly many child units .
Additionally , instead of a single forget gate , the Tree - LSTM unit contains one forget gate f jk for each child k.
This allows the Tree - LSTM unit to selectively incorporate information from each child .
For example , a Tree - LSTM model can learn to emphasize semantic heads in a semantic relatedness :
Composing the memory cell c 1 and hidden state h 1 of a Tree - LSTM unit with two children ( subscripts 2 and 3 ) .
Labeled edges correspond to gating by the indicated gating vector , with dependencies omitted for compactness .
task , or it can learn to preserve the representation of sentiment - rich children for sentiment classification .
As with the standard LSTM , each Tree - LSTM unit takes an input vector x j .
In our applications , each x j is a vector representation of a word in a sentence .
The input word at each node depends on the tree structure used for the network .
For instance , in a Tree - LSTM over a dependency tree , each node in the tree takes the vector corresponding to the headword as input , whereas in a Tree - LSTM over a constituency tree , the leaf nodes take the corresponding word vectors as input .
Child - Sum Tree-LSTMs
Given a tree , let C ( j ) denote the set of children of node j.
The Child - Sum Tree - LSTM transition equations are the following :
wherein Eq. 4 , k ? C ( j ) .
Intuitively , we can interpret each parameter matrix in these equations as encoding correlations between the component vectors of the Tree - LSTM unit , the input x j , and the hidden states h k of the unit 's children .
For example , in a dependency tree application , the model can learn parameters W ( i ) such that the components of the input gate i j have values close to 1 ( i.e. , " open " ) when a semantically important content word ( such as a verb ) is given as input , and values close to 0 ( i.e. , " closed " ) when the input is a relatively unimportant word ( such as a determiner ) .
Dependency Tree - LSTMs . Since the Child - Sum Tree - LSTM unit conditions its components on the sum of child hidden states h k , it is wellsuited for trees with high branching factor or whose children are unordered .
For example , it is a good choice for dependency trees , where the number of dependents of ahead can be highly variable .
We refer to a Child - Sum Tree - LSTM applied to a dependency tree as a Dependency Tree - LSTM .
N - ary Tree- LSTMs
The N - ary Tree - LSTM can be used on tree structures where the branching factor is at most N and where children are ordered , i.e. , they can be indexed from 1 to N .
For any node j , write the hidden state and memory cell of its kth child ash jk and c jk respectively .
The N - ary Tree - LSTM transition equations are the following :
wherein Eq. 10 , k = 1 , 2 , . . . , N .
Note that when the tree is simply a chain , both Eqs. 2 - 8 and Eqs. 9 - 14 reduce to the standard LSTM transitions , Eqs .
1 . The introduction of separate parameter matrices for each child k allows the N - ary Tree - LSTM model to learn more fine - grained conditioning on the states of a unit 's children than the Child - Sum Tree - LSTM .
Consider , for example , a constituency tree application where the left child of anode corresponds to a noun phrase , and the right child to a verb phrase .
Suppose that in this case it is advantageous to emphasize the verb phrase in the representation .
Then the U ( f ) k parameters can be trained such that the components off j 1 are close to 0 ( i.e. , " forget " ) , while the components off j 2 are close to 1 ( i.e. , " preserve " ) .
Forget gate parameterization .
In Eq. 10 , we define a parameterization of the kth child 's forget gate f jk that contains " off - diagonal " parameter matrices U
This parameterization allows for more flexible control of information propagation from child to parent .
For example , this allows the left hidden state in a binary tree to have either an excitatory or inhibitory effect on the forget gate of the right child .
However , for large values of N , these additional parameters are impractical and maybe tied or fixed to zero .
Constituency Tree - LSTMs . We can naturally apply Binary Tree - LSTM units to binarized constituency trees since left and right child nodes are distinguished .
We refer to this application of Binary Tree - LSTMs as a Constituency Tree - LSTM .
Note that in Constituency Tree - LSTMs , anode j receives an input vector x j only if it is a leaf node .
In the remainder of this paper , we focus on the special cases of Dependency Tree - LSTMs and Constituency Tree - LSTMs .
These architectures are in fact closely related ; since we consider only binarized constituency trees , the parameterizations of the two models are very similar .
The key difference is in the application of the compositional parameters : dependent vs. head for Dependency Tree - LSTMs , and left child vs. right child for Constituency Tree - LSTMs .
Models
We now describe two specific models that apply the Tree - LSTM architectures described in the previous section .
Tree-LSTM
Classification
In this setting , we wish to predict labels ?
from a discrete set of classes Y for some subset of nodes in a tree .
For example , the label for a node in a parse tree could correspond to some property of the phrase spanned by that node .
At each node j , we use a softmax classifier to predict the label ?
j given the inputs {x } j observed at nodes in the subtree rooted at j .
The classifier takes the hidden state h j at the node as input :
The cost function is the negative log - likelihood of the true class labels y ( k ) at each labeled node :
where m is the number of labeled nodes in the training set , the superscript k indicates the kth labeled node , and ?
is an L2 regularization hyperparameter .
Semantic Relatedness of Sentence Pairs
Given a sentence pair , we wish to predict a real - valued similarity score in some range [ 1 , K ] , where K >
1 is an integer .
The sequence { 1 , 2 , . . . , K} is some ordinal scale of similarity , where higher scores indicate greater degrees of similarity , and we allow real - valued scores to account for ground - truth ratings thatare an average over the evaluations of several human annotators .
We first produce sentence representations h Land h R for each sentence in the pair using a Tree - LSTM model over each sentence 's parse tree .
Given these sentence representations , we predict the similarity score ?
using a neural network that considers both the distance and angle between the pair ( h L , h R ):
where r T = [ 1 2 . . . K ] and the absolute value function is applied elementwise .
The use of both distance measures h and h + is empirically motivated : we find that the combination outperforms the use of either measure alone .
The multiplicative measure h can be interpreted as an elementwise comparison of the signs of the input representations .
We want the expected rating under the predicted distributionp ?
given model parameters ?
to be close to the gold rating y ?
[ 1 , K ]:? = r Tp ? ? y .
We therefore define a sparse target distribution 1 p that satisfies y = r T p:
The cost function is the regularized KL - divergence between p andp ? :
where m is the number of training pairs and the superscript k indicates the kth sentence pair .
Experiments
We evaluate our Tree - LSTM architectures on two tasks : ( 1 ) sentiment classification of sentences sampled from movie reviews and ( 2 ) predicting the semantic relatedness of sentence pairs .
In comparing our Tree - LSTMs against sequential LSTMs , we control for the number of LSTM parameters by varying the dimensionality of the hidden states
2 .
Details for each model variant are summarized in .
Sentiment Classification
Our results are summarized in .
The Constituency Tree - LSTM outperforms existing systems on the fine - grained classification subtask and achieves accuracy comparable to the state - of - theart on the binary subtask .
In particular , we find that it outperforms the Dependency Tree - LSTM .
This performance gap is at least partially attributable to the fact that the Dependency Tree - LSTM is trained on less data : about 150 K labeled nodes vs. 319 K for the Constituency Tree - LSTM .
This difference is due to ( 1 ) the dependency representations containing fewer nodes than the corresponding constituency representations , and ( 2 ) the inability to match about 9 % of the dependency nodes to a corresponding span in the training data .
We found that updating the word representations during training ( " fine - tuning " the word embedding ) yields a significant boost in performance on the fine - grained classification subtask and gives a minor gain on the binary classification subtask ( this finding is consistent with previous work on this task by ) .
These gains are to be expected since the Glove vectors used to initialize our word representations were not originally trained to capture sentiment .
Semantic Relatedness
Our results are summarized in .
Following , we use Pearson 's r , Spearman 's ?
and mean squared error ( MSE ) as evalua - tion metrics .
The first two metrics are measures of correlation against human evaluations of semantic relatedness .
We compare our models against a number of non -LSTM baselines .
The mean vector baseline computes sentence representations as a mean of the representations of the constituent words .
The DT - RNN and SDT - RNN models both compose vector representations for the nodes in a dependency tree as a sum over affinetransformed child vectors , followed by a nonlinearity .
The SDT - RNN is an extension of the DT - RNN that uses a separate transformation for each dependency relation .
For each of our baselines , including the LSTM models , we use the similarity model described in We also compare against four of the topperforming systems 6 submitted to the SemEval 2014 semantic relatedness shared task : ECNU , The Meaning Factory , UNAL - NLP , and Illinois - LH .
These systems are heavily feature engineered , generally using a combination of surface form overlap features and lexical distance features derived from WordNet or the Paraphrase Data base .
Our LSTM models outperform all these sys - tems without any additional feature engineering , with the best results achieved by the Dependency Tree - LSTM .
Recall that in this task , both Tree - LSTM models only receive supervision at the root of the tree , in contrast to the sentiment classification task where supervision was also provided at the intermediate nodes .
We conjecture that in this setting , the Dependency Tree - LSTM benefits from its more compact structure relative to the Constituency Tree - LSTM , in the sense that paths from input word vectors to the root of the tree are shorter on aggregate for the Dependency Tree - LSTM .
7 Discussion and Qualitative Analysis
Method
Pearson 's r Spearman 's ?
MSE Illinois - LH 0.7993 0.7538 0.3692 UNAL- NLP 0.8070 0.7489 0.3550 Meaning Factory 0.8268 0.7721 0.3224 ECNU 0.8414 -- Mean vectors 0.7577 ( 0.0013 ) 0.6738 ( 0.0027 ) 0.4557 ( 0.0090 ) DT - RNN 0.7923 ( 0.0070 ) 0.7319 ( 0.0071 ) 0.3822 ( 0.0137 ) SDT - RNN 0.7900 ( 2 ) Our own baselines ;
( 3 ) Sequential LSTMs ; ( 4 ) Tree-structured LSTMs .
6 Results
Hyperparameters and Training Details
The hyperparameters for our models were tuned on the development set for each task .
We initialized our word representations using publicly available 300 - dimensional Glove vectors
5 .
For the sentiment classification task , word representations were updated during training with a learning rate of 0.1 .
For the semantic relatedness task , word representations were held fixed as we did not observe any significant improvement when the representations were tuned .
Our models were trained using AdaGrad with a learning rate of 0.05 and a minibatch size of 25 .
The model parameters were regularized with a per-minibatch L2 regularization strength of 10 ?4 .
The sentiment classifier was additionally regularized using dropout with a dropout rate of 0.5 .
We did not observe performance gains using dropout on the semantic relatedness task .
Modeling Semantic Relatedness
In , we list nearest - neighbor sentences retrieved from a 1000 - sentence sample of the SICK test set .
We compare the neighbors ranked by the Dependency Tree - LSTM model against a baseline ranking by cosine similarity of the mean word vectors for each sentence .
The Dependency Tree - LSTM model exhibits several desirable properties .
Note that in the dependency parse of the second query sentence , the word " ocean " is the second - furthest word from the root ( " waving " ) , with a depth of 4 .
Regardless , the retrieved sentences are all semantically related to the word " ocean " , which indicates that the Tree - LSTM is able to both preserve and emphasize information from relatively distant nodes .
Additionally , the Tree - LSTM model shows greater ro- bustness to differences in sentence length .
Given the query " two men are playing guitar " , the Tree - LSTM associates the phrase " playing guitar " with the longer , related phrase " dancing and singing in front of a crowd " ( note as well that there is zero token overlap between the two phrases ) .
Effect of Sentence Length
One hypothesis to explain the empirical strength of Tree - LSTMs is that tree structures help mitigate the problem of preserving state overlong sequences of words .
If this were true , we would expect to see the greatest improvement over sequential LSTMs on longer sentences .
In , we show the relationship between sentence length and performance as measured by the relevant taskspecific metric .
Each data point is a mean score over 5 runs , and error bars have been omitted for clarity .
We observe that while the Dependency Tree - LSTM does significantly outperform its sequential counterparts on the relatedness task for longer sentences of length 13 to 15 , it also achieves consistently strong performance on shorter sentences .
This suggests that unlike sequential LSTMs , Tree - LSTMs are able to encode semantically - useful structural information in the sentence representations that they compose .
Related Work
Distributed representations of words
Ranking by mean word vector cosine similarity
Score a woman is slicing potatoes a woman is cutting potatoes 0.96 a woman is slicing herbs 0.92 a woman is slicing tofu 0.92 a boy is waving at some young runners from the ocean a man and a boy are standing at the bottom of some stairs , 0.92 which are outdoors a group of children in uniforms is standing at agate and 0.90 one is kissing the mother a group of children in uniforms is standing at agate and 0.90 there is no one kissing the mother two men are playing guitar some men are playing rugby 0.88 two men are talking 0.87 two dogs are playing with each other 0.87
Ranking by Dependency Tree - LSTM model
Score a woman is slicing potatoes a woman is cutting potatoes 4.82 potatoes are being sliced by a woman 4.70 tofu is being sliced by a woman 4.39 a boy is waving at some young runners from the ocean a group of men is playing with a ball on the beach 3.79 a young boy wearing a red swimsuit is jumping out of a 3.37 blue kiddies pool the man is tossing a kid into the swimming pool that is 3.19 near the ocean two men are playing guitar the man is singing and playing the guitar 4.08 the man is opening the guitar for donations and plays 4.01 with the case two men are dancing and singing in front of a crowd 4.00 :
Most similar sentences from a 1000 - sentence sample drawn from the SICK test set .
The Tree - LSTM model is able to pickup on more subtle relationships , such as that between " beach " and " ocean " in the second example .
have found wide applicability in a variety of NLP tasks .
Following this success , there has been substantial interest in the are a of learning distributed phrase and sentence representations , as well as distributed representations of longer bodies of text such as paragraphs and documents .
Our approach builds on recursive neural networks , which we abbreviate as Tree - RNNs in order to avoid confusion with recurrent neural networks .
Under the Tree - RNN framework , the vector representation associated with each node of a tree is composed as a function of the vectors corresponding to the children of the node .
The choice of composition function gives rise to numerous variants of this basic framework .
Tree - RNNs have been used to parse images of natural scenes , compose phrase representations from word vectors , and classify the sentiment polarity of sentences .
Conclusion
In this paper , we introduced a generalization of LSTMs to tree - structured network topologies .
The Tree - LSTM architecture can be applied to trees with arbitrary branching factor .
We demonstrated the effectiveness of the Tree - LSTM by applying the architecture in two tasks : semantic relatedness and sentiment classification , outperforming existing systems on both .
Controlling for model dimensionality , we demonstrated that Tree - LSTM models are able to outperform their sequential counterparts .
Our results suggest further lines of work in characterizing the role of structure in producing distributed representations of sentences .
