title
Fine-grained Sentiment Classification using BERT
abstract
Sentiment classification is an important process in understanding people's perception towards a product, service, or topic. Many natural language processing models have been proposed to solve the sentiment classification problem. However, most of them have focused on binary sentiment classification. In this paper, we use a promising deep learning model called BERT to solve the fine-grained sentiment classification task. Experiments show that our model outperforms other popular models for this task without sophisticated architecture. We also demonstrate the effectiveness of transfer learning in natural language processing in the process.
I. INTRODUCTION
Sentiment classification is a form of text classification in which apiece of text has to be classified into one of the predefined sentiment classes. It is a supervised machine learning problem. In binary sentiment classification, the possible classes are positive and negative. In fine-grained sentiment classification, there are five classes (very negative, negative, neutral, positive, and very positive). Sentiment classification model, like any other machine learning model, requires its input to be a fixed-sized vector of numbers. Therefore, we need to convert a text-sequence of words represented as ASCII or Unicode-into a fixedsized vector that encodes the meaningful information of the text. Many statistical and deep learning NLP models have been proposed just for that. Recently, there has been an explosion of developments in NLP as well as other deep learning architectures.
While transfer learning (pretraining and finetuning) has become the de-facto standard in computer vision, NLP is yet to utilize this concept fully. However, neural language models such as word vectors, paragraph vectors, and GloVe have started the transfer learning revolution in NLP. Recently, Google researchers published BERT (Bidirectional Encoder Representations from Transformers), a deep bidirectional language model based on the Transformer architecture, and advanced the state-of-the-art in many popular NLP tasks. In this paper, we use the pretrained BERT model and finetune it for the fine-grained sentiment classification task on the Stanford Sentiment Treebank (SST) dataset.
The rest of the paper is organized into six sections. In Section II, we mention our motivation for this work. In Section III, we discuss related works. In Section IV, we describe the dataset we performed our experiments on. We explain our model architecture and methodology in detail in Section V. Then we present and analyze our results in Section VI. Finally, we provide our concluding remarks in Section VII.

II. MOTIVATION
We have been working on replicating the different research paper results for sentiment analysis, especially on the finegrained Stanford Sentiment Treebank (SST) dataset. After the popularity of BERT, researchers have tried to use it on different NLP tasks, including binary sentiment classification on SST-2 (binary) dataset, and they were able to obtain state-of-the-art results as well. But we haven't yet found any experimentation done using BERT on the SST-5 (fine-grained) dataset. Because BERT is so powerful, fast, and easy to use for downstream tasks, it is likely to give promising results in SST-5 dataset as well. This became the main motivation for pursuing this work.

III. RELATED WORK
Sentiment classification is one of the most popular tasks in NLP, and so there has been a lot of research and progress in solving this task accurately. Most of the approaches have focused on binary sentiment classification, most probably because there are large public datasets for it such as the IMDb movie review dataset. In this section, we only discuss some significant deep learning NLP approaches applied to sentiment classification.
The first step in sentiment classification of a text is the embedding, where a text is converted into a fixed-size vector. Since the number of words in the vocabulary after tokenization and stemming is limited, researchers first tackled the problem of learning word embeddings. The first promising language model was proposed by Mikolov et al.. They trained continuous semantic representation of words from large unlabeled text that could be fine-tuned for downstream tasks. Pennington et al. used a co-occurrence matrix and only trained on nonzero elements to efficiently learn semantic word embeddings. Bojanowski et al. broke words into character n-grams for smaller vocabulary size and fast training.
The next step is to combine a variable number of word vectors into a single fixed-size document vector. The trivial way is to take the sum or the average, but they don't lose the ordering information of words and thus don't give good results. Tai et al. used recursive neural networks to compute vector representation of sentences by utilizing the intrinsic tree structure of natural language sentences. Socher et al. introduced a tensor-based compositionaity function for better interaction between child nodes in recursive networks. They also introduced the Stanford Sentiment Treebank (SST) dataset for fine-grained sentiment classification. Tai et al. applied various forms of long short-term memory (LSTM) networks and Kim applied convolutional neural networks (CNN) towards sentiment classification.
All of the approaches mentioned above are context-free, i.e., they generate single word embedding for each word in the vocabulary. For instance, "bank" would have the same representation in "bank deposit" and "river bank". Recent language model research has been trying to train contextual embeddings. Peters et al. extracted context-sensitive features from leftto-right and right-to-left LSTM-based language model. Devlin et al. proposed BERT (Bidirectional Encoder Representations from Transformers), an attention-based Transformer architecture, to train deep bidirectional representations from unlabeled texts. Their architecture not only obtains stateof-the-art results on many NLP tasks but also allows a high degree of parallelism since it is not based on sequential or recurrent connections.

IV. DATASET
Stanford Sentiment Treebank (SST) is one of the most popular publicly available datasets for fine-grained sentiment classification task. It contains 11,855 one-sentence movie reviews extracted from Rotten Tomatoes. Not only that, each sentence is also parsed by the Stanford constituency parser into a tree structure with the whole sentence as the root node and the individual words as leaf nodes. Moreover, each node is labeled by at least three humans. In total, SST contains 215,154 unique manually labeled texts of varying lengths. a sample review from the SST dataset in a parsetree structure with all its nodes labeled. Therefore, this dataset can be used to train models to learn the sentiment of words, phrases, and sentences together.
There are five sentiment labels in SST: 0 (very negative), 1 (negative), 2 (neutral), 3 (positive), and 4 (very positive). If we only consider positivity and negativity, we get the binary SST-2 dataset. If we consider all five labels, we get SST-5. For this research, we evaluate the performance of various models on all nodes as well as on just the root nodes, and on both SST-2 and SST-5.

V. METHODOLOGY
Sentiment classification takes a natural language text as input and outputs a sentiment score ? {0, 1, 2, 3, 4}. Our method has three stages from input sentence to output score, which are described below. We use pretrained BERT model to build a sentiment classifier. Therefore, in this section, we briefly explain BERT and then describe our model architecture.

A. BERT
BERT (Bidirectional Encoder Representations from Transformers is an embedding layer designed to train deep bidirectional representations from unlabeled texts by jointly conditioning on both left and right context in all layers. It is pretrained from a large unsupervised text corpus (such as Wikipedia dump or BookCorpus) using the following objectives:
? Masked word prediction: In this task, 15% of the words in the input sequence are masked out, the entire sequence is fed to a deep bidirectional Transfomer encoder, and then the model learns to predict the masked words. ? Next sentence prediction: To learn the relationship between sentences, BERT takes two sentences A and B as inputs and learns to classify whether B actually follows A or is it just a random sentence. Unlike traditional sequential or recurrent models, the attention architecture processes the whole input sequence at once, enabling all input tokens to be processed in parallel. The layers of BERT architecture are visualized in Pretrained BERT model can be fine-tuned with just one additional layer to obtain state-of-the-art results in a wide range of NLP tasks.
There are two variants for BERT models: BERT BASE and BERT LARGE . The difference between them is listed in

OpenAI GPT Lstm Lstm
Lstm Lstm  sequence embedding that can be used for classifying the whole sequence.

B. Preprocessing
We perform the following preprocessing stepson the review text before we feed them into out model. 1) Canonicalization: First, we remove all the digits, punctuation symbols and accent marks, and convert everything to lowercase.
2) Tokenization: We then tokenize the text using the Word-Piece tokenizer. It breaks the words down to their prefix, root, and suffix to handle unseen words better. For example, playing ? play + ##ing.
3) Special token addition: Finally, we add the [CLS] and [SEP] tokens at the appropriate positions.

C. Proposed Architecture
We build a simple architecture with just a dropout regularization and a softmax classifier layers on top of pretrained BERT layer to demonstrate that BERT can produce great results even without any sophisticated task-specific architecture. the over all architecture of our model. There are four main stages. The first is the proprocessing step as described earlier. Then we compute the sequence embedding from BERT. We then apply dropout with a probability factor of 0.1 to regularize and prevent overfitting. Dropout is only applied in training phase and not in inference phase. Finally, the softmax classification layer will output the probabilities of the input text belonging to each of the class labels such that the sum of the probabilities is 1. The softmax layer is just a fully connected neural network layer with the softmax activation function. The softmax function ? : R K ? R K is given in.
where z = (z 1 , . . . , z K ) ? R K is the intermediate output of the softmax layer (also called logits). The output node with the highest probability is then chosen as the predicted label for the input.

VI. EXPERIMENTS AND RESULTS
In this section, we discuss the results of our model and compare with it some of the popular models that solve the same problem, i.e., sentiment classification on the SST dataset.
A. Comparison Models 1) Word embeddings: In this method, the word vectors pretrained on large text corpus such as Wikipedia dump are averaged to get the document vector, which is then fed to the sentiment classifier to compute the sentiment score.
2) Recursive networks: Various types of recursive neural networks (RNN) have been applied on SST. We compare our results with the standard RNN and the more sophisticated RNTN. Both of them were trained on SST from scratch, without pretraining.
3) Recurrent networks: Sophisticated recurrent networks such as left-to-right and bidrectional LSTM networks have also been applied on SST. 4) Convolutional networks: In this approach, the input sequences were passed through a 1-dimensional convolutional neural network as feature extractors.

B. Evaluation Metric
Since the dataset has roughly balanced number of samples of all classes, we directly use the accuracy measure to evaluate the performance of our model and compare it with other models. The accuracy is defined simply as follows: accuracy = number of correct predictions total number of predictions ? [0, 1] (2)

C. Results
The result and comparisons are shown in. It shows the accuracy of various models on SST-2 and SST-5. It includes results for all phrases as well as for just the root (whole review). We can see that our model, despite being a simple architecture, performs better in terms of accuracy than many popular and sophisticated NLP models.

VII. CONCLUSION
In this paper, we used the pretrained BERT model and finetuned it for the fine-grained sentiment classification task on the SST dataset. Even with such a simple downstream architecture, our model was able to outperform complicated architectures like recursive, recurrent, and convolutional neural networks. Thus, we have demonstrated the transfer learning capability in NLP enabled by deep contextual language models like BERT.