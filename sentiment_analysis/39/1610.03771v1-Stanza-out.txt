title
SentiHood : Targeted Aspect Based Sentiment Analysis Dataset for Urban Neighbourhoods
abstract
In this paper , we introduce the task of targeted aspect - based sentiment analysis .
The goal is to extract fine - grained information with respect to entities mentioned in user comments .
This work extends both aspect - based sentiment analysis that assumes a single entity per document and targeted sentiment analysis that assumes a single sentiment towards a target entity .
In particular , we identify the sentiment towards each aspect of one or more entities .
As a testbed for this task , we introduce the SentiHood dataset , extracted from a question answering ( QA ) platform where urban neighbourhoods are discussed by users .
In this context units of text often mention several aspects of one or more neighbourhoods .
This is the first time that a generic social media platform in this case a QA platform , is used for fine - grained opinion mining .
Text coming from QA platforms is far less constrained compared to text from review specific platforms which current datasets are based on .
We develop several strong baselines , relying on logistic regression and state - of - the - art recurrent neural networks .
This work is licensed under a Creative Commons Attribution 4.0 International Licence .
Licence details :
Introduction
Sentiment analysis is an important task in natural language processing .
It has received not only a lot of interest in academia but also in industry , in particular for identifying customer satisfaction on products and services .
Early research in the field of sentiment analysis only focused on identifying the over all sentiment or polarity of a given text .
The underlying assumption of this work was that there is one over all polarity in the whole text .
Aspect - based sentiment analysis ( ABSA ) relates to the task of extracting fine - grained information by identifying the polarity towards different aspects of an entity in the same unit of text , and recognizing the polarity associated with each aspect separately .
The datasets for this task were mostly based on specialized review platforms such as Yelp where it is assumed that only one entity is discussed in one review snippet , but the opinion on multiple aspects can be expressed .
This task is particularly useful because a user can assess the aggregated sentiment for each individual aspect of a given product or service and get a more fine - grained understanding of its quality .
Another line of research in this field is targeted ( a.k.a. target - dependent ) sentiment analysis .
Targeted sentiment analysis investigates the classification of opinion polarities towards certain target entity mentions in given sentences ( often a tweet ) .
For instance in the sentence " People everywhere love Windows & vista .
Bill Gates " , polarity towards Bill Gates is " Neutral " but the positive sentiment towards
Windows & vista will interfere with identifying it if the usual methods for sentiment analysis task are employed .
However this task assumes only the over all sentiment for each entity .
Moreover , the existing corpora for this task so far has contained only a single target entity per unit of text .
Both settings are obviously limited , and there exists many scenarios in which sentiments towards different aspects of several entities are discussed in the same unit of text .
As a running example , we use urban are as : choosing which are a to live or to visit is an important task when moving or visiting a new city .
Currently there are no dedicated platforms for reviewing and rating aspects of neighbourhoods of a city .
However we can find many discussions and threads on several blogs and question answering platforms that discuss aspects of are as in many cities around the world .
In general , these conversations are very comprehensible : they often contain specific information about several aspects of several neighbourhoods .
One example is the following ( are a names are highlighted in bold and aspect related terms are underlined ) :
" Other places to look at in South London are Streatham ( good range of shops and restaurants , maybe a bit far out of central London but you get more for your money ) Brixton ( good transport links , trendy , can be a bit edgy )
Clapham ( good transport , good restaurants / pubs , can feel a bit dull , expensive ) ... "
The example above does not perfectly fit into the existing tasks in sentiment analysis mentioned earlier .
In this work , we introduce a new task that not only subsumes the existing sub-fields of targeted and aspect - based sentiment analysis but it also makes less assumptions on the number of entities that can be discussed in the unit of text .
To compare with the existing aspect - based sentiment analysis task , take the following example from the restaurant dataset used by SemEval shared ABSA task .
" The design of the space is good but the service is horrid ! " .
The ABSA task aims to identify that a positive sentiment towards the ambiance aspect is expressed ( opinion target expression is " space " ) .
Moreover , a negative sentiment is expressed towards the service aspect ( opinion target expression is " service " ) .
In this example , it is assumed that both of these opinions are expressed about a single restaurant which is not mentioned explicitly .
However , take the following synthetic example that ABSA is not addressing :
" The design of the space is good in Boqueria but the service is horrid , on the other hand , the staff in Gremio are very friendly and the food is always delicious . "
In this example , more than one restaurant are discussed and restaurants for which opinions are expressed , are explicitly mentioned .
We call these target entities .
Current ABSA task can only recognise that positive and negative opinions towards aspect " service " are expressed .
But it can not identify the target entity for each of these opinions ( i.e. Germio and Boqueria respectively ) .
Targeted aspect - based sentiment analysis handles extracting the target entities as well as different aspects and their relevant sentiments .
In the following , we argue that this task is both very relevant in practice , and raises interesting modelling questions .
To facilitate research on this task we introduce the SentiHood dataset .
SentiHood is based on the text from a QA platform in the domain of neighbourhoods of a city .
shows examples of input sentences and annotations provided .
Sentence
Labels location1 is very safe and location 2 is too far ( location1 , safety , Positive ) ( location1 , transit-location , None ) ( location2 , safety , None ) ( location2 , transit-location , Negative )
SentiHood
SentiHood is a dataset for the task of targeted aspect - based sentiment analysis .
It is based on the text taken from question answering platform of Yahoo !
Answers that is filtered for questions relating to neighbourhoods of the city of London .
In this section we explain the data collection and annotation process and summarise properties of the dataset .
Data Collection Process
Entities in the dataset are locations or neighbourhoods .
Yahoo!
Answers was queried using the name of each neighbourhood of the city of London .
Location ( entity ) names were taken from the gazetteer GeoNames 1 and restricted to those within the boundaries of London .
This list includes names of are as and boroughs and therefore entities are not always geographically exclusive ( a borough contains several are as or neighbourhoods ) .
The content of each question - answer pairs was aggregated and split into sentences .
We keep only sentences that have a mention of a location entity name and discard other sentences .
Categories
The Number of location mentions in a single sentence in our dataset varies from one to over 50 .
To simplify the task , we only annotate sentences that contain one or two location mentions .
These sentences were divided into two groups : sentences containing one location mention - Single , and sentences containing two location mentions - Multi .
This is to observe the difficulty of annotating two groups by human annotators and by the models .
Aspects
Like existing work in the aspect - based sentiment analysis task , a pre-defined list of aspects is provided for annotators to choose from .
These aspects are : live , safety , price , quiet , dining , nightlife , transit - location , touristy , shopping , green - culture and multicultural .
Adding an additional aspect of misc was considered .
However in the initial round of annotations , we realised that it had a negative effect on the decisiveness of annotators and it led to a lower over all agreement .
Aspect general refers to a generic opinion about a location , e.g. " I love Camden Town " .
Sentiment
For each selected aspect , annotators were required to select a polarity or sentiment .
Most work in this are a considers three sentiment categories of " Positive " .
" Negative " and " Neutral " .
In our annotation however , we only provided " Positive " and " Negative " sentiment labels .
This is because in our data we rarely come across cases where aspects are discussed without a polarity .
Target Entity
Target entity is a location entity in which an opinion ( aspect and sentiment ) is expressed for .
We also refer to target entity as target location .
Out of scope
For the sentences that do not comply with our schema , we define the two following special labels .
Sentences marked with one of the these labels are removed from the dataset .
1 .
Irrelevant :
When the identified name does not refer to a location entity : for example in the sentence " Notting Hill ( 1999 ) stars Julia Roberts and Hugh Grant use the characteristic features of the are a as a backdrop to the action " , " Notting Hill " refers to the movie and not the are a .
2 .
Uncertain :
When two contradicting sentiments are expressed for the same location and aspect , e.g.
" Like any other are a , Camden Town has good and bad parts " .
Moreover , when the opinion is expressed for an are a without a direct mention in the sentences , e.g .
" It 's a very trendy are a and not too far from King 's Cross " .
Procedure :
We use the BRAT annotation tool ) to simplify the annotation task .
Three annotators were initially selected for the task .
None of the annotators are experts in linguistics .
Annotators began by reading the guidelines and examples .
Each annotator was then required to annotate a small subset of the data .
After each round of annotation , agreements between annotators were calculated and discussed and this procedure continued until they reached a reasonable agreement .
10 % of the whole dataset was randomly selected and annotated by all the three annotators .
The annotator with the highest inter-annotator agreement was selected to annotate all the dataset .
Agreements : Cohen 's Kappa coefficient ( K ) is often used for measuring the pairwise agreement between each two annotators for the task of aspect - based sentiment analysis ) and other tasks .
The Kappa Coefficient is calculated over aspect - sentiment pairs per each location .
Pairwise inter-annotator agreement for aspect categories measured using Cohen 's Kappa is 0.73 , 0.78 and 0.70 , which is deemed of sufficient quality .
It is worth mentioning that agreements on different aspect categories varied , with some aspects having a higher agreement rate .
Agreements for aspect expressions are 0.93 , 0.94 , 0.93 .
These agreements indicate reasonably high inter-annotator agreements ( Pavlopoulos , 2014 ) .
Dis agreements :
Main dis agreements between annotators occurred in detecting the aspect rather than detecting the sentiment , aspect expression or the target location .
For instance , some annotators associated the expression " residential are a " with a " Positive " sentiment for aspect " quiet " or " live " and others did not agree that " residential " implies quietness or desirable for living .
In the case of dis agreements , the vote of the majority was considered as the correct annotation .
Some ambiguity was also observed with respect to detecting the target location .
This occurred mainly when a location is confined in another location .
For instance the sentence " Angel in Inslington has many great restaurants for eating out " expresses a " Positive " sentiment for the aspect " dining " of are a Angel which is within the borough of Islington .
Some annotators suggested that the sentence also implies the same opinion for Islington .
However at the end all annotators agreed that in such cases no implicit assumptions should be made and only confined are a should be labeled .
Dataset
SentiHood currently contains annotated sentences containing one or two location entity mentions .
2 Sen-tiHood contains 5215 sentences with 3862 sentences containing a single location and 1353 sentences containing multiple ( two ) locations .
shows the number of sentences thatare labeled with each aspect , breaking down on the sentiment " Positive " or " Negative " .
" Positive " sentiment is dominant for aspects such as dining and shopping .
This shows that for some aspects , people usually talk about are as thatare good for it as oppose to are as thatare not .
The general aspect is the most frequent aspect with over 2000 sentences while aspect touristy has occurred in less than 100 sentences .
Notice that since each sentence can contain one or more opinions , the total number of opinions ( 5920 ) in the dataset is higher than the number of sentences .
Location entity names are masked by location1 and location 2 in the whole dataset , so the task does not involve identification and segmentation of the named entities .
We also provide the dataset with the original location entity names .
Task
We define the task of targeted aspect - based sentiment analysis as follows : given a unit of text s ( for example , a sentence ) , provide a list of tuples ( labels ) { ( l , a , p ) }
T t=0 , where p is the polarity expressed for the aspect a of entity l.
Each sentence can have zero to T number of labels associated with it .
Within the current aspect - based sentiment analysis work , three tasks are defined : detecting the aspect , detecting the opinion target expression and detecting the sentiment , with detecting the opinion target expression being an intermediary task for identifying the sentiment of the aspect .
Here we focus on identifying only the aspect and sentiment for each entity .
We identify each aspect , its relevant sentiment and the target location entity jointly by introducing a new polarity class called " None " .
" None " indicated that a sentence does not contain an opinion for the aspect a of location l .
Therefore the over all task can be defined as a three - class classification task for each ( l , a ) pair with labels " Positive " , " Negative " , " None " .
shows an example of the input sentence and output labels .
Evaluation
Most existing work in aspect - based sentiment analysis field , report F 1 measure for aspect detection task , and accuracy for sentiment classification .
The scores can be calculated over 2 - class or 3 - class sentiments .
In our results , F 1 score is calculated with a threshold that is optimized on validation set .
We also propose the AUC ( are a under the ROC curve ) metric for both aspect and sentiment detection tasks .
AUC captures the quality of the ranking of output scores and does not rely on a threshold .
Baseline
Here we propose baselines for the task .
In all our methods , we treat the task as a three - class classification for each aspect and use a softmax function as follows :
where y l ,a is the sentiment label of aspect a for location l.
w c and b C are the weights and the bias specific to each sentiment class c , respectively .
e l is a representation of location l .
This representation can be a BoW or a distributional representation .
Each method that we propose here define their own specific representation fore l .
Logistic Regression
Many existing works in the aspect - based sentiment analysis task , 3 use a classifier , such as logistic regression or SVM , based on linguistic features such as n-grams , POS information or more hand - engineered features .
We can think of these features as a sparse representation e l that enter the softmax in equation 1 .
More concretely , we define the following sparse representations of locations :
Mask target entity n-grams :
For each location , we define an n-gram representation over the sentence and mask the target location using a special token .
This can help to differentiate between representations of two locations present in the same sentence .
Left - right n- grams : we create an n-gram representation for both the right and the left context around each location mention .
We then concatenate these two representations to obtain one single feature vector .
Left right pooling :
Previously embedding representations over the left and right context have been used for automatic feature detection in the targeted sentiment analysis task .
Inspired by this approach , we obtain max , min , average and standard deviation pooling over all the word embeddings for left and right context separately .
We then combine the pooled embeddings of the left and right context to obtain a single feature vector .
Word embeddings are obtained by running word2vec tool on a combination of our Yahoo !
Answers corpus and a substantially big corpus from the web .
4
Long Short - Term Memory ( LSTM )
Inspired by the recent success of applying deep neural networks on language tasks , we use a bidirectional LSTM to learn a classifier for each of the aspects .
Representations for a location ( e l ) are obtained using one of the following two approaches :
Final output state ( LSTM - Final ) : e l is the output embedding of the bidirectional LSTM .
Location output state ( LSTM - Location ) :
e l is the output representation at the index corresponding to the location entity as illustrated in . :
Bidirectional LSTM outputs a representation for each token in the sentence .
The output state at the index of each location is then fed into a softmax layer to identify the sentiment class for the corresponding aspect .
In this figure , LSTM is trained to identify the sentiment of aspect " price " .
Model should predict " Positive " for location1 and " Negative " for location 2
6 Experiments
In this paper , we select the four most frequent aspects from the dataset which are : " price " , " safety " , " transit-location " and " general " but the same approach can be applied to the remaining aspects .
We divide each collection of single and multiple location mentions into train , dev and test set , with each having 70 % , 10 % and 20 % of data respectively .
We choose the best model with respect to the dev set .
In the case of the LSTM , we evaluate the loss on both training set and dev set after each iteration .
We save the best model which has the lowest loss on the dev set over all the iterations .
We then run this model on the test set and report the results .
We report results separately on both categories of single location sentences and sentences with two locations and over all the data in the test set .
Results on single location sentences mainly show the ability of the model to detect the correct sentiment for an aspect .
On the other hand , results on two location sentences demonstrate the ability of the system not only on detecting the relevant sentiment of an aspect but also on recognising the target entity of the opinion .
Training LSTMs
We implement our LSTM models using tensorflow .
To tackle the problem of having an unbalanced dataset ( i.e. too many " None " instances ) , we train the LSTM model in batches with every batch having the same number of sentences selected randomly from each sentiment class .
We tune the hyper parameters of the model on the dev set .
The best model uses hidden units of size 50 and batch sizes of size 150 .
The Adam optimizer is used for optimization with a starting learning rate of 0.01 which is tuned to be the best performing on the dev set .
Dropout is used both on initial word embeddings and on LSTM cells with the probability of 0.001 .
Tensorflow ( ten , 2015 ) is used for the implementation of LSTM .
Training Logistic Regression Logistic regression models were based on implementations from scikitlearn .
Since we have an unbalanced dataset , we use a weighted logistic regression .
To obtain the best weights , we cross -validate them on the development set .
Weights inversely proportional to the size of each class result in the best performance .
shows the results ( averaged over all selected aspects ) in terms of both F 1 / accuracy and AUCs .
It also shows the results of logistic regression based models versus LSTM models .
As we can see , the n-gram representation with location masking achieves slightly better results over the left - right context .
N-grams include unigrams and bigrams .
Also , by adding POS information , we gain an increase in the performance .
We also experimented with adding tri-grams but it did not have a positive effect on the over all scores .
Separating the left and the right context ( LR - Left - Right ) for BoW representation , does not improve the performance .
Left - right pooling of dense embeddings performed weakly in comparison with other representations and therefore their results were omitted .
Amongst the two variations of LSTM , the model with final state embeddings does slightly better than the model where we use the embeddings at the location index , however they are not significantly different ( with a p valueless than 0.01 ) .
It is interesting to note that the best LSTM model is not superior to logistic regression model , especially in terms of AUC .
This can be due to the fact that the amount of training data is not sufficient for LSTM to perform well .
Moreover , while we provide some grammar information to logistic regression model through POS tags , such information is not incorporated into LSTM models .
Another interesting observation is that the F 1 measure for logistic regression model with n-grams and POS information is very low while this model 's performance is superior to other models in terms of AUC .
This is because in general , it is easier to rank prediction scores than to assign predicted labels to instances by choosing a hard threshold .
Model
Price Safety Transit General LR - Mask ( n-gram + POS ) 0.940 0.960 0.879 0.864 LSTM - Final 0.875 0.932 0.836 0.869
Related Work
The term sentiment analysis was first used in .
Since then , the field has received much attention from both research and industry .
Sentiment analysis has applications in almost in every domain and it raised many interesting research questions .
Furthermore , the availability of a huge volume of opinionated data on social media platforms has accelerated the development in this are a .
In the beginning work on sentiment analysis mainly focused on identifying the over all sentiment of a unit of text .
The unit of text varied from document , paragraph or sentences .
However , only considering the over all sentiment fails to capture the sentiments over the aspects on which an entity can be reviewed or sentiment expressed toward different entities .
Two remedy this , two new tasks have been introduced : aspect - based sentiment analysis and targeted sentiment analysis .
Aspect based sentiment analysis assumes a single entity per a unit of analysis and tries to identify sentiments towards different aspects of the entity .
This task however does not consider more than one entity in the given text .
Targeted ( target dependent ) sentiment analysis is another task that identifies polarity towards a target entity ( as opposed to over entire unit of text ) .
was the first to propose targeted sentiment analysis on Twitter and demonstrates the importance of targets by showing that 40 % of sentiment errors are due to not considering them in classification .
However this task only identifies the over all sentiment and the existing corpora for the task consist only of text with one single entity per unit of analysis .
The task of targeted aspect - based sentiment analysis caters for more generic text by making fewer assumptions while extracting fine - grained information .
Conclusion
In this paper , we introduced the task of targeted aspect - based sentiment analysis and a new dataset .
We also provide two strong baselines using logistic regression and LSTM .
Ways to improve the baselines can involve using parse trees for identifying the context of each location .
Data augmentation can be used to make the models and especially LSTM more robust to variations in the data .
We also like to provide more detailed analysis of what each system can achieve .
