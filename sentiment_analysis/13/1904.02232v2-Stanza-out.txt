title
BERT Post - Training for Review Reading Comprehension and Aspect - based Sentiment Analysis
abstract
Question - answering plays an important role in e-commerce as it allows potential customers to actively seek crucial information about products or services to help their purchase decision making .
Inspired by the recent success of machine reading comprehension ( MRC ) on formal documents , this paper explores the potential of turning customer reviews into a large source of knowledge that can be exploited to answer user questions .
We call this problem Review Reading Comprehension ( RRC ) .
To the best of our knowledge , no existing work has been done on RRC .
In this work , we first build an RRC dataset called ReviewRC based on a popular benchmark for aspectbased sentiment analysis .
Since ReviewRC has limited training examples for RRC ( and also for aspect - based sentiment analysis ) , we then explore a novel post - training approach on the popular language model BERT to enhance the performance of fine - tuning of BERT for RRC .
To show the generality of the approach , the proposed post - training is also applied to some other review - based tasks such as aspect extraction and aspect sentiment classification in aspect - based sentiment analysis .
Experimental results demonstrate that the proposed posttraining is highly effective 1 .
Introduction
For online commerce , question - answering ( QA ) serves either as a standalone application of customer service or as a crucial component of a dialogue system that answers user questions .
Many intelligent personal assistants ( such as Amazon Alexa and Google Assistant ) support online shopping by allowing the user to speak directly to the assistants .
One major hindrance for this mode of shopping is that such systems have limited capability to answer user questions about products ( or services ) , which are vital for customer decision making .
As such , an intelligent agent that can automatically answer customers ' questions is very important for the success of online businesses .
Given the ever - changing environment of products and services , it is very hard , if not impossible , to pre-compile an up - to - date and reliable knowledge base to cover a wide assortment of questions that customers may ask , such as in factoidbased KB - QA .
As a compromise , many online businesses leverage community question - answering ( CQA ) to crowdsource answers from existing customers .
However , the problem with this approach is that many questions are not answered , and if they are answered , the answers are delayed , which is not suitable for interactive QA .
In this paper , we explore the potential of using product reviews as a large source of user experiences that can be exploited to obtain answers to user questions .
Although there are existing studies that have used information retrieval ( IR ) techniques to find a whole review as the response to a user question , giving the whole review to the user is undesirable as it is quite time - consuming for the user to read it .
Inspired by the success of Machine Reading Comphrenesions ( MRC ) , we propose a novel task called Review Reading Comprehension ( RRC ) as following .
Problem Definition :
Given a question q = ( q 1 , . . . , q m ) from a customer ( or user ) about a product and a review d = ( d 1 , . . . , d n ) for that product containing the information to answer q , find a sequence of tokens ( a text span ) a = ( d s , . . . , d e ) ind that answers q correctly , where 1 ? s ? n , 1 ? e ? n , and s ?
e.
A sample laptop review is shown in .
We can see that customers may not only ask factoid Questions Q1 :
Does it have an internal hard drive ?
Q2 : How large is the internal hard drive ?
Q3 : is the capacity of the internal hard drive OK ?
Review Excellent value and a must buy for someone looking for a Macbook .
You ca n't get any better than this price and it come with A1 an internal disk drive .
All the newer MacBooks do not .
Plus you get 500 GB A2 which is also a great A3 feature .
Also , the resale value on this will keep .
I highly recommend you get one before they are gone . questions such as the specs about some aspects of the laptop as in the first and second questions but also subjective or opinion questions about some aspects ( capacity of the hard drive ) , as in the third question .
RRC poses some domain challenges compared to the traditional MRC on Wikipedia , such as the need for rich product knowledge , informal text , and fine - grained opinions ( there is almost no subjective content in Wikipedia articles ) .
Research also shows that yes / no questions are very frequent for products with complicated specifications .
To the best of our knowledge , no existing work has been done in RRC .
This work first builds an RRC dataset called ReviewRC , using reviews from SemEval 2016 Task 5 2 , which is a popular dataset for aspect - based sentiment analysis ( ABSA ) in the domains of laptop and restaurant .
We detail ReviewRC in Sec.
5 . Given the wide spectrum of domains ( types of products or services ) in online businesses and the prohibitive cost of annotation , ReviewRC can only be considered to have a limited number of annotated examples for supervised training , which still leaves the domain challenges partially unresolved .
This work adopts BERT ) as the base model as it achieves the state - of the - art performance on MRC .
Although BERT aims to learn contextualized representations across a wide range of NLP tasks ( to be task - agnostic ) , leveraging BERT alone still leaves the domain challenges un - 2 http://alt.qcri.org/semeval2016/
task5/.
We choose these review datasets to align RRC with existing research on sentiment analysis. resolved ( as BERT is trained on Wikipedia articles and has almost no understanding of opinion text ) , and it also introduces another challenge of task - awareness ( the RRC task ) , called the task challenge .
This challenge arises when the taskagnostic BERT meets the limited number of finetuning examples in ReviewRC ( see Sec. 5 ) for RRC , which is insufficient to fine - tune BERT to ensure full task - awareness of the system 3 .
To address all the above challenges , we propose a novel joint post - training technique that takes BERT 's pre-trained weights as the initialization 4 for basic language understanding and adapt BERT with both domain knowledge and task ( MRC ) knowledge before fine - tuning using the domain end task annotated data for the domain RRC .
This technique leverages knowledge from two sources : unsupervised domain reviews and supervised ( yet out - of - domain ) MRC data 5 , where the former enhances domain - awareness and the latter strengthens MRC task - awareness .
As a general - purpose approach , we show that the proposed method can also benefit ABSA tasks such as aspect extraction ( AE ) and aspect sentiment classification ( ASC ) .
The main contributions of this paper are as follows .
( 1 ) It proposes the new problem of review reading comprehension ( RRC ) .
( 2 ) To solve this new problem , an annotated dataset for RRC is created .
( 3 ) It proposes a general - purpose posttraining approach to improve RRC , AE , and ASC .
Experimental results demonstrate that the proposed approach is effective .
Related Works
Many datasets have been created for MRC from formally written and objective texts , e.g. , Wikipedia ( WikiReading , SQuAD , Wiki - Hop , , QuAC , Hotpot QA ) news and other articles ( CNN / Daily Mail , News QA , RACE ) , fictional stories ( MCTest , CBT , Narrative QA ) , and general Web documents ( MS MARCO , TriviaQA , SearchQA ) .
Also , CoQA is built from multiple sources , such as Wikipedia , Reddit , News , Mid / High School Exams , Literature , etc .
To the best of our knowledge , MRC has not been used on reviews , which are primarily subjective .
As such , we created a review - based MRC dataset called Re-view RC .
Answers from Review RC are extractive ( similar to SQuAD ) rather than abstractive ( or generative ) ( such as in MS MARCO and CoQA ) .
This is crucial because online businesses are typically cost-sensitive and extractive answers written by humans can avoid generating incorrect answers beyond the contents in reviews by an AI agent .
Community QA ( CQA ) is widely adopted by online businesses to help users .
However , since it solely relies on humans to give answers , it often takes along time to get a question answered or even not answered at all as we discussed in the introduction .
Although there exist researches that align reviews to questions as an information retrieval task , giving a whole review to the user to read is time - consuming and not suitable for customer service settings that require interactive responses .
Knowledge bases ( KBs ) ( such as Freebase or DBpedia ) have been used for question answering .
However , the ever - changing nature of online businesses , where new products and services appear constantly , makes it prohibitive to build a highquality KB to cover all new products and services .
Reviews also serve as a rich resource for sentiment analysis .
Although documentlevel ( review ) sentiment classification maybe considered as a solved problem ( given ratings are largely available ) , aspect - based sentiment analysis ( ABSA ) is still an open challenge , where alleviating the cost of human annotation is also a major issue .
ABSA aims to turn unstructured reviews into structured fine - grained aspects ( such as the " battery " of a laptop ) and their associated opinions ( e.g. , " good battery " is positive about the aspect battery ) .
Two important tasks in ABSA are aspect extraction ( AE ) and aspect sentiment classification ( ASC ) , where the former aims to extract aspects ( e.g. , " battery " ) and the latter targets to identify the polarity for a given aspect ( e.g. , positive for battery ) .
Recently , supervised deep learning models dominate both tasks ) and many of these models use handcrafted features , lexicons , and complicated neural network architectures to remedy the insufficient training examples from both tasks .
Although these approaches may achieve better performances by manually injecting human knowledge into the model , human baby - sat models may not be intelligent enough 6 and automated representation learning from review corpora is always preferred .
We push forward this trend with the recent advance in pre-trained language models from deep learning .
Although it is practical to train domain word embeddings from scratch on large - scale review corpora , it is impractical to train language models from scratch with limited computational resources .
As such , we show that it is practical to adapt language models pre-trained from formal texts to domain reviews .
BERT and Review - based Tasks
In this section , we briefly review BERT and derive its fine - tuning formulation on three ( 3 ) reviewbased end tasks .
BERT
BERT is one of the key innovations in the recent progress of contextualized representation learning .
The idea behind the progress is that even though the word embedding layer ( in a typical neural network for NLP ) is trained from large - scale corpora , training a wide variety of neural architectures that encode contextual representations only from the limited supervised data on end tasks is insufficient .
that are intended to provide additional features for a particular architecture that bears human 's understanding of the end task , BERT adopts a fine - tuning approach that requires almost no specific architecture for each end task .
This is desired as an intelligent agent should minimize the use of prior human knowledge in the model design .
Instead , it should learn such knowledge from data .
BERT has two parameter intensive settings :
BERT BASE : 12 layers , 768 hidden dimensions and 12 attention heads ( in transformer ) with the total number of parameters , 110M ;
BERT LARGE : 24 layers , 1024 hidden dimensions and 16 attention heads ( in transformer ) with the total number of parameters , 340M .
We only extend BERT with one extra taskspecific layer and fine - tune BERT on each end task .
We focus on three ( 3 ) review - based tasks : review reading comprehension ( RRC ) , aspect extraction ( AE ) and aspect sentiment classification ( ASC ) .
The inputs / outputs settings are depicted in and detailed in the following subsections .
Review Reading Comprehension ( RRC )
Following the success of SQuAD and BERT 's SQuAD implementation , we design review reading comprehension as follows .
Given a question q = ( q 1 , . . . , q m ) asking for an answer from a review d = ( d 1 , . . . , d n ) , we formulate the input as a sequence
is a dummy token not used for RRC and [ SEP ] is intended to separate q and d. Let BERT ( ) be the pre-trained ( or posttrained as in the next section ) BERT model .
We first obtain the hidden representation ash = BERT ( x ) ?
R r h * | x | , where | x | is the length of the input sequence and r h is the size of the hidden dimension .
Then the hidden representation is passed to two separate dense layers followed by softmax functions :
The softmax is applied along the dimension of the sequence .
The output is a span across the positions ind ( after the [ SEP ] token of the input ) , indicated by two pointers ( indexes ) sand e computed from l 1 and l 2 : s = arg max Idx [ SEP ]<s<|x| ( l 1 ) and e = arg max s?e<| x | ( l 2 ) , where Idx is the position of token [ SEP ] ( so the pointers will never point to tokens from the question ) .
As such , the final answer will always be a valid text span from the review as a = ( d s , . . . , d e ) .
Training the RRC model involves minimizing the loss that is designed as the averaged cross entropy on the two pointers :
where I ( s ) and I ( e ) are one - hot vectors representing the ground truths of pointers .
RRC may suffer from the prohibitive cost of annotating large - scale training data covering a wide range of domains .
And BERT severely lacks two kinds of prior knowledge : ( 1 ) large - scale domain knowledge ( e.g. , about a specific product category ) , and ( 2 ) task - awareness knowledge ( MRC / RRC in this case ) .
We detail the technique of jointly incorporating these two types of knowledge in Sec. 4 .
Aspect Extraction
As a core task in ABSA , aspect extraction ( AE ) aims to find aspects that reviewers have expressed opinions on .
In supervised settings , it is typically modeled as a sequence labeling task , where each token from a sentence is labeled as one of { Begin , Inside , Outside } .
A continuous chunk of tokens that are labeled as one B and followed by zero or more Is forms an aspect .
The input sentence with m words is con-
After h = BERT ( x ) , we apply a dense layer and a softmax for each position of the sequence : l 3 = softmax ( W 3 h+b 3 ) , where W 3 ?
R 3 * r hand b 3 ?
R 3 ( 3 is the total number of labels ( BIO ) ) .
Softmax is applied along the dimension of labels for each position and l 3 ?
[ 0 , 1 ] 3 * | x | .
The labels are predicted as taking argmax function at each position of l 3 and the loss function is the averaged cross entropy across all positions of a sequence .
AE is a task that requires intensive domain knowledge ( e.g. , knowing that " screen " is apart of a laptop ) .
Previous study has shown that incorporating domain word embeddings greatly improve the performance .
Adapting BERT 's general language models to domain reviews is crucial for AE , as shown in Sec. 5 .
Aspect Sentiment Classification
As a subsequent task of AE , aspect sentiment classification ( ASC ) aims to classify the sentiment polarity ( positive , negative , or neutral ) expressed on an aspect extracted from a review sentence .
There are two inputs to ASC : an aspect and a review sentence mentioning that aspect .
Consequently , ASC is close to RRC as the question is just about an aspect and the review is just a review sentence but ASC only needs to output a class of polarity instead of a textual span .
Let
, where q 1 , . . . , q m now is an aspect ( with m tokens ) and d 1 , . . . , d n is a review sentence containing that aspect .
After h = BERT ( x ) , we leverage the representations of [ CLS ] h , which is the aspect - aware representation of the whole input .
The distribution of polarity is predicted as l 4 = softmax ( W 4 h [ CLS ] + b 4 ) , where W 4 ?
R 3 * r hand b 4 ?
R 3 ( 3 is the number of polarities ) .
Softmax is applied along the dimension of labels on [ CLS ] : l 4 ?
[ 0 , 1 ] 3 .
Training loss is the cross entropy on the polarities .
As a summary of these tasks , insufficient supervised training data significantly limits the performance gain across these 3 review - based tasks .
Al - though BERT 's pre-trained weights strongly boost the performance of many other NLP tasks on formal texts , we observe in Sec. 5 that BERT 's weights only result in limited gain or worse performance compared with existing baselines .
In the next section , we introduce the post - training step to boost the performance of all these 3 tasks .
Post - training
As discussed in the introduction , fine - tuning BERT directly on the end task that has limited tuning data faces both domain challenges and taskawareness challenge .
To enhance the performance of RRC ( and also AE and ASC ) , we may need to reduce the bias introduced by non-review knowledge ( e.g. , from Wikipedia corpora ) and fuse domain knowledge ( DK ) ( from unsupervised domain data ) and task knowledge ( from supervised MRC task but out - of - domain data ) .
Given MRC is a general task with answers of questions covering almost all document contents , a large - scale MRC supervised corpus may also benefit AE and ASC .
Eventually , we aim to have a general - purpose post - training strategy that can exploit the above two kinds of knowledge for end tasks .
To post-train on domain knowledge , we leverage the two novel pre-training objectives from BERT : masked language model ( MLM ) and next sentence 7 prediction ( NSP ) .
The former predicts randomly masked words and the latter detects whether two sides of the input are from the same document or not .
A training example is formulated as ( [ CLS ] , x 1:j , [ SEP ] , x j+1:n , [ SEP ] ) , where x 1:n is a document ( with randomly masked words ) split into two sides x 1:j and x j+1:n and [ SEP ] separates those two .
MLM is crucial for injecting review domain knowledge and for alleviating the bias of the knowledge from Wikipedia .
For example , in the Wikipedia domain , BERT may learn to guess the [ MASK ] in " The [ MASK ] is bright " as " sun " .
But in a laptop domain , it could be " screen " .
Further , if the [ MASK ] ed word is an opinion word in " The touchscreen is [ MASK ] " , this objective challenges BERT to learn the representations for fine - grained opinion words like " great " or " terrible " for .
The objective of NSP further encourages BERT to learn contextual representation beyond word - level .
In the context of reviews , NSP formulates a task of " artificial review prediction " , where a negative example is an original review but a positive example is a synthesized fake review by combining two different reviews .
This task exploits the rich relationships between two sides in the input , such as whether two sides of texts have the same rating or not ( when two reviews with different ratings are combined as a positive example ) , or whether two sides are targeting the same product or not ( when two reviews from different products are merged as a positive example ) .
In summary , these two objectives encourage to learn a myriad of fine - grained features for potential end tasks .
We let the loss function of MLM be L MLM and the loss function of next text piece prediction be L NSP , the total loss of the domain knowledge posttraining is L DK = L MLM + L NSP .
To post-train BERT on task - aware knowledge , we use SQuAD ( 1.1 ) , which is a popular largescale MRC dataset .
Although BERT gains great success on SQuAD , this success is based on the huge amount of training examples of SQuAD ( 100,000 + ) .
This amount is large enough to ameliorate the flaws of BERT that has almost no questions on the left side and no textual span predictions based on both the question and the document on the right side .
However , a small amount of finetuning examples is not sufficient to turn BERT to be more task - aware , as shown in Sec. 5 .
We let the loss on SQuAD be L MRC , which is in a similar setting as the loss L RRC for RRC .
As a result , the joint loss of post - training is defined as L = L DK + L MRC .
One major issue of post - training on such a loss is the prohibitive cost of GPU memory usage .
Instead of updating parameters over a batch , we divide a batch into multiple sub-batches and accumulate gradients on those sub-batches before parameter updates .
This allows for a smaller subbatch to be consumed in each iteration .
Algorithm 1 describes one training step and takes one batch of data on domain knowledge ( DK ) D DK and one batch of MRC training data D MRC to update the parameters ? of BERT .
In line 1 , it first initializes the gradients ? ?
of all parameters as 0 to prepare gradient computation .
Then in lines 2 and 3 , each batch of training data is split into u sub-batches .
Lines 4 - 7 spread the calculation of gradients to u iterations , where the data from each iteration of sub - batches are supposed
to be able to fit into GPU memory .
In line 5 , it computes the partial joint loss L partial of two subbatches D DK , i and D MRC , i from the i - th iteration through forward pass .
Note that the summation of two sub - batches ' losses is divided by u , which compensate the scale change introduced by gradient accumulation inline
6 .
Line 6 accumulates the gradients produced by backpropagation from the partial joint loss .
To this end , accumulating the gradients u times is equivalent to computing the gradients on the whole batch once .
But the subbatches and their intermediate hidden representations during the i - th forward pass can be discarded to save memory space .
Only the gradients ? ?
are kept throughout all iterations and used to update parameters ( based on the chosen optimizer ) inline 8 .
We detail the hyper - parameter settings of this algorithm in Sec. 5.3 .
Experiments
We aim to answer the following research questions ( RQs ) in the experiment : RQ1 : what is the performance gain of posttraining for each review - based task , with respect to the state - of - the - art performance ?
RQ2 : what is the performance of BERT 's pretrained weights on three review - based tasks without any domain and task adaptation ?
RQ3 : upon ablation studies of separate domain knowledge post - training and task - awareness posttraining , what is their respective contribution to the whole post - training performance gain ?
End Task Datasets
As there are no existing datasets for RRC and to be consistent with existing research on sentiment analysis , we adopt the laptop and restaurant reviews of SemEval 2016 Task 5 as the source to create datasets for RRC .
We do not use SemEval 2014 Task 4 or SemEval 2015 Task 12 because these datasets do not come with the review ( document ) level XML tags to recover whole reviews from review sentences .
We keep the split of training and testing of the SemEval 2016 Task 5 datasets and annotate multiple QAs for each review following the way of constructing QAs for the SQuAD 1.1 datasets .
To make sure our questions are close to realworld questions , 2 annotators are first exposed to 400 QAs from CQA ( under the laptop category in Amazon.com or popular restaurants in Yelp.com ) to get familiar with real questions .
Then they are asked to read reviews and independently label textual spans and ask corresponding questions when they feel the textual spans contain valuable information that customers may care about .
The textual spans are labeled to be as concise as possible but still human - readable .
Note that the annotations for sentiment analysis tasks are not exposed to annotators to avoid biased annotation on RRC .
Since it is unlikely that the two annotators can label the same QAs ( the same questions with the same answer spans ) , they further mutually check each other 's annotations and dis agreements are discussed until agreements are reached .
Annotators are encouraged to label as many questions as possible from testing reviews to get more test examples .
A training review is encouraged to have 2 questions ( training examples ) on average to have good coverage of reviews .
The annotated data is in the format of SQuAD 1.1 to ensure compatibility with existing implementations of MRC models .
The statistics of the RRC dataset ( ReviewRC ) are shown in .
Since SemEval datasets do not come with a validation set , we further split 20 % of reviews from the training set for validation .
Statistics of datasets for AE and ASC are given in .
For AE , we choose SemEval 2014 Task 4 for laptop and SemEval - 2016 Task 5 for restaurant to be consistent with and other previous works .
For ASC , we use SemEval 2014 Task 4 for both laptop and restaurant as existing research frequently uses this version .
We use 150 examples from the training set of all these datasets for validation .
Post - training datasets
For domain knowledge post - training , we use Amazon laptop reviews and Yelp Dataset Challenge reviews 8 .
For laptop , we filtered out reviewed products that have appeared in the validation / test reviews to avoid training bias for test data ( Yelp reviews do not have this issue as the source reviews of SemEval are not from Yelp ) .
Since the number of reviews is small , we choose a duplicate factor of 5 ( each review generates about 5 training examples ) during BERT data pre-processing .
This gives us 1,151,863 posttraining examples for laptop domain knowledge .
For the restaurant domain , we use Yelp reviews from restaurant categories that the SemEval reviews also belong to .
We choose 700K reviews to ensure it is large enough to generate training examples ( with a duplicate factor of 1 ) to cover all post - training steps that we can afford ( discussed in Section 5.3 )
9 .
This gives us 2,677,025 post-training examples for restaurant domain knowledge learning .
For MRC task - awareness post - training , we leverage SQuAD 1.1 ) that come with 87,599 training examples from 442 Wikipedia articles .
Hyper-parameters
We adopt BERT BASE ( uncased ) as the basis for all experiments
10 . Since post - training may take a large footprint on GPU memory ( as BERT pretraining ) , we leverage FP16 computation 11 to reduce the size of both the model and hidden representations of data .
We set a static loss scale of 2 in FP16 , which can avoid any over / under - flow of floating point computation .
The maximum length of post -training is set to 320 with a batch size of 16 for each type of knowledge .
The number of subbatch u is set to 2 , which is good enough to store each sub - batch iteration into a GPU memory of 11G .
We use Adam optimizer and set the learning rate to be 3e - 5 .
We train 70,000 steps for the laptop domain and 140,000 steps for the restaurant domain , which roughly have one pass over the preprocessed data on the respective domain .
Compared Methods
As BERT outperforms existing open source MRC baselines by a large margin , we do not intend to exhaust existing implementations but focus on variants of BERT introduced in this paper .
DrQA is a baseline from the document reader 12 of DrQA .
We adopt this baseline because of its simple implementation for reproducibility .
We run the document reader with random initialization and train it directly on Review RC .
We use all default hyper - parameter settings for this baseline except the number of epochs , which is set as 60 for better convergence .
DrQA + MRC is derived from the above baseline with official pre-trained weights on SQ u AD .
We fine - tune document reader with Review RC .
We expand the vocabulary of the embedding layer from the pre-trained model on ReviewRC since reviews may have words that are rare in Wikipedia and keep other hyper - parameters as their defaults .
For AE and ASC , we summarize the scores of the state - of - the - arts on SemEval ( based the best of our knowledge ) for brevity .
DE - CNN reaches the state - of the - arts for AE by leveraging domain embeddings .
MGAN reaches the state - of - theart ASC on SemEval 2014 task 4 .
Lastly , to answer RQ1 , RQ2 , and RQ3 , we have the following BERT variants .
BERT leverages the vanilla BERT pre-trained 12 https://github.com/facebookresearch/DrQA
weights and fine - tunes on all 3 end tasks .
We use this baseline to answer RQ2 and show that BERT 's pre-trained weights alone have limited performance gains on review - based tasks .
BERT - DK post - trains BERT 's weights only on domain knowledge ( reviews ) and fine - tunes on the 3 end tasks .
We use BERT - DK and the following BERT - MRC to answer RQ3 .
BERT - MRC post - trains BERT 's weights on SQuAD 1.1 and then fine - tunes on the 3 end tasks .
BERT - PT ( proposed method ) post -trains BERT 's weights using the joint post - training algorithm in Section 4 and then fine - tunes on the 3 end tasks .
Evaluation Metrics and Model Selection
To be consistent with existing research on MRC , we use the same evaluation script from SQuAD 1.1 for RRC , which reports Exact Match ( EM ) and F1 scores .
EM requires the answers to have exact string match with human annotated answer spans .
F1 score is the averaged F 1 scores of individual answers , which is typically higher than EM and is the major metric .
Each individual F 1 score is the harmonic mean of individual precision and recall computed based on the number of overlapped words between the predicted answer and human annotated answers .
For AE , we use the standard evaluation scripts come with the SemEval datasets and report the F1 score .
For ASC , we compute both accuracy and Macro - F1 over 3 classes of polarities , where Macro - F1 is the major metric as the imbalanced classes introduce biases on accuracy .
To be consistent with existing research , examples belonging to the conflict polarity are dropped due to a very small number of examples .
We set the maximum number of epochs to 4 for BERT variants , though most runs converge just within 2 epochs .
Results are reported as averages of 9 runs ( 9 different random seeds for random batch generation ) .
13
Result Analysis
The results of RRC , AE and ASC are shown in Tables 4 , 5 and 6 , respectively .
To answer RQ1 , we observed that the proposed joint post - training ( BERT - PT ) has the best performance over all tasks in all domains , which show the benefits of having two types of knowledge .
Domain Laptop
Rest. Methods EM F1 EM F1 DrQA 38.26 50.99 49.52 63.73 DrQA+MRC 40 To answer RQ2 , to our surprise we found that the vanilla pre-trained weights of BERT do not work well for review - based tasks , although it achieves state - of - the - art results on many other NLP tasks .
This justifies the need to adapt BERT to review - based tasks .
To answer RQ3 , we noticed that the roles of domain knowledge and task knowledge vary for different tasks and domains .
For RRC , we found that the performance gain of BERT - PT mostly comes from task - awareness ( MRC ) post -training ( as indicated by BERT - MRC ) .
The domain knowledge helps more for restaurant than for laptop .
We suspect the reason is that certain types of knowledge ( such as specifications ) of laptop are already present in Wikipedia , whereas Wikipedia has little knowledge about restaurant .
We further investigated the examples improved by BERT - MRC and found that the boundaries of spans ( especially short spans ) were greatly improved .
For AE , we found that great performance boost comes mostly from domain knowledge posttraining , which indicates that contextualized representations of domain knowledge are very important for AE .
BERT - MRC has almost no improvement on restaurant , which indicates Wikipedia may have no knowledge about aspects of restaurant .
We suspect that the improvements on laptop come from the fact that many answer spans in SQuAD are noun terms , which bear a closer relationship with laptop aspects .
For ASC , we observed that large - scale annotated MRC data is very useful .
We suspect the reason is that ASC can be interpreted as a special MRC problem , where all questions are about the polarity of a given aspect .
MRC training data may help BERT to understand the input format of ASC given their closer input formulation .
Again , domain knowledge post - training also helps ASC .
We further investigated the errors from BERT - PT over the 3 tasks .
The errors on RRC mainly come from boundaries of spans that are not concise enough and incorrect location of spans that may have certain nearby words related to the question .
We believe precisely understanding user 's experience is challenging from only domain posttraining given limited help from the RRC data and no help from the Wikipedia data .
For AE , errors mostly come from annotation inconsistency and boundaries of aspects ( e.g. , apple OS is predicted as OS ) .
Restaurant suffers from rare aspects like the names of dishes .
ASC tends to have more errors as the decision boundary between the negative and neutral examples is unclear ( e.g. , even annotators may not sure whether the reviewer shows no opinion or slight negative opinion when mentioning an aspect ) .
Also , BERT - PT has the problem of dealing with one sentence with two opposite opinions ( " The screen is good but not for windows . " ) .
We believe that such training examples are rare .
Conclusions
We proposed a new task called review reading comprehension ( RRC ) and investigated the possibility of turning reviews as a valuable resource for answering user questions .
We adopted BERT as our base model and proposed a joint post - training approach to enhancing both the domain and task knowledge .
We further explored the use of this approach in two other review - based tasks : aspect extraction and aspect sentiment classification .
Experimental results show that the post - training approach before fine - tuning is effective .
