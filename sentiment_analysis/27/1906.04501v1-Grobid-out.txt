title
Modeling Sentiment Dependencies with Graph Convolutional Networks for Aspect-level Sentiment Classification
abstract
Aspect-level sentiment classification aims to distinguish the sentiment polarities over one or more aspect terms in a sentence. Existing approaches mostly model different aspects in one sentence independently, which ignore the sentiment dependencies between different aspects. However, we find such dependency information between different aspects can bring additional valuable information. In this paper, we propose a novel aspect-level sentiment classification model based on graph convolutional networks (GCN) which can effectively capture the sentiment dependencies between multi-aspects in one sentence. Our model firstly introduces bidirectional attention mechanism with position encoding to model aspect-specific representations between each aspect and its context words, then employs GCN over the attention mechanism to capture the sentiment dependencies between different aspects in one sentence. We evaluate the proposed approach on the SemEval 2014 datasets. Experiments show that our model outperforms the state-of-the-art methods. We also conduct experiments to evaluate the effectiveness of GCN module, which indicates that the dependencies between different aspects is highly helpful in aspect-level sentiment classification.
Introduction
Aspect-level sentiment classification is a fundamental natural language processing task that gets lots of attention in recent years. It is a fine-grained task in sentiment analysis, which aims to infer the sentiment polarities of aspects in their context. For example, in the sentence "The price is reasonable although the service is poor", the sentiment polarities for the two aspect terms, "price" and "service", are positive and negative respectively. An aspect term (or simply aspect) is usually an entity or an entity aspect.
Aspect-level sentiment classification is much more complicated than sentence-level sentiment classification, because identifying the parts of sentence describing the corresponding aspects is difficult. Traditional approaches mainly focus on statistical methods to design a set of handcrafted features to train a classifier (e.g., Support Vector Machine). However, such kind of feature-based work is labor-intensive. In recent years, neural network models are of growing interest for their capacity to automatically generate useful low dimensional representations from aspects and their contexts, and achieve great accuracy on the aspect-level sentiment classification without careful engineering of features. Especially, by the ability to effectively identify which words in the sentence are more important on a given aspect, attention mechanisms implemented by neural networks are widely used in aspect-level sentiment classification.  The setting is romantic, but the food is horrible, the service is pathetic.
setting food service aspect-1 aspect-2 aspect-3 opposite similar. An example to illustrate the usefulness of the sentiment dependencies between multiple aspects. The dependencies can be inferred by some knowledge in the sentence, e.g., conjunction. The evidence of the usefulness of the sentiment dependencies is that we can easily guess the true sentiment of "food" even if we mask the word "horrible".
mechanism with a gated recurrent unit network to capture the relevance between each context word and the aspect. Ma et al. design a model which learns the representations of the aspect and context interactively with two attention mechanisms. Song et al. propose an attentional encoder network, which employ multi-head attention for the modeling between context and aspect. These attention-based models have proven to be successful and effective in learning aspect-specific representations. Despite these advances, the studies above still remain problems. They all build models with each aspect individually ignoring the sentiment dependencies information between mul-tiple aspects, which will lose some additional valuable information. For example, as we can see from the example given in, the sentiment polarity of the first aspect "setting" is positive. From the conjunction "but", we are easy to know that the second aspect "food" has opposite sentiment polarity with "setting". By this sentiment dependency relation, we can guess the polarity of aspect "food" is negative. Similarly, from the second comma, we conjecture that the sentiment polarity of the last aspect "service" is likely the same as "food". Therefore, the sentiment dependencies are helpful to infer the sentiment polarities of aspects in one sentence.
In this paper, we propose a novel method to model Sentiment Dependencies with Graph Convolutional Networks (SDGCN) for aspect-level sentiment classification. GCN is a simple and effective convolutional neural network operating on graphs, which can catch inter-dependent information from rich relational data. For every node in graph, GCN encodes relevant information about its neighborhoods as a new feature representation vector. In our case, an aspect is treated as anode, and an edge represents the sentiment dependency relation of two nodes. Our model learns the sentiment dependencies of aspects via this graph structure. As far as we know, our work is the first to consider the sentiment dependencies between aspects in one sentence for aspect-level sentiment classification task. Furthermore, in order to capture the aspect-specific representations, our model applies bidirectional attention mechanism with position encoding before GCN. We evaluate the proposed approach on the SemEval 2014 datasets. Experiments show that our model outperforms the state-of-the-art methods. The main contributions of this paper are presented as follows:
? To the best of our knowledge, this is the first study to consider the sentiment dependencies between aspects in one sentence for aspect-level sentiment classification.
? We design bidirectional attention mechanism with position encoding to capture the aspect-specific representations.
? We propose a novel multi-aspects sentiment classification framework, which employs GCN to effectively capture the sentiment dependencies between different aspects in one sentence.
? We evaluate our method on the SemEval 2014 datasets. And experiments show that our model achieves superior performance over the state-of-the-art approaches.

Related work
In this section, we will review related works on aspectlevel sentiment classification and graph convolutional network briefly.

Aspect-level sentiment classification
Sentiment analysis, also known as opinion mining, is an important research topic in Natural Language Processing (NLP). Aspect-level sentiment classification is a fine-grained task in sentiment analysis. In aspect-level sentiment classification , early works mainly focus on extracting a set of features like bag-of-words features and sentiment lexicons features to train a sentiment classifier. These methods including rulebased methods and statistic-based methods rely on feature-engineering which are labor intensive. In recent years, deep neural network methods are getting more and more attention as they can generate the dense vectors of sentences without handcrafted features. And the vectors are lowdimensional word representations with rich semantic information remained. Moreover, using the attention mechanism can enhance the sentence representation for concentrating on the key part of a sentence given an aspect. Wang et al. propose ATAE-LSTM that combines LSTM and attention mechanism. The model makes embeddings of aspects to participate in computing attention weights. RAM is proposed by Chen et al. which adopts multiple-attention mechanism on the memory built with bidirectional LSTM. Ma et al. design a model with the bidirectional attention mechanism, which interactively learns the attention weights on context and aspect words respectively. Song et al. propose an attentional encoder network, which eschews recurrence and apply multi-head attention for the modeling between context and aspect. However, these attention works model each aspect separately in one sentence, which may loss some sentiment dependency information on multiple aspects case.

Graph convolutional network
GCN is widely used to deal with data which contains rich relationships and interdependency between objects, because GCN can effectively capture the dependence of graphs via message passing between the nodes of graphs. We also employ a graph to capture the sentiment dependencies between aspects. The final output of each GCN node is designed to be the classifier of the corresponding aspect in our task. Moreover, there are no explicit edges in our task. Thus, we need to define the edges from scratch.

Methodology
Aspect-level sentiment classification can be formulated as follows. Given an input context consists of N words. An example to illustrate the usefulness of the sentiment dependencies between multiple aspects. The dependencies can be inferred by some knowledge in the sentence, e.g., conjunction. The evidence of the usefulness of the sentiment dependencies is that we can easily guess the true sentiment of food even if we mask the word horrible.
words. It is required to construct a sentiment classifier that predicts the sentiment polarities of the multiple aspect teams.
We present the over all architecture of the proposed SDGCN in. It consists of the input embedding layer, the Bi-LSTM, the position encoding, the bidirectional attention mechanism, the GCN and the output layer. Next, we introduce all components sequentially from input to output.

Input embedding layer
Input embedding layer maps each word to a high dimensional vector space. We employ the pretrained embedding matrix GloVe and pretrained model BERT to obtain the fixed word embedding of each word. Then each word will be represented by an embedding vector e t ? Rd emb ?1 , where d emb is the dimension of word vectors. After embedding layer, the context embedding is denoted as a matrix E c ? Rd emb ?N , and the i-th aspect embedding is denoted as a matrix E a i ? Rd emb ?M i .

Bidirectional Long Short-Term Memory (Bi-LSTM)
We employ Bi-LSTM on top of the embedding layer to capture the contextual information for each word. After feeding word embedding to Bi-LSTM, the forward hidden state ? ? ht ? Rd hid ?1 and the backward hidden state ? ? ht ? Rd hid ?1 are obtained, where d hid is the number of hidden units. We concatenate both the forward and the backward hidden state to form the final representation:
In our model, we employ two Bi-LSTM separately to get the sentence contextual hidden output
Note that, the Bi-LSTM for each different aspect shares the parameters.

Position encoding
Based on the intuition that the polarity of a given aspect is easier to be influenced by the context words with closer distance to the aspect, we introduce position encoding to simulate this normal rules in natural language. Formally, given an aspect W a i that is one of the K aspects, where i ? [1, K] is the index of aspects, the relative distance d a it between the t-th word and the i-th aspect is defined as follows:
where dis is the distance between a context word and the aspect (here we treat an aspect as a single unit, and d = 0 means that the context word is also the aspect word), sis a pre-specified constant, and N is the length of the context. Finally, we can obtain the position-aware representation with position information:

Bidirectional attention mechanism
In order to capture the interactive information between the context and the aspect, we employ a bidirectional attention mechanism in our model. This mechanism consists of two modules: context to aspect attention module and aspect to context attention module. Firstly, the former module is used to get new representations of aspects based on the context. Secondly, based on the new representations, the later module is employed to obtain the aspect-specific context representations which will be fed into the downstream GCN.

Context to aspect attention
Context to aspect attention learns to assign attention weights to the aspect words according to a query vector, where the query vector is h c ? R 2d hid ?1 which is obtained by average pooling operation over the context hidden output H c . For each hidden word vector ha it ? R 2d hid ?1 in one aspect, the attention weight ? a it is computed as follows:
where W ca ? R 2d hid ?2d hid is the attention weight matrix. After computing the word attention weights, we can get the weighted combination of the aspect hidden representation as a new aspect representation:
3.4.2. Aspect to context attention Aspect to context attention learns to capture the aspectspecific context representation, which is similar to context to aspect attention. Specifically, the attention scores is calculated by the new aspect representation ma i and the position-aware representation pa it . The process can be formulated as follows:
where Wac ? R 2d hid ?2d hid is the attention weight matrix. By now, we get the aspect-specific representations X = [x 1 , x 2 , . . . , x K ] between each aspect and its context words, where K is the number of aspects in the context.

Sentiment graph
We construct a graph, named sentiment graph, to capture the sentiment dependencies between multi-aspects in one sentence, where each node is regarded as an aspect and each edge is treated as the sentiment dependency relation. As shown in, we define two kinds of undirected sentiment graphs:
? adjacent-relation graph: An aspect is only connected to its nearby aspects.
? global-relation graph: An aspect is connected to all other aspects.
If two nodes are connected by an edge, it means that the two nodes are neighboring to each other. Formally, given anode v, we use N(v) to denote all neighbors of v. u ? N(v) means that u and v are connected with an edge.

Sentiment graph based GCN
GCN encodes relevant information about its neighborhood as a new representation vector, where each node in the graph indicates a representation of aspect. In addition, as Kipf et al. do, we assume all nodes contain self-loops. Then, the new node representation is computed as follows:
where W cross , W self ? Rd m ?d n , b cross , b self ? Rd m ?1 , x u is the uth aspect-specific representation (see Eq.), and ReLU is the rectifier linear unit activation function. In this work, we used m = d n = 2h hid . By stacking multiple GCN layers, the final hidden representation of each node can receive messages from a further neighborhood. Each GCN layer takes the node representations from previous layer as inputs and outputs new node representations:
where l denotes the layer number and 1 ? l ? L ? 1.

Output layer
The final output of each GCN node x Li is treated as a classifier of the i-th aspect. At last, we use a fully-connected layer to map x Li into the aspect space of C classes:
where W z ? R C?2d hid is the weight matrix, and b z ? R 2d hid ?C is the bias. The predicted probability of the i-th aspect with sentiment polarity j ? [1, C] is computed by:

Model training
Our model is trained by minimizing the cross entropy with L2-regularization term. For a given sentence, the loss function is defined as:
where y i j is a one-hot labels of the i-th aspect for the j-th class, ? is the coefficient for L2-regularization, ? is the parameters that need to be regularized. Furthermore, we adopt the dropout strategy during training step to avoid over-fitting.

Experiments

Data sets and experimental settings
To demonstrate the effectiveness of our proposed method, as most previous works, we conduct experiments on two datasets from SemEval 2014 Task4 2, which contains the reviews in laptop and restaurant. The details of the SemEval 2014 datasets are shown in. Each dataset consists of train and test set. Each review (one sentence) contains one or more aspects and their corresponding sentiment polarities, i.e., positive, neutral and negative. To be specific, the number in table means the number of aspects in each sentiment category. To demonstrate the necessity of considering the sentiment dependencies between the aspects, we further calculate the number of aspects in each sentence, which is presented in. From the histogram in, we can see that each sentence contains one to thirteen aspects. The number of aspects in most reviews is 1 to 4. The pie chart shows the proportion of only one aspect and more than one aspect in one sentence. It can be seen that more than half of the aspects do not appear alone in a review. According to these statistics, we can conclude that it is common to have multi-aspects within one sentence. Our model mainly aims to model the sentiment dependencies between different aspects in one sentence. In our implementation, we respectively use the GloVe 3 word vector and the pre-trained language model word representation BERT 4 to initialize the word embeddings. The dimension of each word vector is 300 for GloVe and 768 for BERT. The number of LSTM hidden units is set to 300, and the output dimension of GCN layer is set to 600. The weight matrix of last fully connect layer is randomly initialized by a normal distribution N(0, 1). Besides the last fully connect layer, all the weight matrices are randomly initialized by a uniform distribution U(?0.01, 0.01). In addition, we add L2-regularization to the last fully connect layer with a weight of 0.01. During training, we set dropout to 0.5, the batch size is set to 32 and the optimizer is Adam Optimizer with a learning rate of 0.001. We implement our proposed model using Tensorflow 5 . To evaluate performance of the model, we employ Accuracy and Macro-F1 metrics. The Macro-F1 metric is more appropriate when the data set is not balanced.

Comparative methods
To comprehensively evaluate the performance of proposed SDGAN, we compare our model with the following models.
? TD-LSTM constructs aspect-specific representation by the left context with aspect and the right context with aspect, then employs two LSTMs to model them respectively. The last hidden states of the two LSTMs are finally concatenated for predicting the sentiment polarity of the aspect.
? ATAE-LSTM first attaches the aspect embedding to each word embedding to capture aspect-dependent information, and then employs attention mechanism to get the sentence representation for final classification.
? MemNet uses a deep memory network on the context word embeddings for sentence representation to capture the relevance between each context word and the aspect. Finally, the output of the last attention layer is used to infer the polarity of the aspect.
? IAN generates the representations for aspect terms and contexts with two attention-based LSTM network separately. Then the context representation and the aspect representation are concatenated for predicting the sentiment polarity of the aspect.
? RAM [10] employs a gated recurrent unit network to model a multiple attention mechanism, and captures the relevance between each context word and the aspect. Then the output of the gated recurrent unit network is obtained for final classification.
? PBAN appends the position embedding into each word embedding. It then introduces a position-aware bidirectional attention network (PBAN) based on Bi-GRU to enhance the mutual relation between the aspect term and its corresponding sentence.
? TSN is a two-stage framework for aspect-level sentiment analysis. The first stage, it uses a position attention to capture the aspect-dependent representation. The second stage, it introduces penalization term to enhance the difference of the attention weights towards different aspects in one sentence.
? AEN mainly consists of an embedding layer, an attentional encoder layer, an aspect-specific attention layer, and an output layer. In order to eschew the recurrence, it employs attention-based encoders for the modeling between the aspect and its corresponding context.
? AEN-BERT is AEN with BERT embedding. shows the experimental results of competing models. In order to remove the influence with different word representations and directly compare the performance of different models, we compare GloVe-based models and BERT-based models separately. Our proposed model achieves the best performance on both GloVe-based models and BERT-based models, which demonstrates the effectiveness of our proposed model. In particularly, SDGCN-BERT obtains new state-of-the-art results.

Overall results
Among all the GloVe-based methods, the TD-LSTM approach performs worst because it takes the aspect information into consideration in a very coarse way. ATAE-LSTM, Men-Net and IAN are basic attention-based models. After taking the importance of the aspect into account with attention mechanism, they achieve a stable improvement comparing to the TD-LSTM. RAM achieves a better performance than other basic attention-based models, because it combines multiple attentions with a recurrent neural network to capture aspect-specific representations. PBAN achieves a similar performance as RAM by employing a position embedding. To be specific, PBAN is better than RAM on Restaurant dataset, but worse than RAN on Laptop dataset. Compared with RAM and PBAN, the over all performance of TSN is not perform well on both Restaurant dataset and Laptop dataset, which might because the framework of TSN is too simple to model the representations of context and aspect effectively. AEN is slightly better than TSN, but still worse than RAM and PBAN. It indicates that the discard of the recurrent neural networks can reduce the size of model while lead to the loss of performance.
Comparing the results of SDGCN-A w/o position and SDGCN-G w/o position, SDGCN-A and SDGCN-G, respectively, we observe that the GCN built with global-relation is slightly higher than built with adjacent-relation in both accuracy and Macro-F1 measure. This may indicate that the adjacent relationship is not sufficient to capture the interactive information among multiple aspects due to the neglect of the long-distance relation of aspects. Moreover, the two models (SDGCN-A and SDGCN-G) with position information gain a significant improvement compared to the two models without position information. It shows that the position encoding module is crucial for good performance.
Benefits from the power of pre-trained BERT, BERT-based models have shown huge superiority over GloVe-based models. Furthermore, compared with AEN-BERT, on the Restaurant dataset, SDGCN-BERT achieves absolute increases of 1.09% and 1.86% in accuracy and Macro-F1 measure respectively, and gains absolute increases of 1.42% and 2.03% in accuracy and Macro-F1 measure respectively on the Laptop dataset. The increments prove the effectiveness of our proposed SDGCN.

The effect of GCN module
In this section, we design a series of models to further verify the effectiveness of GCN module. These models are:
? BiAtt+GCN is just another name of our proposed SDGCN model.
? BiAtt is based on BiAtt -GCN, where we remove the GCN module. Therefore, it predicts the sentiments of different aspects in one sentence independently.
? Att+GCN is a simplified version of BiAtt+GCN. The only difference between Att+GCN and BiAtt+GCN is that Att+GCN does not have context to aspect attention.  ? Att is the model of Att+GCN removing the GCN module. shows the performances of all these models. It is clear to see that, comparing with GCN-reduced models, the two models with GCN achieve higher performance, respectively. The results verify that the modeling of the sentiment dependencies between different aspects with GCN plays a great role in predicting the sentiment polarities of aspects.

Impact of GCN layer number
The number of GCN layers is one very important setting parameter that affects the performance of our model. In order to investigate the impact of the GCN layer number, we conduct experiment with the different number of GCN layers from 1 to 8. The performance results are shown in. As can be seen from the results, in general, when the number of GCN layers is 2, the model works best. When the number of GCN layers is bigger than 2, the performance drops with the increase of the number of GCN layers on both the datasets. The possible reason for the phenomenon of the performance drop maybe that with the increase of the model parameters, the model becomes more difficult to train and over-fitting.

Case study
In order to have an intuitive understanding of the difference between with-GCN model (our proposed model) and without-GCN model, we use two examples with multiple aspects from laptop dataset as a case study. We draw heat maps to visualize the attention weights on the words computed by the two models, as shown in. The deeper the color, the more attention the model pays to it.
As we can see from the first example, i.e., "i love the keyboard and the screen.", with two aspects "keyboard" and "screen", without-GCN model mainly focuses on the word "love" to predict the sentiment polarities of the two aspects. While for with-GCN model, besides the word "love", it also pays attention to the conjunction "and". This phenomenon indicates that with-GCN model captures the sentiment dependencies of the two aspects through the word "and", and then predicts the sentiments of "keyboard" and "screen" simultaneously.
The second example is "air has higher resolution but the fonts are small." with two aspects "resolution" and "fonts". It is obvious that the sentiments of the two aspects "resolution" and "fonts" are opposite connected by the conjunction "but". Without-GCN model predicts the polarity of aspect "resolution" by the word "higher and the polarity of aspect "fonts by the word "small" in isolation, which ignores the relation between the two aspects. In the contrary, with-GCN model enforces the model to pay attention on the word "but" when predicting the sentiment polarity for aspect "fonts".
From these examples, we can observe that our proposed model (with-GCN model) not only focuses the corresponding words which are useful for predicting the sentiment of each aspect, but also considers the textual information which is helpful for judging the relation between different aspects. By using attention mechanism to focus on the textual words describing the interdependence between different aspects, the downstream GCN module can effectively further represent the sentiment dependencies between different aspects in one sentence. With more useful information, our proposed model can predict aspect-level sentiment category more accurately.

Conclusion
In this paper, we design a novel GCN based model (SDGCN) for aspect-level sentiment classification. The key idea of our model is to employ GCN to model the sentiment dependencies between different aspects in one sentence. Specifically, SDGCN first adopts bidirectional attention mechanism with position encoding to obtain aspect-specific representations, then captures the sentiment dependencies via message passing between aspects. Thus, SDGCN benefits from such dependencies which are always ignored in previous studies. Experiments on SemEval 2014 verify the effectiveness of the proposed mode, and SDGCN-BERT obtains new state-of-the-art results. The case study shows that SDGCN cannot only pay attention to those words which are important for predicting the sentiment polarities of aspects, but also pay attention to the words which are helpful for judging the sentiment dependencies between different aspects.
In our future work, we will explore how to build a more precise sentiment graph structure between aspects. The two kinds of undirected sentiment graphs in this work are coarse. We conjecture that making use of textual information to define a graph may create a better graph structure.