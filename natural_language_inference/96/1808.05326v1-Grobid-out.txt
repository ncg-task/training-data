title
Swag: A Large-Scale Adversarial Dataset for Grounded Commonsense Inference
abstract
Given a partial description like "she opened the hood of the car," humans can reason about the situation and anticipate what might come next ("then, she examined the engine"). In this paper, we introduce the task of grounded commonsense inference, unifying natural language inference and commonsense reasoning.
We present Swag, a new dataset with 113k multiple choice questions about a rich spectrum of grounded situations. To address the recurring challenges of the annotation artifacts and human biases found in many existing datasets, we propose Adversarial Filtering (AF), a novel procedure that constructs a de-biased dataset by iteratively training an ensemble of stylistic classifiers, and using them to filter the data. To account for the aggressive adversarial filtering, we use state-of-theart language models to massively oversample a diverse set of potential counterfactuals. Empirical results demonstrate that while humans can solve the resulting inference problems with high accuracy (88%), various competitive models struggle on our task. We provide comprehensive analysis that indicates significant opportunities for future research.
Introduction
When we read a story, we bring to it a large body of implicit knowledge about the physical world. For instance, given the context "on stage, a woman takes a seat at the piano," shown in, we can easily infer what the situation might look like: a woman is giving a piano performance, with a crowd watching her. We can furthermore infer her likely next action: she will most likely set her fingers on the piano keys and start playing.
This type of natural language inference requires commonsense reasoning, substantially broadening the scope of prior work that focused primarily on On stage, a woman takes a seat at the piano. She a) sits on a bench as her sister plays with the doll. b) smiles with someone as the music plays. c) is in the crowd, watching the dancers. d) nervously sets her fingers on the keys.
A girl is going across a set of monkey bars. She a) jumps up across the monkey bars. b) struggles onto the monkey bars to grab her head. c) gets to the end and stands on a wooden plank. d) jumps up and does aback flip.
The woman is now blow drying the dog. The dog a) is placed in the kennel next to a woman's feet. b) washes her face with the shampoo. c) walks into frame and walks towards the dog. d) tried to cut her face, so she is trying to do something very close to her face. linguistic entailment. Whereas the dominant entailment paradigm asks if two natural language sentences (the 'premise' and the 'hypothesis') describe the same set of possible worlds, here we focus on whether a (multiple-choice) ending describes a possible (future) world that can be anticipated from the situation described in the premise, even when it is not strictly entailed. Making such inference necessitates a rich understanding about everyday physical situations, including object affordances and frame semantics. A first step toward grounded commonsense inference with today's deep learning machinery is to create a large-scale dataset. However, recent work has shown that human-written datasets are susceptible to annotation artifacts: unintended stylistic patterns that give out clues for the gold labels. As a result, models trained on such datasets with hu-man biases run the risk of over-estimating the actual performance on the underlying task, and are vulnerable to adversarial or out-of-domain examples.
In this paper, we introduce Adversarial Filtering (AF), a new method to automatically detect and reduce stylistic artifacts. We use this method to construct Swag: an adversarial dataset with 113k multiple-choice questions. We start with pairs of temporally adjacent video captions, each with a context and a follow-up event that we know is physically possible. We then use a state-of-theart language model fine-tuned on this data to massively oversample a diverse set of possible negative sentence endings (or counterfactuals). Next, we filter these candidate endings aggressively and adversarially using a committee of trained models to obtain a population of de-biased endings with similar stylistic features to the real ones. Finally, these filtered counterfactuals are validated by crowd workers to further ensure data quality.
Extensive empirical results demonstrate unique contributions of our dataset, complementing existing datasets for natural langauge inference (NLI) and commonsense reasoning. First, our dataset poses a new challenge of grounded commonsense inference that is easy for humans (88%) while hard for current state-ofthe-art NLI models (<60%). Second, our proposed adversarial filtering methodology allows for cost-effective construction of a large-scale dataset while substantially reducing known annotation artifacts. The generality of adversarial filtering allows it to be applied to build future datasets, ensuring that they serve as reliable benchmarks.
2 Swag: Our new dataset
We introduce a new dataset for studying physically grounded commonsense inference, called Swag. 1 Our task is to predict which event is most likely to occur next in a video. More formally, a model is given a context c = (s, n): a complete sentence sand a noun phrase n that begins a second sentence, as well as a list of possible verb phrase sentence endings V = {v 1 , . . . , v 4 }. See for an example triple (s, n, vi ). The model must then select the most appropriate verb phrase v? ? V . 1 Short for Situations With Adversarial Generations.
is put on top of the vegetables. is putting vegetable fruits. is using a red sponge to add eggs and parsley.
? is placed in the oven.

The mixer creams the butter. Sugar?

Adversarially select generations
Annotators filter endings to ensure agreement

Oversample endings from context+NP
Sugar is added to the mixing bowl. The mixer creams the butter.

LSMDC

NP VP context
Using video captions from t < la t ex it sh a 1 _ b a s e 6 4 = " 0 v + h F BO f v F X t 3 4 ta 2 ND U v y 3 d j x g = " > AA AC 3 X i c d VJ L b 9 N A E N 6 Y V z G v F o 5 c LC I k x C G y ER J w q 6 C H X h Ct R G i l J Cr j z c R Z Z R / W 7 L ht a u X a C 4 g Ti J / E b + D f s E l 9 w Am Mt Np v v 3 n Pb F 5 q 5 Tl N f 3 e i a 9 d v 3 L y 1 d Tu + c / f e / Q f b O w 8 / e V e Rx L 5 0 2 t F x D h 6 1 st h n x R q PS 0 I w u ca j f P Z u q T 8 6 Rf L K 2 Y 8 8 L 3 F k o L B q oi R w o A 7 5 Z Lu b 9 t K VJ J s g a 0 B X NH J w st P 5 NR w 7 W R m 0 L D V 4 P 8 j S k kc 1 EC up c R E P K 4 8 l y Bk U O A j Q g k E / q l e V L p K n g R kn E 0 f h W E 5 W 7 N 8 e NR j v 5 y Y Pl g Z 4 6 t d 1 S / J f u k HF k 9 e j W t my Y r Ty K t Gk 0 gm 7 Z N l 2 M la E k v U 8 A J C k Q q 2 J n AK B 5 DC c V h Z Ta V bk z l q d 1 B K 0 b D M F Q Tl V 8 r z NE m q v Lt p j + E 9 I ch y WY I s 2 m 5 v 2 u y K 9 F s w Rb q b In Z s x 5 D 6 we x j 2 Q v g + z O h Di Q T s 6 H k 9 BC o Mn C / q 5 o 7 j OK w + W 1 / 0 J u i / 6 L 3 p Z Y c v u 7 t v m z + w J R 6 L J + K Z y M Q r s S v 2 x Y Ho C y l Q f B Hf x Y / o c 3 Q Z f Y 2 + X Z l G n c b n kW h J 9 PM P 9 U X t 7 A = = < / la t ex it > < la t ex it sh a 1 _ b a s e 6 4 = " 0 v + h F BO f v F X t 3 4 ta 2 ND U v y 3 d j x g = " > AA AC 3 X i c d VJ L b 9 N A E N 6 Y V z G v F o 5 c LC I k x C G y ER J w q 6 C H X h Ct R G i l J Cr j z c R Z Z R / W 7 L ht a u X a C 4 g Ti J / E b + D f s E l 9 w Am Mt Np v v 3 n Pb F 5 q 5 Tl N f 3 e i a 9 d v 3 L y 1 d Tu + c / f e / Q f b O w 8 / e V e Rx L 5 0 2 t F x D h 6 1 st h n x R q PS 0 I w u ca j f P Z u q T 8 6 Rf L K 2 Y 8 8 L 3 F k o L B q oi R w o A 7 5 Z Lu b 9 t K VJ J s g a 0 B X NH J w st P 5 NR w 7 W R m 0 L D V 4 P 8 j S k kc 1 EC up c R E P K 4 8 l y Bk U O A j Q g k E / q l e V L p K n g R kn E 0 f h W E 5 W 7 N 8 e NR j v 5 y Y Pl g Z 4 6 t d 1 S / J f u k HF k 9 e j W t my Y r Ty K t Gk 0 gm 7 Z N l 2 M la E k v U 8 A J C k Q q 2 J n AK B 5 DC c V h Z Ta V bk z l q d 1 B K 0 b D M F Q Tl V 8 r z NE m q v Lt p j + E 9 I ch y WY I s 2 m 5 v 2 u y K 9 F s w Rb q b In Z s x 5 D 6 we x j 2 Q v g + z O h Di Q T s 6 H k 9 BC o Mn C / q 5 o 7 j OK w + W 1 / 0 J u i / 6 L 3 p Z Y c v u 7 t v m z + w J R 6 L J + K Z y M Q r s S v 2 x Y Ho C y l Q f B Hf x Y / o c 3 Q Z f Y 2 + X Z l G n c b n kW h J 9 PM P 9 U X t 7 A = = < / la t ex it > < la t ex it sh a 1 _ b a s e 6 4 = " 0 v + h F BO f v F X t 3 4 ta 2 ND U v y 3 d j x g = " > AA AC 3 X i c d VJ L b 9 N A E N 6 Y V z G v F o 5 c LC I k x C G y ER J w q 6 C H X h Ct R G i l J Cr j z c R Z Z R / W 7 L ht a u X a C 4 g Ti J / E b + D f s E l 9 w Am Mt Np v v 3 n Pb F 5 q 5 Tl N f 3 e i a 9 d v 3 L y 1 d Tu + c / f e / Q f b O w 8 / e V e Rx L 5 0 2 t F x D h 6 1 st h n x R q PS 0 I w u ca j f P Z u q T 8 6 Rf L K 2 Y 8 8 L 3 F k o L B q oi R w o A 7 5 Z Lu b 9 t K VJ J s g a 0 B X NH J w st P 5 NR w 7 W R m 0 L D V 4 P 8 j S k kc 1 EC up c R E P K 4 8 l y Bk U O A j Q g k E / q l e V L p K n g R kn E 0 f h W E 5 W 7 N 8 e NR j v 5 y Y Pl g Z 4 6 t d 1 S / J f u k HF k 9 e j W t my Y r Ty K t Gk 0 gm 7 Z N l 2 M la E k v U 8 A J C k Q q 2 J n AK B 5 DC c V h Z Ta V bk z l q d 1 B K 0 b D M F Q Tl V 8 r z NE m q v Lt p j + E 9 I ch y WY I s 2 m 5 v 2 u y K 9 F s w Rb q b In Z s x 5 D 6 we x j 2 Q v g + z O h Di Q T s 6 H k 9 BC o Mn C / q 5 o 7 j OK w + W 1 / 0 J u i / 6 L 3 p Z Y c v u 7 t v m z + w J R 6 L J + K Z y M Q r s S v 2 x Y Ho C y l Q f B Hf x Y / o c 3 Q Z f Y 2 + X Z l G n c b n kW h J 9 PM P 9 U X t 7 A = = < / la t ex it > < la t ex it sh a 1 _ b a s e 6 4 = " 0 v + h F BO f v F X t 3 4 ta 2 ND U v y 3 d j x g = " > AA AC 3 X i c d VJ L b 9 N A E N 6 Y V z G v F o 5 c LC I k x C G y ER J w q 6 C H X h Ct R G i l J Cr j z c R Z Z R / W 7 L ht a u X a C 4 g Ti J / E b + D f s E l 9 w Am Mt Np v v 3 n Pb F 5 q 5 Tl N f 3 e i a 9 d v 3 L y 1 d Tu + c / f e / Q f b O w 8 / e V e Rx L 5 0 2 t F x D h 6 1 st h n x R q PS 0 I w u ca j f P Z u q T 8 6 Rf L K 2 Y 8 8 L 3 F k o L B q oi R w o A 7 5 Z Lu b 9 t K VJ J s g a 0 B X NH J w st P 5 NR w 7 W R m 0 L D V 4 P 8 j S k kc 1 EC up c R E P K 4 8 l y Bk U O A j Q g k E / q l e V L p K n g R kn E 0 f h W E 5 W 7 N 8 e NR j v 5 y Y Pl g Z 4 6 t d 1 S / J f u k HF k 9 e j W t my Y r Ty K t Gk 0 gm 7 Z N l 2 M la E k v U 8 A J C k Q q 2 J n AK B 5 DC c V h Z Ta V bk z l q d 1 B K 0 b D M F Q Tl V 8 r z NE m q v Lt p j + E 9 I ch y WY I s 2 m 5 v 2 u y K 9 F s w Rb q b In Z s x 5 D 6 we x j 2 Q v g + z O h Di Q T s 6 H k 9 BC o Mn C / q 5 o 7 j OK w + W 1 / 0 J u i / 6 L 3 p Z Y c v u 7 t v m z + w J R 6 L J + K Z y M Q r s S v 2 x Y Ho C y l Q f B Hf x Y / o c 3 Q Z f Y 2 + X Z l G n c b n kW h J 9 PM P 9 U X t 7 A = = < / la t ex it > t + 1 < la t ex it sh a 1 _ b a s e 6 4 = " F x Z l r q R Sp Q 2 + c q d l v / 9 i y s H N v s c = " > AA AC 3 3 i c d VJ L bx M x E Ha 2 PM r ya s u Ry 4 o I C Y EU 7 S I k 6 K 2 C H r g g ii C 0 U h JV Y 2 e y s W K v V + P Z 0 r D K v R c Q J x C / i N / Av 8 F J 9 8 Am M J L l z 9 + 8 Z y x L oz 2 n 6 e 9 O t H X l 6 r X r 2 z f i m 7 d u 3 7 m 7 s 7 v 3 0 bu K F Pa V M 4 5 OJ Hg 0 u s A + a z Z 4 U h KC l Q a P 5 e z V U n 9 8 h u S 1 K z 7 w v MS Rh b z Q E 6 2 AA / W en 2 Sn O 9 2 0 l 6 4 k 2 Q R Z A 7 q i k a PT 3 c

K s G A t 1 m W h S m Y R d s m w 8 G W t C x W Y e A C j S o d Z E T Y F A c R h P K 4 u t D G t y n 1 q d 1 A q M a j M 5 Q T n V r z N E h q v P 7 f H 8 J + Q 5 D i s o c j b r L T t d 0 V m L Z g j 3 E w h n Z s x S B / Y Q w x 7 I X w T Z v S 2 R A J 2 9 L g e A u U W z h d 1 c 8 d x H F a f r S 9 E
N v l 6 Z R p / G 5 J 1 o S / f w DJ ab u X A = = < / la t ex it > < la t ex it sh a 1 _ b a s e 6 4 = " F x Z l r q R Sp Q 2 + c q d l v / 9 i y s H N v s c = " > AA AC 3 3 i c d VJ L bx M x E Ha 2 PM r ya s u Ry 4 o I C Y EU 7 S I k 6 K 2 C H r g g ii C 0 U h JV Y 2 e y s W K v V + P Z 0 r D K v R c Q J x C / i N / Av 8 F J 9 8 Am M J L l z 9 + 8 Z y x L oz 2 n 6 e 9 O t H X l 6 r X r 2 z f i m 7 d u 3 7 m 7 s 7 v 3 0 bu K F Pa V M 4 5 OJ Hg 0 u s A + a z Z 4 U h KC l Q a P 5 e z V U n 9 8 h u S 1 K z 7 w v MS Rh b z Q E 6 2 AA / W en 2 Sn O 9 2 0 l 6 4 k 2 Q R Z A 7 q i k a PT 3 c 6 v 4 d i p y m L B yo D 3 g y Overview Our corpus consists of 113k multiple choice questions (73k training, 20k validation, 20k test) and is derived from pairs of consecutive video captions from ActivityNet Captions and the Large Scale Movie Description Challenge (LSMDC;. The two datasets are slightly different in nature and allow us to achieve broader coverage: ActivityNet contains 20k YouTube clips containing one of 203 activity types (such as doing gymnastics or playing guitar); LSMDC consists of 128k movie captions (audio descriptions and scripts). For each pair of captions, we use a constituency parser to split the second sentence into noun and verb phrases (). 2 Each question has a human-verified gold ending and 3 distractors.

A solution to annotation artifacts
In this section, we outline the construction of Swag. We seek dataset diversity while minimizing annotation artifacts, conditional stylistic patterns such as length and word-preference biases. For many NLI datasets, these biases have been shown to allow shallow models (e.g. bag-of-words) obtain artificially high performance.
To avoid introducing easily "gamed" patterns, we present Adversarial Filtering (AF), a generallyapplicable treatment involving the iterative refinement of a set of assignments to increase the entropy under a chosen model family. We then discuss how we generate counterfactual endings, and Algorithm 1 Adversarial filtering (AF) of negative samples. During our experiments, we set N easy = 2 for refining a population of N ? = 1023 negative examples to k = 9, and used a 80%/20% train/test split.
while convergence not reached do
? Split the dataset D randomly up into training and testing portions D tr and D te .
. end for end while finally, the models used for filtering.

Formal definition
In this section, we formalize what it means for a dataset to be adversarial. Intuitively, we say that an adversarial dataset for a model f is one on which f will not generalize, even if evaluated on test data from the same distribution. More formally, let our input space be X and the label space be Y. Our trainable classifier f , taking parameters ? is defined as f ? : X ? R |Y| . Let our dataset of size N be defined as D = {(x i , y i )} 1?i?N , and let the loss function over the dataset be L(f ? , D). We say that a dataset is adversarial with respect to f if we expect high empirical error I over all leave-one-out train/test splits:
where
with regularization terms omitted for simplicity.

Adversarial filtering (AF) algorithm
In this section, we outline an approach for generating an adversarial dataset D, effectively maximizing empirical error I with respect to a family of trainable classifiers f . Without loss of generality, we consider the situation where we have N contexts, each associated with a single positive example (x + i , 1) ? X ? Y, and a large population of context-specific negative examples
For instance, the negative examples could be incorrect relations in knowledge-base completion, or all words in a dictionary for a single-word cloze task.
Our goal will be to filter the population of negative examples for each instance i to a size of k N ? . This will be captured by returning a set of assignments A, where for each instance the assignment will be a k-subset
The filtered dataset will then be:
Unfortunately, optimizing I(D AF , f ) is difficult as A is global and non-differentiable. To address this, we present Algorithm 1. On each iteration, we split the data into dummy 'train' and 'test' splits. We train a model f on the training portion and obtain parameters ?, then use the remaining test portion to reassign the indices of A. For each context, we replace some number of 'easy' negatives in A that f ? classifies correctly with 'adversarial' negatives outside of A that f ? misclassifies. This process can bethought of as increasing the over all entropy of the dataset: given a strong model f ? that is compatible with a random subset of the data, we aim to ensure it cannot generalize to the held-out set. We repeat this for several iterations to reduce the generalization ability of the model family f over arbitrary train/test splits.

Generating candidate endings
To generate counterfactuals for Swag, we use an LSTM) language model (LM), conditioned on contexts from video captions. We first pretrain on BookCorpus , then finetune on the video caption datasets. The architecture uses standard best practices and was validated on held-out perplexity of the video caption datasets; details are in the appendix. We use the LM to sample N ? =1023 unique endings for a partial caption. Importantly, we greedily sample the endings, since beam search decoding biases the generated endings to be of lower perplexity (and thus easily distinguishable from found endings). We find this process gives good counterfactuals: the generated endings tend to use topical words, but often make little sense physically, making them perfect for our task. Further, the generated endings are marked as "gibberish" by humans only 9.1% of the time (Sec 3.5); in that case the ending is filtered out.

Stylistic models for adversarial filtering
In creating Swag, we designed the model family f to pickup on low-level stylistic features that we posit should not be predictive of whether an event happens next in a video. These stylistic features are an obvious case of annotation artifacts. 4 Our final classifier is an ensemble of four stylistic models: 1. A multilayer perceptron (MLP) given LM perplexity features and context/ending lengths.

2.
A bag-of-words model that averages the word embeddings of the second sentence as features.
3. A one-layer CNN, with filter sizes ranging from 2-5, over the second sentence. 4. A bidirectional LSTM over the 100 most common words in the second sentence; uncommon words are replaced by their POS tags. We ensemble the models by concatenating their final representations and passing it through an MLP. On every adversarial iteration, the ensemble is trained jointly to minimize cross-entropy. The accuracies of these models (at each iteration, evaluated on a 20% split of the test dataset before indices of A get remapped) are shown in. Performance decreases from 60% to close to random chance; moreover, confusing the perplexity-based MLP is not sufficient to lower performance of the ensemble. Only once the other stylistic models are added does the ensemble accuracy drop substantially, suggesting that our approach is effective at reducing stylistic artifacts. A broad definition of annotation artifacts might include aspects besides lexical/stylistic features: for instance, certain events are less likely semantically regardless of the context (e.g. riding a horse using a hose). For this work, we erred more conservatively and only filtered based on style.
Imagine that you are watching a video clip. The clip has a caption, but it is missing the final phrase. Please choose the best 2 caption endings, and classify each as:
? likely, if it completes the caption in a reasonable way;
? unlikely, if it sounds ridiculous or impossible;
? gibberish if it has such serious errors that it doesn't feel like a valid English sentence.
Example: Someone is shown sitting on a fence and talking to the camera while pointing out horses. Someone

Human verification
The final data-collection step is to have humans verify the data. Workers on Amazon Mechanical Turk were given the caption context, as well as six candidate endings: one found ending and five adversarially-sampled endings. The task was twofold: Turkers ranked the endings independently as likely, unlikely, or gibberish, and selected the best and second best endings.
We obtained the correct answers to each context in two ways. If a Turker ranks the found ending as either best or second best (73.7% of the time), we add the found ending as a gold example, with negatives from the generations not labelled best or gibberish. Further, if a Turker ranks a generated ending as best, and the found ending as second best, then we have reason to believe that the generation is good. This lets us add an additional training example, consisting of the generated best ending as the gold, and remaining generations as negatives. 5 Examples with ?3 nongibberish endings were filtered out. We found after 1000 examples that the annotators tended to have high agreement, also generally choosing found endings over generations (see). Thus, we collected the remaining 112k examples with one annotator each, periodically verifying that annotators preferred the found endings.

Experiments
In this section, we evaluate the performance of various NLI models on Swag. Recall that models: Annotators tend to label the found ending as likely and within the top 2 (column 2), in other cases the example is filtered out. Both label groups have high inter-annotator agreement, in terms of Krippendorff's ? and pairwise percent agreement.
for our dataset take the following form: given a sentence and a noun phrase as context c = (s, n), as well as a list of possible verb phrase endings V = {v 1 , . . . , v 4 }, a model f ? must select a verb i that hopefully matches i gold :
To study the amount of bias in our dataset, we also consider models that take as input just the ending verb phrase vi , or the entire second sentence (n, vi ). For our learned models, we train f by minimizing multi-class cross-entropy. We consider three different types of word representations: 300d GloVe vectors from Common Crawl, 300d Numberbatch vectors retrofitted using ConceptNet relations, and 1024d ELMo contextual representations that show improvement on a variety of NLP tasks, including standard NLI . We follow the final dataset split (see Section 2) using two training approaches: training on the found data, and the found and highly-ranked generated data. See the appendix for more details.

Unary models
The following models predict labels from a single span of text as input; this could be the ending only, the second sentence only, or the full passage. a. fastText: This library models a single span of text as a bag of n-grams, and tries to predict the probability of an ending being corrector incorrect independently. 7 b. Pretrained sentence encoders We consider two types of pretrained RNN sentence encoders, SkipThoughts  and InferSent 7 The fastText model is trained using binary cross-entropy; at test time we extract the prediction by selecting the ending with the highest positive likelihood under the model.. SkipThoughts was trained by predicting adjacent sentences in book data, whereas InferSent was trained on supervised NLI data. For each second sentence (or just the ending), we feed the encoding into an MLP. c. LSTM sentence encoder Given an arbitrary span of text, we run a two-layer BiLSTM over it. The final hidden states are then max-pooled to obtain a fixed-size representation, which is then used to predict the potential for that ending.

Binary models
The following models predict labels from two spans of text. We consider two possibilties for these models: using just the second sentence, where the two text spans are n, vi , or using the context and the second sentence, in which case the spans are s, (n, vi ). The latter case includes many models developed for the NLI task. d. Dual Bag-of-Words For this baseline, we treat each sentence as a bag-of-embeddings (c, vi ). We model the probability of picking an ending i using a bilinear model: softmax i (cWv Ti ). 8 e. Dual pretrained sentence encoders Here, we obtain representations from SkipThoughts or In-ferSent for each span, and compute their pairwise compatibility using either 1) a bilinear model or 2) an MLP from their concatenated representations. f. SNLI inference Here, we consider two models that do well on SNLI (Bowman et al., 2015): Decomposable Attention  and ESIM. We use pretrained versions of these models (with ELMo embeddings) on SNLI to obtain 3-way entailment, neutral, and contradiction probabilities for each example. We then train a log-linear model using these 3-way probabilities as features. g. SNLI models (retrained) Here, we train ESIM and Decomposable Attention on our dataset: we simply change the output layer size to 1 (the potential of an ending vi ) with a softmax over i.

Other models
We also considered the following models: h. Length: Although length was used by the adversarial classifier, we want to verify that human validation didn't reintroduce a length bias. For this baseline, we always choose the shortest ending. i. ConceptNet As our task requires world knowledge, we tried a rule-based system on top of the: Performance of all models in accuracy (%). All models substantially underperform humans, although performance increases as more context is provided (left to right). We optionally train on found endings only, or found and human-validated generated endings (found+gen).
ConceptNet knowledge base.
For an ending sentence, we use the spaCy dependency parser to extract the head verb and its dependent object. The ending score is given by the number of ConceptNet causal relations 9 between synonyms of the verb and synonyms of the object. j. Human performance To benchmark human performance, five Mechanical Turk workers were asked to answer 100 dataset questions, as did an 'expert' annotator (the first author of this paper). Predictions were combined using a majority vote.

Results
We present our results in. The best model that only uses the ending is the LSTM sequence model with ELMo embeddings, which obtains 43.6%. This model, as with most models studied, greatly improves with more context: by 3.1% when given the initial noun phrase, and by an ad-ditional 4% when also given the first sentence. Further improvement is gained from models that compute pairwise representations of the inputs. While the simplest such model, Dual-BoW, obtains only 35.1% accuracy, combining In-ferSent sentence representations gives 40.5% accuracy (InferSent-Bilinear). The best results come from pairwise NLI models: when fully trained on Swag, ESIM+ELMo obtains 59.2% accuracy.
When comparing machine results to human results, we see there exists a lot of headroom. Though there likely is some noise in the task, our results suggest that humans (even untrained) converge to a consensus. Our in-house "expert" annotator is outperformed by an ensemble of 5 Turk workers (with 88% accuracy); thus, the effective upper bound on our dataset is likely even higher.

Analysis

Swag versus existing NLI datasets
The past few years have yielded great advances in NLI and representation learning, due to the availability of large datasets like SNLI and MultiNLI Our dataset shows a greater variety of dynamic verbs, such as "move", as well as temporal verbs such as "start" and "come." "Continue" is cutoff for SNLI (it has frequency 6 ? 10 ?5 ). Bottom: CDF for verbs in SNLI and Swag.
(. With the release of Swag, we hope to continue this trend, particularly as our dataset largely has the same input/output format as other NLI datasets. We observe three key differences between our dataset and others in this space: First, as noted in Section 1, Swag requires a unique type of temporal reasoning. A state-of-theart NLI model such as ESIM, when bottlenecked through the SNLI notion of entailment (SNLI-ESIM), only obtains 36.1% accuracy. 10 This implies that these datasets necessitate different (and complementary) forms of reasoning.
Second, our use of videos results in wide coverage of dynamic and temporal situations Compared with SNLI, with contexts from Flickr30K image captions, Swag has more active verbs like 'pull' and 'hit,' and fewer static verbs like 'sit' and 'wear'. Third, our dataset suffers from few lexical biases. Whereas fastText, a bag of n-gram model, obtains 67.0% accuracy on SNLI versus a 34.3% baseline, fastText obtains only 29.0% accuracy on Swag. 12

Error analysis
We sought to quantify how human judgments differ from the best studied model, ESIM+ELMo. We randomly sampled 100 validation questions The weights of SNLI-ESIM pickup primarily on entailment probability (0.59), as with neutral (0.46), while contradiction is negatively correlated (-.42).
11 Video data has other language differences; notably, character names in LSMDC were replaced by 'someone' The most predictive individual words on SWAG are infrequent in number: 'dotted' with P(+|dotted) = 77% with 10.3 counts, and P(?|similar) = 81% with 16.3 counts. (Counts from negative endings were discounted 3x, as there are 3 times as many negative endings as positive endings).

Reason
Explanation Freq.
Situational The good ending is better in context. 53.7% Plausibility The bad ending is implausible regardless of context.

14.4%

Novelty
The bad ending seems redundant; it is entailed by the context.

1.8%
Weirdness The bad ending is semantically or grammatically malformed, e.g. 'the man is getting out of the horse.'

18.1%
Ambiguous Both endings seem equally likely. 12.0% that ESIM+ELMo answered incorrectly, for each extracting both the gold ending and the model's preferred ending. We asked 5 Amazon Mechanical Turk workers to pick the better ending (of which they preferred the gold endings 94% of the time) and to select one (or more) multiple choice reasons explaining why the chosen answer was better. The options, and the frequencies, are outlined in. The most common reason for the turkers preferring the correct answer is situational (52.3% of the time), followed by weirdness (17.5%) and plausibility (14.4%). This suggests that ESIM+ELMo already does a good job at filtering out weird and implausible answers, with the main bottleneck being grounded physical understanding. The ambiguous percentage is also relatively low (12.0%), implying significant headroom.

Qualitative examples
Last, we show several qualitative examples in Table 5. Though models can do decently well by identifying complex alignment patterns between the two sentences (e.g. being "up a tree" implies that "tree" is the end phrase), the incorrect model predictions suggest this strategy is insuffi-  cient. For instance, answering "An old man rides a small bumper car" requires knowledge about bumper cars and how they differ from regular cars: bumper cars are tiny, don't drive on roads, and don't work in parking lots, eliminating the alternatives. However, this knowledge is difficult to extract from existing corpora: for instance, the Con-ceptNet entry for Bumper Car has only a single relation: bumper cars are a type of vehicle. Other questions require intuitive physical reasoning: e.g, for "he pours the raw egg batter into the pan," about what happens next in making an omelet.

Where to go next?
Our results suggest that Swag is a challenging testbed for NLI models. However, the adversarial models used to filter the dataset are purely stylistic and focus on the second sentence; thus, subtle artifacts still likely remain in our dataset. These patterns are ostensibly picked up by the NLI models (particularly when using ELMo features), but the large gap between machine and human performance suggests that more is required to solve the dataset. As models are developed for commonsense inference, and more broadly as the field of NLP advances, we note that AF can be used again to create a more adversarial version of Swag using better language models and AF models.

Related Work
Entailment NLI There has been along history of NLI benchmarks focusing on linguistic entailment. Recent NLI datasets in particular have supported learning broadly-applicable sentence representations; moreover, models trained on these datasets were used as components for performing better video captioning, summarization, and generation, confirming the importance of NLI research. The NLI task requires a variety of commonsense knowledge (LoBue and Yates, 2011), which our work complements. However, previous datasets for NLI have been challenged by unwanted annotation artifacts, or scale issues. Our work addresses these challenges by constructing a new NLI benchmark focused on grounded commonsense reasoning, and by introducing an adversarial filtering mechanism that substantially reduces known and easily detectable annotation artifacts.
Commonsense NLI Several datasets have been introduced to study NLI beyond linguistic entailment: for inferring likely causes and endings given a sentence (COPA;, for choosing the most sensible ending to a short story (RocStories;, and for predicting likelihood of a hypothesis by regressing to an ordinal label (JOCI;). These datasets are relatively small: 1k examples for COPA and 10k cloze examples for RocStories. 13 JOCI increases the scale by generating the hypotheses using a knowledge graph or a neural model. In contrast to JOCI where the task was formulated as a regression task on the degree of plausibility of the hypothesis, we frame commonsense inference as a multiple choice question to reduce the potential ambiguity in the labels and to allow for direct comparison between machines and humans. In addition, Swag's use of adversarial filtering increases diversity of situations and counterfactual generation quality. Last, another related task formulation is sentence completion or cloze, where the task is to predict a single word that is removed from a given context. 14 Our work in contrast requires longer textual descriptions to reason about.
Vision datasets Several resources have been introduced to study temporal inference in vision. The Visual Madlibs dataset has 20k image captions about hypothetical next/previous events; similar to our work, the test portion is multiple-choice, with counterfactual answers retrieved from similar images and verified by humans. The question of 'what will happen next?' has also been studied in photo albums, videos of team sports, and egocentric dog videos. Last, annotation artifacts are also a recurring problem for vision datasets such as Visual Genome and Visual QA; recent work was done to create a more challenging VQA dataset by annotating complementary image pairs.
Reducing gender/racial bias Prior work has sought to reduce demographic biases in word embeddings as well as in image recognition models. Our work has focused on producing a dataset with minimal annotation artifacts, which in turn helps to avoid some gender and racial biases that stem from elicitation . However, it is not perfect in this regard, particularly due to biases in movies. Our methodology could potentially be extended to construct datasets free of (possibly intersectional) gender or racial bias.
Physical knowledge Prior work has studied learning grounded knowledge about objects and verbs: from knowledge bases, syntax parses (Forbes and Choi, 2017), word embeddings, and images and dictionary definitions). An alternate thread of work has been to learn scripts: high-level representations of event chains). Swag evaluates both of these strands. 14 Prior work on sentence completion filtered negatives with heuristics based on LM perplexities. We initially tried something similar, but found the result to still be gameable.

Conclusion
We propose a new challenge of physically situated commonsense inference that broadens the scope of natural language inference (NLI) with commonsense reasoning. To support research toward commonsense NLI, we create a large-scale dataset Swag with 113k multiple-choice questions. Our dataset is constructed using Adversarial Filtering (AF), a new paradigm for robust and cost-effective dataset construction that allows datasets to be constructed at scale while automatically reducing annotation artifacts that can be easily detected by a committee of strong baseline models. Our adversarial filtering paradigm is general, allowing potential applications to other datasets that require human composition of question answer pairs. back. We also thank the Mechanical Turk workers for doing a fantastic job with the human validation. This work was supported by the National Science Foundation Graduate Research Fellowship (DGE-1256082), the NSF grant, the DARPA CwC program through ARO (W911NF-15-1-0543), the IARPA DIVA program through D17PC00343, and gifts by Google and Facebook. The views and conclusions contained herein are those of the authors and should not be interpreted as representing endorsements of IARPA, DOI/IBC, or the U.S. Government.

A Appendix

A.1 More detail about video datasets
As mentioned in the main paper, we obtained contexts and found endings from video data. The videos in the ActivityNet dataset are already broken up into into clips. However, the LSMDC dataset contains captions for the entire movie, so it is possible that temporally adjacent captions describe events thatare far apart in time. Thus, we don't include any pair of captions that have a timedifference of more than 25 seconds.
In addition to the datasets we used, we also considered the DiDeMo dataset, which consists of (often several) referring expressions in a video. However, many of the referring expressions are themselves sentence fragments, (e.g. "first time we see people" so we ultimately did not use this dataset.) Additionally, we considered the Visual Madlibs dataset, as it contains 10k hypothetical captions written by Mechanical Turk workers about what might happen next given an image. However, these captions are fundamentally different from the rest of the data (as they're about what might) happen next; as a result, they use different types of language. They also have different tenses versus the other datasets that we considered (e.g. past tense), as a result of the "Mad-libs" style of data collection.

A.2 Details of the language model
Our language model follows standard best practices: the input and output embedding layers are tied, all embedding and hidden layers are set to 512, and we used recurrent dropout (Gal and Ghahramani, 2016) on the hidden states and embedding layer. We additionally train a backwards language model alongside the forward language model, and they share embedding parameters. This adds extra supervision to the embedding layer and gives us another way to score candidate generations. We first pretrain the language model for two epochs on pairs of two sentences in the Toronto Books dataset , and then train on sentence pairs from ActivityNet Captions and LSMDC, validating on held-out perplexity. For optimization, we use Adam (Kingma and Ba, 2015) with a learning rate of 10 ?3 and clip gradients to norm 1.0.
All of the above details were validated using perplexity on a held-out set of the video datasets during early experimentation. Our final development set forward perplexity was 31.2 and backward perplexity was 30.4. We tried more complicated language modeling architectures, such as from, but ended up not seeing an improvement due to overfitting.

A.3 Language model features for the MLP, during adversarial filtering
We obtained LM perplexity features to be used during adversarial filtering in the following ways, using both directions of the bidirectional language model. We extract perplexities for the context by itself (going forward), the ending given the con-text (going forward), the context given the ending (going backward), and the ending by itself (going backward). We also extract the probability of the final generated token going forward, since sentences sometimes reach the length limit of 25 tokens and end unnaturally.
A.4 Refinining the generated answers to four distractors
In the main paper, we noted that we started with 1023 negatives per example, which the adversarial filtering process filtered down to 9. Five of these were passed to mechanical turk workers, and we were left with anywhere between 0 and 4 of these per example as "distractors." (Note that we always were filtering out the second best option that the was selected by the turkers). This means that for many of our examples (62%) we actually have a fourth distractor. In these cases, we sorted the distractors by their "unlikely/likely" score, so that the fourth distractor was the one deemed most likely. We still provided the fourth distractor in the training set to be possibly used in future work, however we didn't train on it for simplicity.

A.5 More information about Mechanical turk
We used several tricks to keep the interannotator agreement high (with a pairwise percent agreement of 79% at classifying an ending as either in the Top 2). First, we had a screening HIT where turkers were given detailed instructions for the task, and only the best-scoring turk workers qualified for the remaining HITs. Second, we periodically dequalified turkers that had a low agreement with the gold endings: any turk worker with an accuracy of less than 55% of classifying the "gold" ending as the best or second best, over 10 or more HITs, had the qualification taken away. We also gave small bonuses to turkers with high accuracy.
During our crowdsourcing, we tried to pay the Turkers a fair wage (median $8.57 per hour) and they left positive comments for us on TurkOpticon and TurkerView. The total dataset cost was $23,000, or an average of 20 cents per example.

A.6 Implementation details of the models considered
We implemented the neural models in PyTorch using the AllenNLP library

A.7 More info about dataset diversity
The final dataset has a vocabulary size of 21000. We also visualize the coverage of the dataset with a Topic model (see).

A.8 Comparing the distribution of verbs with MultiNLI
We also produced an extension to of the main paper, that involves verbs from MultiNLI, in. We ended up not including it in the paper because we wanted to focus our comparison between SNLI and Swag (as they are both grounded datasets). Interestingly, we find that Swag has a less skewed cumulative distribution of verbs up to around 120, when afterwards MultiNLI has a slightly less skewed distribution. This is possibly due to the broader set of domains considered by MultiNLI, whereas we consider videos (which is also a broad domain! but still underrepresents words highly used in newswire text, for instance.)

A.9 More examples
We have more qualitative examples in.