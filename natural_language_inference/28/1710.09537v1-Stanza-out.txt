title
ROTATIONAL UNIT OF MEMORY
abstract
The concepts of unitary evolution matrices and associative memory have boosted the field of Recurrent Neural Networks ( RNN ) to state - of - the - art performance in a variety of sequential tasks .
However , RNN still have a limited capacity to manipulate long - term memory .
To bypass this weakness the most successful applications of RNN use external techniques such as attention mechanisms .
In this paper we propose a novel RNN model that unifies the state - of - the - art approaches : Rotational Unit of Memory ( RUM ) .
The core of RUM is its rotational operation , which is , naturally , a unitary matrix , providing architectures with the power to learn long - term dependencies by overcoming the vanishing and exploding gradients problem .
Moreover , the rotational unit also serves as associative memory .
We evaluate our model on synthetic memorization , question answering and language modeling tasks .
RUM learns the Copying Memory task completely and improves the state - of - the - art result in the Recall task .
RUM 's performance in the bAbI Question Answering task is comparable to that of models with attention mechanism .
We also improve the state - of - the - art result to 1.189 bits - per- character ( BPC ) loss in the Character Level Penn Treebank ( PTB ) task , which is to signify the applications of RUM to real - world sequential data .
The universality of our construction , at the core of RNN , establishes RUM as a promising approach to language modeling , speech recognition and machine translation .
* equal contribution 1 ar Xiv:1710.09537v1 [ cs.LG ]
INTRODUCTION
Recurrent neural networks are widely used in a variety of machine learning applications such as language modeling ) , machine translation ) and speech recognition ) .
Their flexibility of taking inputs of dynamic length makes RNN particularly useful for these tasks .
However , the traditional RNN models such as Long Short - Term Memory ( LSTM , ) and Gated Recurrent Unit ( GRU , ) exhibit some weaknesses that prevent them from achieving human level performance :
1 ) limited memory - they can only remember a hidden state , which usually occupies a small part of a model ; 2 ) gradient vanishing / explosion ) during training - trained with backpropagation through time the models fail to learn long - term dependencies .
Several ways to address those problems are known .
One solution is to use soft and local attention mechanisms ) , which is crucial for most modern applications of RNN .
Nevertheless , researchers are still interested in improving basic RNN cell models to process sequential data better .
Numerous works ; ) use associative memory to span a large memory space .
For example , a practical way to implement associative memory is to set weight matrices as trainable structures that change according to input instances for training .
Furthermore , the recent concept of unitary or orthogonal evolution matrices ; ) also provides a theoretical and empirical solution to the problem of memorizing long - term dependencies .
Here , we propose a novel RNN cell that resolves simultaneously those weaknesses of basic RNN .
The Rotational Unit of Memory is a modified gated model whose rotational operation acts as associative memory and is strictly an orthogonal matrix .
We tested our model on several benchmarks .
RUM is able to solve the synthetic Copying Memory task while traditional LSTM and GRU fail .
For synthetic Recall task , RUM exhibits a stronger ability to remember sequences , hence outperforming state - of - the - art RNN models such as Fastweight RNN ) and WeiNet ) .
By using RUM we achieve the state - of - the - art result in the real - world Character Level Penn Treebank task .
RUM also outperforms all basic RNN models in the bAbI question answering task .
This performance is competitive with that of memory networks , which take advantage of attention mechanisms .
Our contributions are as follows :
1 .
We develop the concept of the Rotational Unit that combines the memorization advantage of unitary / orthogonal matrices with the dynamic structure of associative memory ;
2 .
We implement the rotational operation into a novel RNN model - RUM - which outperforms significantly the current frontier of models on a variety of sequential tasks .
MOTIVATION AND RELATED WORK
UNITARY APPROACH
The problem of the gradient vanishing and exploding problem is well - known to obstruct the learning of long - term dependencies ) .
We will give a brief mathematical motivation of the problem .
Let 's assume the cost function is C.
In order to evaluate ?C /?
W ij , one computes the derivative gradient using the chain rule :
where D ( k ) = diag{ ? ( Wx ( k ) + Ah ( k?1 ) + b ) } is the Jacobian matrix of the point - wise nonlinearity .
As long as the eigenvalues of D ( k ) are of order unity , then if W has eigenvalues ?
i 1 , they will cause gradient explosion ?
C /?h ( T ) ? ? , while if W has eigenvalues ?
i 1 , they can cause gradient vanishing , ?C /?h ( T ) ?
0 . Either situation hampers the efficiency of RNN .
LSTM is designed to solve this problem , but gradient clipping ) is still required for training .
Recently , by restraining the hidden - to - hidden matrix to be orthogonal or unitary , many models have overcome the problem of exploding and vanishing gradients .
Theoretically , unitary and orthogonal matrices will keep the norm of the gradient because the absolute value of their eigenvalues equals one .
Several approaches have successfully developed the applications of unitary and orthogonal matrix to recurrent neural networks .
use parameterizations to form the unitary spaces .
applies gradient projection onto a unitary manifold .
uses penalty terms as a regularization to restrain matrices to be unitary , hence accessing long - term memorization .
Only learning long - term dependencies is not sufficient for a powerful RNN. finds that the combination of unitary / orthogonal matrices with a gated mechanism improves the performance of RNN because of the benefits of a forgetting ability .
also points out the optimal way of such a unitary / gated combination : the unitary / orthogonal matrix should appear before the reset gate , which can then be followed by a modReLU activation .
In RUM we implement an orthogonal operation in the same place , but the construction of that matrix is completely different : instead of parameterizing the kernel , we encode a natural rotation , generated by the inputs and the hidden state .
ASSOCIATIVE MEMORY APPROACH
Limited memory in RNN is truly a shortage .
Adding an external associative memory is a natural solution .
For instance , the Neural Turing Machine ) and many other models have shown the power of using this technique .
While it expands the accessible memory space , the technique significantly increases the size of the model , therefore making the process of learning so many parameters harder .
Now , we will briefly describe the concept of associative memory .
In basic RNN , ht = ? ( W x t + Ah t?1 + b ) where ht is the hidden state at time step t and x is the input data at each step .
Here W and A are trainable parameters thatare fixed in the model .
A recent approach replaces A with a dynamic At ( as a function of time ) so that this matrix can serve as a memory state .
Thus , the memory size increases from O(N h ) to O (N 2 h ) , where N h is the hidden size .
In particular , At is determined by A t?1 , h t?1 and x t which can be apart of a multi - layer or a Hopfiled net .
By treating the RNN weights as memory determined by the current input data , a larger memory size is provided and less trainable parameters are required .
This significantly increases the memorization ability of RNN .
Our model also falls into this category of associative memory through its rotational design of an orthogonal At matrix .
METHODS
The goal of this section is to suggest ways of engineering models that incorporate rotations as units of memory .
In the following discussion N x is the input size and N h is the hidden size .
THE OPERATION
Rotation
The operation Rotation is an efficient encoder of an orthogonal operation , which acts as a unit of memory .
Rotation computes an orthogonal operator R ( a , b ) in RN h N h that represents the rotation between two non-collinear vectors a and bin the two - dimensional subspace span ( a , b ) of the Euclidean space RN h with distance .
As a consequence , R can act as a kernel on a hidden state h.
More formally , what we propose is a function
such that after ortho-normalizing a and b to A practical advantage of Rotation is that it is both orthogonal and differentiable .
On one hand , it is a composition of differentiable sub-operations , which enables learning via backpropagation .
On the other hand , it preserves the norm of the hidden state , hence it can yield more stable gradients .
We were motivated to find differentiable implementations of unitary ( orthogonal in particular ) operations in existing toolkits for deep learning .
Our conclusion is that Rotation can be implemented in various frameworks thatare utilized for RNN and other deep learning architectures .
Indeed , Rotation is not constrained to parameterize a unitary structure , but instead it produces an orthogonal matrix from simple components in the cell , which makes it useful for experimentation .
We implement Rotation together with its action on a hidden state efficiently .
We do not need to compute the matrix R t before we rotate .
Instead we can directly apply the RHS of equation to the hidden state .
Hence , the memory complexity of our algorithm is the RHS of ( 1 ) .
Note that we only use two trainable vectors in RN h to generate orthogonal weights in RN h N h , which means the model has O (N 2 h ) degrees of freedom for a single unit of memory .
Likewise , the time complexity is O ( N b N 2 h ) .
Thus , Rotation is a universal operation that enables implementations suitable to any neural network model with backpropagation .
THE RUM ARCHITECTURE
We propose the Recurrent Unit of Memory as the first example of an application of Rotation to a recurrent cell .
is a sketch of the connections in the cell .
RUM consists of an update gate u ?
RN h that has the same function as in GRU .
Instead of a reset gate , however , the model learns a memory target variable ?
?
RN h .
RUM also learns to embed the input vector x ?
R Nx into RN h to yield ?
?
RN h .
Hence Rotation encodes the rotation between the embedded input and the target , which is accumulated to the associative memory unit R t ?
RN h N h ( originally initialized to the identity matrix ) .
Here ?
is a non-negative integer that is a hyper - parameter of the model .
From here , the orthogonal R t acts on the state h to produce an evolved hidden stateh .
Finally RUM obtains the new hidden state via u , just as in GRU .
The RUM equations are as follows
initial update gate and memory target ;
?
activation of the update gate ;
We have introduced time subscripts to demonstrate the recurrence relations .
The kernels have dimensions given by
The norm ?
is a scalar hyper - parameter of the RUM model .
The orthogonal matrix R ( ? t , ? ) conceptually takes the place of a kernel acting on the hidden state in GRU .
This is the most efficient place to introduce an orthogonal operation , as the Gated Orthogonal Recurrent Unit ( GORU , ) experiments suggest .
The difference with the GORU cell is that GORU parameterizes and learns the kernel as an orthogonal matrix , while RUM does not parameterize the rotation R. Instead , RUM learns ? , which together with x , determines R . The orthogonal matrix keeps the norm of the vectors , so we experiment with a ReLU activation instead of the conventional tanh in gated mechanisms .
Even though R is an orthogonal element of RUM , the norm of ht is not stable because of the ReLU activation .
Therefore , we suggest normalizing the hidden state ht to a have norm ?.
We call this technique time normalization as we usually feed mini-batches to the RNN during learning that have the shape ( N b , NT ) , where Nb is the size of the batch and NT is the length of the sequence that we feed in .
Time normalization happens along the sequence dimension as opposed to the batch dimension in batch normalization .
Choosing appropriate ? for the RUM model stabilizes learning and ensures the eigenvalues of the kernels are bounded from above .
This in turn means that the smaller ?
is , the more we reduce the effect of exploding gradients .
Finally , even though RUM uses an update gate , it is not a standard gated mechanism , as it does not have a reset gate .
Instead we suggest utilizing additional memory via the target vector ? .
By feeding inputs to RUM , ?
adapts to encode rotations , which align the hidden states in desired locations in RN h , without changing the norm of h .
We believe that the unit of memory R t gives advantage to RUM over other gated mechanisms , such as LSTM and GRU .
EXPERIMENTS
Firstly , we test RUM 's memorization capacity on the Copying Memory Task .
Secondly , we signify the superiority of RUM by obtaining a state - of - the - art result in the Associative Recall Task .
Thirdly , we show that even without external memory , RUM achieves comparable to state - of - the - art results in the bAbI Question Answering data set .
Finally , we utilize RUM 's rotational memory to reach 1.189 BPC in the Character Level Penn Treebank .
We experiment with ? = 0 RUM and ? = 1 RUM , the latter model corresponding to tuning in the rotational associative memory .
COPYING MEMORY TASK
A standard way to evaluate the memory capacity of a neural network is to test its performance in the Copying Memory Task , ) .
We follow the setup in .
The objective of the RNN is to remember ( copy ) information received T time steps earlier ( see section A for details about the data ) .
Our results in this task demonstrate :
1 . RUM utilizes a different representation of memory that outperforms those of LSTM and GRU ; 2 . RUM solves the task completely , despite its update gate , which does not allow all of the information encoded in the hidden stay to pass through .
The only other gated RNN model successful at copying is GORU .
reveals that LSTM and GRU hit a predictable baseline , which is equivalent to random guessing .
RUM falls bellow the baseline , and subsequently learns the task by achieving zero loss after a few thousands iterations .
With the help of figure 2 we will explain how the additional hyper - parameters for RUM affect its training .
We observe that when we remove the normalization (? = N / A ) then RUM learns more quickly than the case of requiring a norm ? = 1.0 .
At the same time , though , the training entails more fluctuations .
Hence we believe that choosing a finite ?
to normalize the hidden state is an important tool for stable learning .
Moreover , it is necessary for the NLP task in this paper ( see section 4.4 ) : for our character level predictions we use large hidden sizes , which if left unnormalized , can make the cross entropy loss blowup .
We also observe the benefits of tuning in the associative rotational memory .
Indeed , a ? = 1 RUM has a smaller hidden size , N h = 100 , yet it learns much more quickly than a ? = 0 RUM .
It is possible that the accumulation of phase via ? = 1 to enable faster long - term dependence learning than the ? = 0 case .
Either way , both models overcome the vanishing / exploding gradients , and eventually learn the task completely .
ASSOCIATIVE RECALL TASK
Another important synthetic task to test the memory ability of recurrent neural network is the Associative Recall .
This task requires RNN to remember the whole sequence of the data and perform extra logic on the sequence .
We follow the same setting as in and and modify the original task so that it can test for longer sequences .
In detail , the RNN is fed into a sequence of characters , e.g. " a1s2d3f4 g5 ? ? d " .
The RNN is supposed to output the character based on the " key " which is located at the end of the sequence .
The RNN needs to look back into the sequence and find the " key " and then to retrieve the next character .
In this example , the correct answer is " 3 " .
See section B for further details about the data .
In this experiment , we compare RUM to an LSTM , , a Fast - weight RNN ) and a recent successful RNN WeiNet ) .
All the models have the same hidden state N h = 50 for different lengths T .
We use a batch size 128 .
The optimizer is RMSProp with a learning rate 0.001 .
We find that LSTM fails to learn the task , because of its lack of sufficient memory capacity .
NTM and Fast - weight RNN fail longer tasks , which means they can not learn to manipulate their memory efficiently .
QUESTION ANSWERING
Question answering remains one of the most important applicable tasks in NLP .
Almost all stateof - the - art performance is achieved by the means of attention mechanisms .
Few works have been done to improve the performance by developing stronger RNN .
Here , we tested RUM on the b AbI Question Answering data set ) to demonstrate its ability to memorize and reason without any attention .
In this task , we train 20 sub - tasks jointly for each model .
See section C for detailed experimental settings and results on each sub-task .
We compare our model with several baselines : a simple LSTM , an End - to - end Memory Network ) and a GORU .
We find that RUM outperforms significantly LSTM and GORU and achieves competitive result with those of MemN2N , which has an attention mechanism .
We summarize the results in .
We emphasize that for some sub - tasks in the table , which require large memory , RUM outperforms models with attention mechanisms ( Mem N2N ) .
Model
Test Accuracy ( % ) LSTM ) 49 GORU ) 60 MemN2N ) 86 RUM ( ours ) 73.2
CHARACTER LEVEL LANGUAGE MODELING
The rotational unit of memory is a natural architecture that can learn long - term structure in data while avoiding significant overfitting .
Perhaps , the best way to demonstrate this unique property , among other RNN models , is to test RUM on real world character level NLP tasks .
PENN TREEBANK CORPUS DATA SET
The corpus is a collection of articles in The Wall Street Journal ) .
The text is in English and its vocabulary consists of 10000 words .
We split the data into train , validation and test sets according to .
We train by feeding mini-batches of size Nb that consist of sequences of T consecutive characters .
We incorporate RUM into the state - of - the - art high - level model : Fast - Slow RNN ( FS - RNN , ) .
The FS - RNN -k architecture consists of two hierarchical layers : one of them is a " fast " layer that connects k RNN cells F 1 , . . .
F kin series ; the other is a " slow " layer that consists of a single RNN cell S.
The organization is roughly as follows :
F 1 receives the input from the mini-batch and feeds it s state into S ; S feeds it s state into F 2 ; the output of F k is the probability distribution of the predicted character .
outlines the performance of some FS - RNN models along with other results in the PTB data set , in which we present the improved test BPC .
achieve their record with FS - LSTM - 2 , by setting F 1 , 2 and S to LSTM .
The authors in the same paper suggest that the " slow " cell has the function of capturing long - term dependencies from the data .
Hence , it is natural to set S to be a RUM , given its memorization advantages .
In particular , we experiment with FS - RUM - 2 , for which S is a RUM and F 1 , 2 are LSTM .
Additionally , we test the performance of a simple RUM and a two - layer RUM .
As the models are prone to overfitting , for each of our models we follow the experimental settings for regularization in , presented in section D .
Those techniques work particularly well in combination with the rotational structure of RUM .
More specifically , FS - RUM - 2 needs more than 350 epochs to converge by following a suitable learning rate pattern ( see in the appendix ) .
FS - RUM - 2 generalizes better than other gated models , such as GRU and LSTM , because it learns efficient patterns for activation in its kernels .
Such a skill is useful for the large Penn Treebank data set , as with its special diagonal structure , the RUM cell in FS - RUM - 2 activates almost all neurons in the hidden state .
We discuss this representational advantage in section 5.1 .
DISCUSSION
VISUAL ANALYSIS
One advantage of the Rotational Unit of Memory is that it allows the model to encode information in the phase of the hidden state .
In order to demonstrate the structure behind such learning , we look at the kernels that generate the target memory ?
in the RUM model .
is a visualization for the Recall task that demonstrates the diagonal structure of W
hh which generates ?
( a diagonal structure is also present W
hh , but it is contrasted less ) .
One way to interpret the importance of the diagonal contrast is that each neuron in the hidden state plays an important role for learning since each element on the diagonal activates a distinct neuron .
Therefore , it seems that RUM utilizes the capacity of the hidden state almost completely .
For this reason , we might consider RUM as an architecture that is close to the theoretical optimum of the representational power of RNN models .
Moreover , the diagonal structure is not task specific .
For example , in ( b ) we observe a particular W
( 2 )
hh for the target ? on the Penn Treebank task .
The way we interpret the meaning of the diagonal structure , combined with the off - diagonal activations , is that probably they encode grammar and vocabulary , as well as the links between various components of language .
THEORETICAL ANALYSIS
It is natural to view the Rotational Unit of Memory and many other approaches using orthogonal matrices to fall into the category of phase - encoding architectures : R = R (? ) , where ?
is a phase information matrix .
For instance , we can parameterize any orthogonal matrix according to the Efficient Unitary Neural Networks ) architecture : R = N i =0 U 0 (? i ) , where U 0 is a block diagonal matrix containing N / 2 numbers of 2 - by - 2 rotations .
The component ?
i is an one - by - ( N / 2 ) parameter vector .
Therefore , the rotational memory equation in our model can be represented as
where ?
tare rotational memory phase vectors at time t and ?
represents the phases generated by the operation Rotation correspondingly .
Note that each element of the matrix multiplication U 0 (? i ) U 0 ( ?
i ) only depends on one element from ?
i and ?
i each .
This means that , to cancel out one element ?
i , the model only needs to learn to express ?
i as the negation of ?
i .
As a result , our RNN implementation does not require a reset gate , as in GRU or GORU , because the forgetting mechanism is automatically embedded into the representation ( 2 ) of phase - encoding .
Thus , the concept of phase - encoding is simply a special sampling on manifolds generated by the special orthogonal Lie group SO ( N ) .
Now , let N = N h be the hidden size .
One way to extend the current RUM model is to allow for ?
to be any real number in the associative memory equation R t = ( R t?1 ) ? Rotation ( ? t , ? t ) .
This will expand the representational power of the rotational unit .
The difficulty is to mathematically define the raising of a matrix to are al power , which is equivalent to defining a logarithm of a matrix .
Again , rotations prove to be a natural choice since they are elements of SO ( N h ) , and their logarithms correspond to elements of the vector space of the Lie algebra so ( N h ) , associatied to SO ( N h ) .
For the training of all models we use RMSProp optimization with a learning rate of 0.001 and a decay rate of 0.9 ; the batch size Nb is 128 .
We observe that it is necessary to tune in the associative memory via ? = 1 since ? =
0 RUM does not learn the task .
FUTURE WORK
D CHARACTER LEVEL PENN TREEBANK TASK
For all RNN cells we apply layer normalization ) to the cells and to the LSTM gates and RUM 's update gate and target memory , zoneout ) to the recurrent connections , and dropout ) to the FS - RNN .
For training we use Adam optimization ( Kingma & Ba ) .
We apply gradient clipping with maximal norm of the gradients equal to 1.0 . lists the hyper - parameters we use for our models .
We embed the inputs into a higher - dimensional space .
The output of each models passes through a softmax layer ; then the probabilities are evaluated by a standard cross entropy loss function .
The bits - per-character ( BPC ) loss is simply the cross entropy with a binary logarithm .
