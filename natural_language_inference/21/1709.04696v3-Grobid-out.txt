title
DiSAN: Directional Self-Attention Network for RNN/CNN-Free Language Understanding
abstract
Recurrent neural nets (RNN) and convolutional neural nets (CNN) are widely used on NLP tasks to capture the long-term and local dependencies, respectively. Attention mechanisms have recently attracted enormous interest due to their highly parallelizable computation, significantly less training time, and flexibility in modeling dependencies. We propose a novel attention mechanism in which the attention between elements from input sequence(s) is directional and multi-dimensional (i.e., feature-wise). A light-weight neural net, "Directional Self-Attention Network (DiSAN)", is then proposed to learn sentence embedding, based solely on the proposed attention without any RNN/CNN structure. DiSAN is only composed of a directional self-attention with temporal order encoded, followed by a multi-dimensional attention that compresses the sequence into a vector representation. Despite its simple form, DiSAN outperforms complicated RNN models on both prediction quality and time efficiency. It achieves the best test accuracy among all sentence encoding methods and improves the most recent best result by 1.02% on the Stanford Natural Language Inference (SNLI) dataset, and shows stateof-the-art test accuracy on the Stanford Sentiment Treebank (SST), Multi-Genre natural language inference (MultiNLI), Sentences Involving Compositional Knowledge (SICK), Customer Review, MPQA, TREC question-type classification and Subjectivity (SUBJ) datasets.
narrative
performance on a large number of NLP tasks, including neural machine translation, natural language inference, conversation generation, question answering, machine reading comprehension, and sentiment analysis. The attention uses a hidden layer to compute a categorical distribution over elements from the input sequence to reflect their importance weights. It allows RNN/CNN to maintain a variable-length memory, so that elements from the input sequence can be selected by their importance/relevance and merged into the output. In contrast to RNN and CNN, the attention mechanism is trained to capture the dependencies that make significant contributions to the task, regardless of the distance between the elements in the sequence. It can thus provide complementary information to the distance-aware dependencies modeled by RNN/CNN. In addition, computing attention only requires matrix multiplication, which is highly parallelizable compared to the sequential computation of RNN.
In a very recent work, an attention mechanism is solely used to construct a sequence to sequence (seq2seq) model that achieves a state-of-the-art quality score on the neural machine translation (NMT) task. The seq2seq model, "Transformer", has an encoder-decoder structure that is only composed of stacked attention networks, without using either recurrence or convolution. The proposed attention, "multi-head attention", projects the input sequence to multiple subspaces, then applies scaled dotproduct attention to its representation in each subspace, and lastly concatenates their output. By doing this, it can combine different attentions from multiple subspaces. This mechanism is used in Transformer to compute both the context-aware features inside the encoder/decoder and the bottleneck features between them.
The attention mechanism has more flexibility in sequence length than RNN/CNN, and is more task/data-driven when modeling dependencies. Unlike sequential models, its computation can be easily and significantly accelerated by existing distributed/parallel computing schemes. However, to the best of our knowledge, a neural net entirely based on attention has not been designed for other NLP tasks except NMT, especially those that cannot be cast into a seq2seq problem.
Compared to RNN, a dis advantage of most attention mechanisms is that the temporal order information is lost, which however might be important to the task. This explains why positional encoding is applied to the sequence before being processed by the attention in Transformer. How to model order information within an attention is still an open problem.
The goal of this paper is to develop a unified and RNN/CNN-free attention network that can be generally utilized to learn the sentence encoding model for different NLP tasks, such as natural language inference, sentiment analysis, sentence classification and semantic relatedness. We focus on the sentence encoding model because it is a basic module of most DNNs used in the NLP literature.
We propose a novel attention mechanism that differs from previous ones in that it is 1) multi-dimensional: the attention w.r.t. each pair of elements from the source(s) is a vector, where each entry is the attention computed on each feature; and 2) directional: it uses one or multiple positional masks to model the asymmetric attention between two elements. We compute feature-wise attention since each element in a sequence is usually represented by a vector, e.g., word/character embedding, and attention on different features can contain different information about dependency, thus to handle the variation of contexts around the same word. We apply positional masks to attention distribution since they can easily encode prior structure knowledge such as temporal order and dependency parsing. This design mitigates the weakness of attention in modeling order information, and takes full advantage of parallel computing.
We then build a light-weight and RNN/CNN-free neural network, "Directional Self-Attention Network (DiSAN)", for sentence encoding. This network relies entirely on the proposed attentions and does not use any RNN/CNN structure. In DiSAN, the input sequence is processed by directional (forward and backward) self-attentions to model context dependency and produce context-aware representations for all tokens. Then, a multi-dimensional attention computes a vector representation of the entire sequence, which can be passed into a classification/regression module to compute the final prediction for a particular task. Unlike Transformer, neither stacking of attention blocks nor an encoderdecoder structure is required. The simple architecture of DiSAN leads to fewer parameters, less computation and easier parallelization.
In experiments 1 , we compare DiSAN with the currently popular methods on various NLP tasks, e.g., natural language inference, sentiment analysis, sentence classification, etc. DiSAN achieves the highest test accuracy on the Stanford Natural Language Inference (SNLI) dataset among sentence-encoding models and improves the currently best result by 1.02%. It also shows the state-of-the-art performance on the Stanford Sentiment Treebank (SST), Multi-Genre natural language inference (MultiNLI), SICK, Customer Review, MPQA, SUBJ and TREC question-type classification datasets. Meanwhile, it has fewer parameters and exhibits much higher computation efficiency than the mod-els it outperforms, e.g., LSTM and tree-based models.
Annotation: 1) Lowercase denotes a vector; 2) bold lowercase denotes a sequence of vectors (stored as a matrix); and 3) uppercase denotes a matrix or a tensor.

Background

Sentence Encoding
In the pipeline of NLP tasks, a sentence is denoted by a sequence of discrete tokens (e.g., words or characters) v = [v 1 , v 2 , . . . , v n ], where vi could be a one-hot vector whose dimension length equals the number of distinct tokens N . A pre-trained token embedding (e.g., word2vec or GloVe) is applied to v and transforms all discrete tokens to a sequence of low-dimensional dense vector representations x = [x 1 , x 2 , . . . , x n ] with xi ? R de . This pre-process can be written as x = W (e) v, where word embedding weight matrix W (e) ? R de?N and x ? R de?n .
Most DNN sentence-encoding models for NLP tasks take x as the input and further generate a vector representation u i for each xi by context fusion. Then a sentence encoding is obtained by mapping the sequence u = [u 1 , u 2 , . . . , u n ] to a single vector s ? Rd , which is used as a compact encoding of the entire sentence in NLP problems.

Attention
The attention is proposed to compute an alignment score between elements from two sources. In particular, given the token embeddings of a source sequence x = [x 1 , x 2 , . . . , x n ] and the vector representation of a query q, attention computes the alignment score between xi and q by a compatibility function f (x i , q), which measures the dependency between xi and q, or the attention of q to xi . A softmax function then transforms the scores [f (x i , q)] n i=1 to a probability distribution p(z|x, q) by normalizing over all then tokens of x. Here z is an indicator of which token in x is important to q on a specific task. That is, large p(z = i|x, q) means xi contributes important information to q. The above process can be summarized by the following equations.
(1) p(z|x, q) = softmax(a).
(2) Specifically,
.
(
The output of this attention mechanism is a weighted sum of the embeddings for all tokens in x, where the weights are given by p(z|x, q). It places large weights on the tokens important to q, and can be written as the expectation of a token sampled according to its importance, i.e.,
where s ? R de can be used as the sentence encoding of x.
Additive attention (or multi-layer perceptron attention)  2015) and multiplicative attention (or dot-product attention) are the two most commonly used attention mechanisms. They share the same and unified form of attention introduced above, but are different in the compatibility function f (x i , q). Additive attention is associated with
where ?(?) is an activation function and w ? R de is a weight vector. Multiplicative attention uses inner product or cosine similarity for f (x i , q), i.e.,
In practice, additive attention often outperforms multiplicative one in prediction quality, but the latter is faster and more memory-efficient due to optimized matrix multiplication.

Self-Attention
Self-Attention is a special case of the attention mechanism introduced above. It replaces q with a token embedding x j from the source input itself. It relates elements at different positions from a single sequence by computing the attention between each pair of tokens, xi and x j . It is very expressive and flexible for both long-range and local dependencies, which used to be respectively modeled by RNN and CNN. Moreover, it has much faster computation speed and fewer parameters than RNN. In recent works, we have already witnessed its success across a variety of NLP tasks, such as reading comprehension and neural machine translation).

Two Proposed Attention Mechanisms
In this section, we introduce two novel attention mechanisms, multi-dimensional attention in Section 3.1 (with two extensions to self-attention in Section 3.2) and directional self-attention in Section 3.3. They are the main components of DiSAN and maybe of independent interest to other neural nets for other NLP problems in which an attention is needed.

Multi-dimensional Attention
Multi-dimensional attention is a natural extension of additive attention (or MLP attention) at the feature level. Instead of computing a single scalar score f (x i , q) for each token xi as shown in Eq.(5), multi-dimensional attention computes a feature-wise score vector for xi by replacing weight vector win Eq.(5) with a matrix W , i.e.,
where f (x i , q) ? R de is a vector with the same length as xi , and all the weight matrices W, W (1) , W (2) ? R de?de . We further add two bias terms to the parts in and out activation ?(?), i.e.,
We then compute a categorical distribution p(z k |x, q) over all then tokens for each feature k ? [d e ]. A large p(z k = i|x, q) means that feature k of token i is important to q. We apply the same procedure Eq.
(
. Now each feature kin each token i has an importance weight P ki p(z k = i|x, q). The output scan be written as
We give an illustration of traditional attention and multidimensional attention in. In the rest of this paper, we will ignore the subscript k which indexes feature dimension for simplification if no confusion is possible. Hence, the output scan be written as an element-wise product s = n i=1 P ?i xi Remark: The word embedding usually suffers from the polysemy in natural language. Since traditional attention computes a single importance score for each word based on the word embedding, it cannot distinguish the meanings of the same word in different contexts. Multi-dimensional attention, however, computes a score for each feature of each word, so it can select the features that can best describe the word's specific meaning in any given context, and include this information in the sentence encoding output s.

Two types of Multi-dimensional Self-attention
When extending multi-dimension to self-attentions, we have two variants of multi-dimensional attention. The first one, called multi-dimensional "token2token" self-attention, explores the dependency between xi and x j from the same source x, and generates context-aware coding for each element. It replaces q with x j in Eq.(8), i.e.,
Similar to P in vanilla multi-dimensional attention, we compute a probability matrix P j ? R de?n for each x j such that P j ki p(z k = i|x, x j ). The output for x j is
The output of token2token self-attention for all elements from x is s = [s 1 , s 2 , . . . , s n ] ? R de?n . The second one, multi-dimensional "source2token" selfattention, explores the dependency between xi and the entire sequence x, and compresses the sequence x into a vector. It removes q from Eq.(8), i.e.,
The probability matrix is defined as P ki p(z k = i|x) and is computed in the same way as P in vanilla multidimensional attention. The output sis also same, i.e.,
We will use these two types (i.e., token2token and source2token) of multi-dimensional self-attention in different parts of our sentence encoding model, DiSAN.

Directional Self-Attention
Directional self-attention (DiSA) is composed of a fully connected layer whose input is the token embeddings x, a "masked" multi-dimensional token2token self-attention block to explore the dependency and temporal order, and a fusion gate to combine the output and input of the attention block. Its structure is shown in. It can be used as either a neural net or a module to compose a large network.
In DiSA, we first transform the input sequence x = [x 1 , x 2 , . . . , x n ] to a sequence of hidden state h = [h 1 , h 2 , . . . , h n ] by a fully connected layer, i.e.,
where x ? R de?n , h ? Rd h ?n , W (h) and b (h) are the learnable parameters, and ? h (?) is an activation function. We then apply multi-dimensional token2token selfattention to h, and generate context-aware vector representations s for all elements from the input sequence. We make two modifications to Eq.(10) to reduce the number of parameters and make the attention directional.
First, we set W in Eq.(10) to a scalar c and divide the part in ?(?) by c, and we use tanh(?) for ?(?), which reduces the number of parameters. In experiments, we always set c = 5, and obtain stable output.
Second, we apply a positional mask to Eq.(10), so the attention between two elements can be asymmetric. Given a mask M ? {0, ??} n?n , we set bias b to a constant vector M ij 1 in Eq., where 1 is an all-one vector. Hence, Eq. is modified to
To see why a mask can encode directional information, let us consider a casein which
This means that there is no attention of x j to xi on feature k. On the contrary, we have p(z k = j|x, xi ) > 0, which means that attention of xi to x j exists on feature k. Therefore, prior structure knowledge such as temporal order and dependency parsing can be easily encoded by the mask, and explored in generating sentence encoding. This is an important feature of DiSA that previous attention mechanisms do not have.
For self-attention, we usually need to dis able the attention of each token to itself. This is the same as applying a diagonal-dis abled (i.e., diag-dis abled) mask such that
Moreover, we can use masks to encode temporal order information into attention output. In this paper, we use two masks, i.e., forward mask M f wand backward mask M bw ,
In forward mask M f w , there is the only attention of later token j to early token i, and vice versa in backward mask. We show these three positional masks in. Given input sequence x and a mask M , we compute f (x i , x j ) according to Eq.(15), and follow the standard procedure of multi-dimensional token2token self-attention to The final output u ? Rd h ?n of DiSA is obtained by combining the output sand the input h of the masked multidimensional token2token self-attention block. This yields a temporal order encoded and context-aware vector representation for each element/token. The combination is accomplished by a dimension-wise fusion gate, i.e.,
where W (f 1) , W (f 2) ? Rd h ?d hand b (f ) ? Rd hare the learnable parameters of the fusion gate.

Directional Self-Attention Network
We propose a light-weight network, "Directional Self-Attention Network (DiSAN)", for sentence encoding. Its architecture is shown in. Given an input sequence of token embedding x, DiSAN firstly applies two parameter-untied DiSA blocks with forward mask M f w Eq.(17) and M bw Eq.(18), respectively. The feed-forward procedure is given in Eq.(14)-(15) and Eq.(19)-(20). Their outputs are denoted by u f w , u bw ? Rd h ?n . We concatenate them vertically as [u f w ; u bw ] ? R 2d h ?n , and use this concatenated output as input to a multidimensional source2token self-attention block, whose output s dis an ? R 2d h computed by Eq.(12)-(13) is the final sentence encoding result of DiSAN.
Remark: In DiSAN, forward/backward DiSA blocks work as context fusion layers. And the multi-dimensional source2token self-attention compresses the sequence into a, in which forward and backward LSTMs are used to encode long-range dependency from different directions. In Bi-LSTM, LSTM combines the context-aware output with the input by multi-gate. The fusion gate used in DiSA shares the similar motivation. However, DiSAN has fewer parameters, simpler structure and better efficiency.

Experiments
In this section, we first apply DiSAN to natural language inference and sentiment analysis tasks. DiSAN achieves the state-of-the-art performance and significantly better efficiency than other baseline methods on benchmark datasets for both tasks. We also conduct experiments on other NLP tasks and DiSAN also achieves state-of-the-art performance.
Training Setup: We use cross-entropy loss plus L2 regularization penalty as optimization objective. We minimize it by Adadelta) (an optimizer of mini-batch SGD) with batch size of 64. We use Adadelta rather than Adam because in our experiments, DiSAN optimized by Adadelta can achieve more stable performance than Adam optimized one. Initial learning rate is set to 0.5. All weight matrices are initialized by Glorot Initialization, and the biases are initialized with 0. We initialize the word embedding in x by 300D GloVe 6B pre-trained vectors. The Out-of-Vocabulary words in training set are randomly initialized by uniform distribution between (?0.05, 0.05). The word embeddings are fine-tuned during the training phrase. We use Dropout) with keep probability 0.75 for language inference and 0.8 for sentiment analysis. The L2 regularization decay factors ? are 5 ? 10 ?5 and 10 ?4 for language inference and sentiment analysis, respectively. Note that the dropout keep probability and ? varies with the scale of corresponding dataset. Hidden units number d h is set to 300. Activation functions ?(?) are ELU (exponential linear unit) (Clevert, Unterthiner, and Hochreiter 2016) if not specified. All models are implemented with TensorFlow 2 and run on sin- 3.0m 83.9 80.6 1024D GRU encoders 15m 98.8 81.4 300D Tree-based CNN encoders 3.5m 83.3 82.1 300D SPINN-PI encoders 3.7m 89.2 83.2 600D Bi-LSTM encoders 2.0m 86.4 83.3 300D NTI-SLSTM-LSTM encoders 4.0m 82.5 83.4 600D Bi-LSTM encoders+intra-attention 2.8m 84.5 84.2 300D NSE encoders 3  gle Nvidia GTX 1080Ti graphic card.

Natural Language Inference
The goal of Natural Language Inference (NLI) is to reason the semantic relationship between a premise sentence and a corresponding hypothesis sentence. The possible relationship could be entailment, neutral or contradiction. We compare different models on a widely used benchmark, Stanford Natural Language Inference (SNLI) 3 dataset, which consists of 549,367/9,842/9,824 (train/dev/test) premise-hypothesis pairs with labels. Following the standard procedure in, we launch two sentence encoding models (e.g., DiSAN) with tied parameters for the premise sentence and hypothesis sentence, respectively. Given the output encoding s p for the premise and sh for the hypothesis, the representation of relationship is the concatenation of s p , sh , s p ? sh and s p sh , which is fed into a 300D fully connected layer and then a 3-unit output layer with softmax to compute a probability distribution over the three types of relationship.
For thorough comparison, besides the neural nets proposed in previous works of NLI, we implement five extra neural net baselines to compare with DiSAN. They help us to analyze the improvement contributed by each part of DiSAN and to verify that the two attention mechanisms proposed in Section 3 can improve other networks.
? Word Embedding with additive attention.

? Word Embedding with s2t self-attention: DiSAN with
DiSA blocks removed.
? Multi-head with s2t self-attention: Multi-head attention) (8 heads, each has 75 hidden units) with source2token self-attention. The positional encoding 3 https://nlp.stanford.edu/projects/snli/ method used in is applied to the input sequence to encode temporal information. We find our experiments show that multi-head attention is sensitive to hyperparameters, so we adjust keep probability of dropout from 0.7 to 0.9 with step 0.05 and report the best result. ? Bi-LSTM with s2t self-attention: a multi-dimensional source2token self-attention block is applied to the output of Bi-LSTM (300D forward + 300D backward LSTMs). ? DiSAN without directions: DiSAN with the forward/backward masks M f wand M bw replaced with two diag-dis abled masks M diag , i.e., DiSAN without forward/backward order information.
Compared to the results from the official leaderboard of SNLI in, DiSAN outperforms previous works and improves the best latest test accuracy (achieved by a memory-based NSE encoder network) by a remarkable margin of 1.02%. DiSAN surpasses the RNN/CNN based models with more complicated architecture and more parameters by large margins, e.g., +2.32% to Bi-LSTM, +1.42% to Bi-LSTM with additive attention. It even outperforms models with the assistance of a semantic parsing tree, e.g., +3.52% to Tree-based CNN, +2.42% to SPINN-PI.
In the results of the five baseline methods and DiSAN at the bottom of, we demonstrate that making attention multi-dimensional (feature-wise) or directional brings substantial improvement to different neural nets. First, a comparison between the first two models shows that changing token-wise attention to multi-dimensional/feature-wise attention leads to 3.31% improvement on a word embedding based model. Also, a comparison between the third baseline and DiSAN shows that DiSAN can substantially outperform multi-head attention by 1.45%. Moreover, a comparison between the forth baseline and DiSAN shows that the DiSA block can even outperform Bi-LSTM layer in context encoding, improving test accuracy by 0.64%. A comparison between the fifth baseline and DiSAN shows that directional self-attention with forward and backward masks (with temporal order encoded) can bring 0.96% improvement.
Additional advantages of DiSAN shown in are its fewer parameters and compelling time efficiency. It is ?3 faster than widely used Bi-LSTM model. Compared to other models with competitive performance, e.g., 600D Bi-LSTM encoders with intra-attention (2.8M), 300D NSE encoders (3.0M) and 600D Bi-LSTM encoders with multidimensional attention (2.88M), DiSAN only has 2.35M parameters.

Sentiment Analysis

Model
Test Accu MV-RNN 44.4 RNTN 45.7 Bi-LSTM  49.8 Tree-LSTM 51.0 CNN-non-static 48.0 CNN-Tensor 51.2 NCSL 51.1 LR-Bi-LSTM 50  Sentiment analysis aims to analyze the sentiment of a sentence or a paragraph, e.g., a movie or a product review. We use Stanford Sentiment Treebank (SST) 4 for the experiments, and only focus on the fine-grained movie review sentiment classification over five classes, i.e., very negative, negative, neutral, positive and very positive. We use the standard train/dev/test sets split with 8,544/1,101/2,210 samples. Similar to Section 5.1, we employ a single sentence encoding model to obtain a sentence representation s of a movie review, then pass it into a 300D fully connected layer. Finally, a 5-unit output layer with softmax is used to calculate a probability distribution over the five classes.
In, we compare previous works with DiSAN on test accuracy. To the best of our knowledge, DiSAN improves the last best accuracy (given by CNN-Tensor) by 0.52%. Compared to tree-based models with heavy use of the prior structure, e.g., MV-RNN, RNTN and Tree-LSTM, DiSAN outperforms them by 7.32%, 6.02% and 0.72%, respectively. Additionally, DiSAN achieves better performance than CNN-based models. More recent works tend to focus on lexicon-based sentiment analysis, by exploring sentiment lexicons, negation words and intensity words. 4 https://nlp.stanford.edu/sentiment/ Nonetheless, DiSAN still outperforms these fancy models, such as NCSL (+0.62%) and LR-Bi-LSTM (+1.12%).: Fine-grained sentiment analysis accuracy vs. sentence length. The results of LSTM, Bi-LSTM and Tree-LSTM are from and the result of DiSAN is the average over five random trials.
It is also interesting to see the performance of different models on the sentences with different lengths. In, we compare LSTM, Bi-LSTM, Tree-LSTM and DiSAN on different sentence lengths. In the range of (5, 12), the length range for most movie review sentences, DiSAN significantly outperforms others. Meanwhile, DiSAN also shows impressive performance for slightly longer sentences or paragraphs in the range of (25, 38). DiSAN performs poorly when the sentence length ? 38, in which however only 3.21% of total movie review sentences lie.

Experiments on Other NLP Tasks
Multi-Genre Natural Language Inference Multi-Genre Natural Language Inference (MultiNLI) 5 dataset consists of 433k sentence pairs annotated with textual entailment information. This dataset is similar to SNLI, but it covers more genres of spoken and written text, and supports a distinctive cross-genre generalization evaluation. However, MultiNLI is a quite new dataset, and its leaderboard does not include a session for the sentence-encoding only model. Hence, we only compare DiSAN with the baselines provided at the official website. The results of DiSAN and two sentence-encoding models on the leaderboard are shown in.

Sentence Classifications
The goal of sentence classification is to correctly predict the class label of a given sentence in various scenarios. We evaluate the models on four sentence classification benchmarks of various NLP tasks, such as sentiment analysis and question-type classification. They are listed as follows. 1) CR: Customer review of various products (cameras, etc.), which is to predict whether the review is positive or negative; 2) MPQA: Opinion polarity detection subtask of the MPQA dataset; 3) SUBJ: Subjectivity dataset (Pang and Lee 2004) whose labels indicate whether each sentence is subjective or objective; 4) TREC: TREC question-type classification dataset. The experimental results of DiSAN and existing methods are shown in.  particular, we will focus primarily on the probability in forward/backward DiSA blocks (), forward/backward fusion gates F in Eq.(19), and the probability in multi-dimensional source2token self-attention block. For the first two, we desire to demonstrate the dependency at token level, but attention probability in DiSAN is defined on each feature, so we average the probabilities along the feature dimension. We select two sentences from SNLI test set as examples for this case study. Sentence 1 is Families have some dogs in front of a carousel and sentence 2 is volleyball match is in progress between ladies. shows that1) semantically important words such as nouns and verbs usually get large attention, but stop words (am, is, are, etc.) do not; 2) globally important words, e.g., volleyball, match, ladies in sentence 1 and dog, front, carousel in sentence 2, get large attention from all other words; 3) if a word is important to only some of the other words (e.g. to constitute a phrase or sense-group), it gets large attention only from these words, e.g., attention between progress, between in sentence1, and attention between families, have in sentence 2.

Case Study
This also shows that directional information can help to generate context-aware word representation with temporal order encoded. For instance, for word match in sentence 1, its forward DiSA focuses more on word volleyball, while its backward attention focuses more on progress and ladies, so the representation of word match contains the essential information of the entire sentence, and simultaneously includes the positional order information.
In addition, forward and backward DiSAs can focus on different parts of a sentence. For example, the forward one in sentence 2 pays attention to the word families, whereas the backward one focuses on the word carousel. Since forward and backward attentions are computed separately, it avoids normalization over multiple significant words to weaken their weights. Note that this is a weakness of traditional attention compared to RNN, especially for long sentences. In, we show that the gate value F in Eq.(19). The gate combines the input and output of masked self-attention. It tends to selects the input representation h instead of the output s if the corresponding weight in F is large. This shows that the gate values for meaningless words, especially stop words is small. The stop words themselves cannot contribute important information, so only their semantic relations to other words might help to understand the sentence. Hence, the gate tends to use their context features given by masked self-attention. In, we show the two multi-dimensional source2token self-attention score vectors of the same word in the two sentences, by their heatmaps. The first pair has two sentences: one is The glass bottle is big, and another is A man is pouring a glass of tea. They share the same word is glass with different meanings. The second pair has two sentences: one is The restaurant is about to close and another is A biker is close to the fountain. It can be seen that the two attention vectors for the same words are very different due to their different meanings in different contexts. This indicates that the multi-dimensional attention vector is not redundant because it can encode more information than one single score used in traditional attention and it is able to capture subtle difference of the same word in different contexts or sentences. Additionally, it can also alleviate the weakness of the attention overlong sequence, which can avoid normalization over entire sequence in traditional attention only once.

Conclusion
In this paper, we propose two novel attention mechanisms, multi-dimensional attention and directional self-attention. The multi-dimensional attention performs a feature-wise selection over the input sequence for a specific task, and the directional self-attention uses the positional masks to produce the context-aware representations with temporal information encoded. Based on these attentions, Directional Self-Attention Network (DiSAN) is proposed for sentenceencoding without any recurrent or convolutional structure. The experiment results show that DiSAN can achieve stateof-the-art inference quality and outperform existing works (LSTM, etc.) on a wide range of NLP tasks with fewer parameters and higher time efficiency.
In future work, we will explore the approaches to using the proposed attention mechanisms on more sophisticated tasks, e.g. question answering and reading comprehension, to achieve better performance on various benchmarks.