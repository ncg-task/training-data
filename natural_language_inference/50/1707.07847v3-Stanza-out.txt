title
Hyperbolic Representation Learning for Fast and Efficient Neural Question Answering
abstract
The dominant neural architectures in question answer retrieval are based on recurrent or convolutional encoders configured with complex word matching layers .
Given that recent architectural innovations are mostly new word interaction layers or attentionbased matching mechanisms , it seems to be a well - established fact that these components are mandatory for good performance .
Unfortunately , the memory and computation cost incurred by these complex mechanisms are undesirable for practical applications .
As such , this paper tackles the question of whether it is possible to achieve competitive performance with simple neural architectures .
We propose a simple but novel deep learning architecture for fast and efficient question - answer ranking and retrieval .
More specifically , our proposed model , HyperQA , is a parameter efficient neural network that outperforms other parameter intensive models such as Attentive Pooling BiLSTMs and Multi - Perspective CNNs on multiple QA benchmarks .
The novelty behind Hyper QA is a pairwise ranking objective that models the relationship between question and answer embeddings in Hyperbolic space instead of Euclidean space .
This empowers our model with a self - organizing ability and enables automatic discovery of latent hierarchies while learning embeddings of questions and answers .
Our model requires no feature engineering , no similarity matrix matching , no complicated attention mechanisms nor over-parameterized layers and yet outperforms and remains competitive to many models that have these functionalities on multiple benchmarks .
narrative
are as follows :
Firstly , representations of questions and answers are first learned via a neural encoder such as the long short - term memory ( LSTM ) network or convolutional neural network ( CNN ) .
Secondly , these representations of questions and answers are composed by an interaction function to produce an over all matching score .
The design of the interaction function between question and answer representations lives at the heart of deep learning QA research .
While it is simply possible to combine QA representations with simple feed forward neural networks or other composition functions , a huge bulk of recent work is concerned with designing novel word interaction layers that model the relationship between the words in the QA pairs .
For example , similarity matrix based matching , soft attention alignment and attentive pooling are highly popular techniques for improving the performance of neural ranking models .
Apparently , it seems to be well - established that grid - based matching is essential to good performance .
Notably , these new innovations come with trade - offs such as huge computational cost that lead to significantly longer training times and also a larger memory footprint .
Additionally , it is good to consider that the base neural encoder employed also contributes to the computational cost of these neural ranking models , e.g. , LSTM networks are known to be over-parameterized and also incur a parameter and runtime cost of quadratic scale .
It also seems to be a well - established fact that a neural encoder ( such as the LSTM , Gated Recurrent Unit ( GRU ) , CNN , etc. ) must be first selected for learning individual representations of questions and answers and is generally treated as mandatory for good performance .
In this paper , we propose an extremely simple neural ranking model for question answering that achieves highly competitive results on several benchmarks with only a fraction of the runtime and only 40K - 90 K parameters ( as opposed to millions ) .
Our neural ranking models the relationships between QA pairs in Hyperbolic space instead of Euclidean space .
Hyperbolic space is an embedding space with a constant negative curvature in which the distance towards the border is increasing exponentially .
Intuitively , this makes it suitable for learning embeddings that reflect a natural hierarchy ( e.g. , networks , text , etc. ) which we believe might benefit neural ranking models for QA .
Notably , our work is inspired by the recently incepted Poincar embeddings which demonstrates the effectiveness of inducing a structural ( hierarchical ) bias in the embedding space for improved generalization .
In our early empirical experiments , we discovered that a simple feed forward neural network trained in Hyperbolic space is capable of outperforming more sophisticated models on several standard benchmark datasets .
We believe that this can be attributed to two reasons .
Firstly , latent hierarchies are prominent in QA .
Aside from the natural hierarchy of questions and answers , conceptual hierarchies also exist .
Secondly , natural language is inherently hierarchical which can be traced to power law distributions such as Zipf 's law .
The key contributions in this paper are as follows :
We propose a new neural ranking model for ranking question answer pairs .
For the first time , our proposed model , HyperQA , performs matching of questions and answers in Hyperbolic space .
To the best of our knowledge , we are the first to model QA pairs in Hyperbolic space .
While hyperbolic geometry and embeddings have been explored in the domains of complex networks or graphs , our work is the first to investigate the suitability of this metric space for question answering .
Hyper
QA is an extremely fast and parameter efficient model that achieves very competitive results on multiple QA benchmarks such as TrecQA , WikiQA and YahooCQA .
The efficiency and speed of Hyper QA are attributed by the fact that we do not use any sophisticated neural encoder and have no complicated word interaction layer .
In fact , Hyper QA is a mere single layered neural network with only 90K parameters .
Very surprisingly , Hyper QA actually outperforms many state - of - the - art models such as Attentive Pooling BiLSTMs and Multi - Perspective CNNs .
We believe that this allows us to reconsider whether many of these complex word interaction layers are really necessary for good performance .
We conduct extensive qualitative analysis of both the learned QA embeddings and word embeddings .
We discover several interesting properties of QA embeddings in Hyperbolic space .
Due to its compositional nature , we find that our model learns to self - organize not only at the QA level but also at the word - level .
Our qualitative studies enable us to gain a better intuition pertaining to the good performance of our model .
RELATED WORK
Many prior works have established the fact that there are mainly two key ingredients to a powerful neural ranking model .
First , an effective neural encoder and second , an expressive word interaction layer .
The first ingredient is often treated as a given , i.e. , the top performing models always use a neural encoder such as the CNN or LSTM .
In fact , many top performing models adopt convolutional encoders for sentence representation .
The usage of recurrent models is also notable .
The key component in which many recent models differ at is at the interaction layer .
Early works often combined QA embeddings ' as it is ' , i.e. , representations are learned first and then combined .
For example , Yu et al .
used CNN representations as feature inputs to a logistic regression model .
The end - to - end CNN - based model of Severyn and Moschitti combines the CNN encoded representations of question and answer using a multi -layered perceptron ( MLP ) .
Recently , a myriad of composition functions have been proposed as well , e.g. , tensor layers in Qiu et al .
and holographic layers in Tay et al ..
It has been recently fashionable to model the relationships between question and answer using similarity matrices .
Intuitively , this enables more fine - grained matching across words in question and answer sentences .
The Multi- Perspective CNN ( MP - CNN ) compared two sentences via a wide diversity of pooling functions and filter widths aiming to capture ' multi-perspectives ' between two sentences .
The attention based neural matching ( a NMM ) model of Yang et al. performed soft - attention alignment by first measuring the pairwise word similarity between each word in question and answer .
The attentive pooling models of Santos et al. ( AP - BiLSTM and AP - CNN ) utilized this soft - attention alignment to learn weighted representations of question and answer thatare dependent of each other .
Zhang et al. extended AP - CNN to 3D tensor - based attentive pooling ( AI - CNN ) .
A recent work , the Cross Temporal Recurrent Network ( CTRN ) proposed a pairwise gating mechanism for joint learning of QA pairs .
Unfortunately , these models actually introduce a prohibitive computational cost to the model usually for a very marginal performance gain .
Notably , it is easy to see that similarity matrix based matching incurs a computational cost of quadratic scale .
Representation ability such as dimension size of word or CNN / RNN embeddings are naturally also quite restricted , i.e. , increasing any of these dimensions can cause computation or memory requirements to explode .
Moreover , it is not uncommon for models such as AI - CNN or AP - BiLSTM to spend more than 30 minutes on a single epoch on QA datasets thatare only medium sized .
Let us not forget that these models still have to be extensively tuned which aggravates the impracticality problem posed by some of these models .
In this paper , we seek a new paradigm for neural ranking for QA .
While many recent works try to out - stack each other with new layers , we strip down our network instead .
Our work is inspired by the very recent Poincar embeddings which demonstrates the superiority and efficiency of generalization in Hyperbolic space .
Moreover , this alleviates many overfitting and complexity issues that Euclidean embeddings might face especially if the data has intrinsic hierarchical structure .
It is good to note that power - law distributions , such as Zipf 's law , have been known to be from innate hierarchical structure .
Specifically , the defining characteristic of Hyperbolic space is a much quicker expansion relative to that of Euclidean space which makes naturally equipped for modeling hierarchical structure .
The concept of Hyperbolic spaces has been applied to domains such as complex network modeling , social networks and geographic routing .
There are several key geometric intuitions regarding Hyperbolic spaces .
Firstly , the concept of distance and are a is warped in Hyperbolic spaces .
Specifically , each tile in ( a ) is of equal are a in Hyperbolic space but diminishes towards zero in Euclidean space towards the boundary .
Secondly , Hyperbolic spaces are conformal , i.e. , angles in Hyperbolic spaces and Euclidean spaces are identical .
In ( b ) , the arcs on the curve are parallel lines thatare orthogonal to the boundary .
Finally , hyperbolic spaces can be regarded as larger spaces relative to Euclidean spaces due to the fact that the concept of relative distance can be expressed much better , i.e. , not only does the distance between two vectors encode information but also where a vector is placed in Hyperbolic space .
This enables efficient representation learning .
In Nickel et al. , the authors applied the hyperbolic distance ( specifically , the Poincar distance ) to model taxonomic entities and graph nodes .
Notably , our work , to the best of our knowledge , is the only work that learns QA embeddings in Hyperbolic space .
Moreover , questions and answers introduce an interesting layer of complexity to the problem since QA embeddings are in fact compositions of their constituent word embeddings .
On the other hand , nodes in a graph and taxonomic entities in are already at it s most abstract form , i.e. , symbolic objects .
As such , we believe it would be interesting to investigate the impacts of QA in Hyperbolic space in lieu of the added compositional nature .
OUR PROPOSED APPROACH
This section outlines the over all architecture of our proposed model .
Similar to many neural ranking models for QA , our network has ' two ' sides with shared parameters , i.e. , one for question and another for answer .
However , since we optimize for a pairwise ranking loss , the model takes in a positive ( correct ) answer and a negative ( wrong ) answer and aims to maximize the margin between the scores of the correct QA pair and the negative QA pair .
depicts the over all model architecture .
Embedding Layer
Our model accepts three sequences as an input , i.e. , the question ( denoted as q ) , the correct answer ( denoted as a ) and a randomly sampled corrupted answer ( denoted as a ? ) .
Each sequence consists of M words where M q and M a are predefined maximum sequence lengths for questions and answers respectively .
Each word is represented as a one - hot vector ( representing a word in the vocabulary ) .
As such , this layer is a look - up layer that converts each word into a low - dimensional vector by indexing onto the word embedding matrix .
In our implementation , we initialize this layer with pretrained word embeddings .
Note that this layer is not updated during training .
Instead , we utilize a projection layer that learns a task - specific projection of the embeddings .
Projection Layer
In order to learn a task - specific representation for each word , we utilize a projection layer .
The projection layer is essentially a single layered neural network that is applied to each word in all three sequences .
Learning QA
Representations
In order to learn question and answer representations , we simply take the sum of all word embeddings in the sequence .
where * = {q , a , a ? }.
M is the predefined max sequence length ( specific to question and answer ) and
embeddings of the sequence .
This is essentially the neural bagof - words ( NBoW ) representation .
Unlike popular neural encoders such as LSTM or CNN , the NBOW representation does not add any parameters and is much more efficient .
Additionally , we constrain the question and answer embeddings to the unit ball before passing to the next layer , i.e. , ?y * ? ?
1 . This is easily done via y * = y * ?y * ? when ?y * ? >
1 . Note that this projection of QA embeddings onto the unit ball is mandatory and absolutely crucial for Hyper QA to even work .
Hyperbolic Representations of QA Pairs
Neural ranking models are mainly characterized by the interaction function between question and answer representations .
In our work , we mainly adopt the hyperbolic 1 distance function to model the relationships between questions and answers .
Formally , let
be the open d-dimensional unit ball , our model corresponds to the Riemannian manifold ( B d , ? x ) and is equipped with the Riemannian metric tensor given as follows :
where ?
E is the Euclidean metric tensor .
The hyperbolic distance function between question and answer is defined as :
where ?.?
denotes the Euclidean norm and q , a ?
Rd are the question and answer embeddings respectively .
Note that arcosh is the inverse hyperbolic cosine function , i.e. , arcoshx = ln ( x + ( x 2 ? 1 ) ) .
Notably , d ( q , a ) changes smoothly with respect to the position of q and a which enables the automatic discovery of latent hierarchies .
As mentioned earlier , the distance increases exponentially as the norm of the vectors approaches 1 . As such , the latent hierarchies of QA embeddings are captured through the norm of the vectors .
From a geometric perspective , the origin can be seen as the root of a tree that branches out towards the boundaries of the hyperbolic ball .
This self - organizing ability of the hyperbolic distance is visually and qualitatively analyzed in later sections .
Gradient Derivation .
Amongst the other models of Hyperbolic geometry , the hyperbolic Poincar distance is differentiable .
Let
The partial derivate w.r.t to ?
is defined as :
Similarity Scoring Layer
Finally , we pass the hyperbolic distance through a linear transformation described as follows :
where w f ?
R 1 and bf ?
R 1 are scalar parameters of this layer .
The performance of this layer is empirically motivated by its performance and was selected amongst other variants such as exp ( ? d ( q , a ) ) , non-linear activations such as sigmoid function or the raw hyperbolic distance .
Optimization and Learning
This section describes the optimization and learning process of Hyper QA .
Our model learns via a pairwise ranking loss , which is well suited for metric - based learning algorithms .
3.6.1 Pairwise Hinge Loss .
Our network minimizes the pairwise hinge loss which is defined as follows :
where ?
q is the set of all QA pairs for question q , s ( q , a ) is the score between q and a , and ?
is the margin which controls the extent of discrimination between positive QA pairs and corrupted QA pairs .
The adoption of the pairwise hinge loss is motivated by the good empirical results demonstrated in Rao et al ..
Additionally , we also adopt the mix sampling strategy for sampling negative samples as described in their work .
3.6.2 Gradient Conversion .
Since our network learns in Hyperbolic space , parameters have to be learned via stochastic Riemannian optimization methods such as RSGD .
where ? ?
t denotes a retraction onto B at ? . ?
is the learning rate and ?
R ?(? t ) is the Riemannian gradient with respect to ? t .
Fortunately , the Riemannian gradient can be easily derived from the Euclidean gradient in this case .
In order to do so , we can simply scale the Euclidean gradient by the inverse of the metric tensor ? ? 1 ? .
Overall , the final gradients used to update the parameters are :
Due to the lack of space , we refer interested readers to for more details .
For practical purposes , we simply utilize the automatic gradient feature of Tensor Flow but convert the gradients with Equation before updating the parameters .
EXPERIMENTS
This section describes our empirical evaluation and its results .
Datasets
In the spirit of experimental rigor , we conduct our empirical evaluation based on four popular and well - studied benchmark datasets for question answering .
YahooCQA
- This is a benchmark dataset for communitybased question answering that was collected from Yahoo Answers .
In this dataset , the answer lengths are relatively longer than TrecQA and Wiki QA .
Therefore , we filtered answers that have more than 50 words and less than 5 characters .
The train - dev - test splits for this dataset are provided by . WikiQA - This is a recently popular benchmark dataset for open - domain question answering based on factual questions from Wikipedia and Bing search logs . SemEvalCQA
- This is a well - studied benchmark dataset from SemEval - 2016 Task 3 Subtask A ( CQA ) .
This is are al world dataset obtained from Qatar Living Forums .
In this dataset , there are ten answers in each question ' thread ' which are marked as ' Good ' , ' Potentially Useful ' or ''Bad ' .
We treat ' Good ' as positive and anything else as negative labels . TrecQA
- This is the benchmark dataset provided by Wang et al ..
This dataset was collected from TREC QA tracks 8 - 13 and is comprised of factoid based questions which mainly answer the ' who' , ' what ' , ' where ' , ' when ' and ' why ' types of questions .
There are two versions , namely clean and raw , as noted by which we evaluate our models on .
Statistics pertaining to each dataset is given in .
Compared Baselines
In this section , we introduce the baselines for comparison .
YahooCQA
- The key competitors of this dataset are the Neural Tensor LSTM ( NTN - LSTM ) and HD - LSTM from Tay et al.
along with their implementation of the Convolutional Neural Tensor Network , vanilla CNN model , and the Okapi BM - 25 benchmark .
Additionally , we also report our own implementations of QA - BiLSTM , QA - CNN , AP - BiLSTM and AP - CNN on this dataset based on our experimental setup . WikiQA
- The key competitors of this dataset are the Paragraph Vector ( PV ) and PV + Cnt models of Le and Mikolv , CNN + Cnt model from Yu et al. and LCLR ( Yih et al . ) .
These three baselines are reported in the original Wik - iQA paper .
Additionally and due to longstanding nature of this dataset , there have been a huge number of works based on traditional feature engineering approaches which we also report .
For the clean version of this dataset , we also compare with AP - CNN and QA - BiLSTM / CNN .
Since the training splits are standard , we are able to directly report the results from the original papers .
Evaluation Protocol
This section describes the key evaluation protocol / metrics and implementation details of our experiments .
Metrics .
We adopt a dataset specific evaluation protocol in which we follow the prior work in their evaluation protocols .
Specifically , TrecQA and WikiQA adopt the Mean Reciprocal Rank ( MRR ) and MAP ( Mean Average Precision ) metrics which are commonplace in IR research .
On the other hand , YahooCQA and Se - m EvalCQA evaluate on MAP and Precision@1 ( abbreviated P@1 ) which is determined based on whether the top predicted answer is the ground truth .
For all competitor methods , we report the performance results from the original paper .
Training Time & Parameter
Size .
Additionally , we report the parameter size and runtime ( seconds per epoch ) of selected models .
We selectively re-implement some of the key competitors with the best performance and benchmark their training time on our machine / GPU ( a single Nvidia GTX1070 ) .
For reporting the parameter size and training time , we try our best to follow the hyperparameters stated in the original papers .
As such , the same model can have different training time and parameter size on different datasets .
Hyperparameters .
Hyper QA is implemented in Tensor - Flow .
We adopt the AdaGrad optimizer with initial learning rate tuned amongst { 0.2 , 0.1 , 0.05 , 0.01 } .
The batch size is tuned amongst { 50 , 100 , 200 } .
Models are trained for 25 epochs and the model parameters are saved each time the performance on the validation set is topped .
The dimension of the projection layer is tuned amongst { 100 , 200 , 300 , 400 } .
L2 regularization is tuned amongst { 0.001 , 0.0001 , 0.00001 }.
The negative sampling rate is tuned from 2 to 8 .
Finally , the margin ?
is tuned amongst { 1 , 2 , 5 , 10 , 20 }.
For TrecQA , Wiki QA and YahooCQA , we initialize the embedding layer with GloVe and use the version with d = 300 and trained on 840 billion words .
For SemEvalCQA , we train our own Skipgram model using the unannotated corpus provided by the task .
In this case , the embedding dimension is tuned amongst { 100 , 200 , 300 } .
Embeddings are not updated during training .
For the SemEvalCQA dataset , we concatenated the raw QA embeddings before passing into the final layer since we found that it improves performance .
Results and Analysis
In this section , we present our empirical results on all datasets .
For all reported results , the best result is in boldface and the second best is underlined .
reports the experimental results on SemEvalCQA .
Our proposed approach achieves highly competitive performance on this dataset .
Specifically , we have obtained the best P@1 performance over all , outperforming the state - of - the - art AI - CNN model by 3 % in terms of P@1 .
The performance of our model on MAP is marginally short from the best performing model .
Notably , AI - CNN has benefited from external handcrafted features .
As such , comparing AI - CNN ( w/ o features ) with Hyper QA shows that our proposed model is a superior neural ranking model .
Next , we draw the readers attention to the time cost of AI - CNN .
The training time per epoch is ?
3250s per epoch which is about 300 times longer than our model .
AI - CNN is extremely cost prohibitive , i.e. , attentive pooling is already very expensive and yet AI - CNN performs 3 D attentive pooling .
Evidently , its performance can be easily superseded in a much smaller training time and parameter cost .
This raises questions about the effectiveness of the 3D attentive pooling mechanism .
reports the results on TrecQA ( raw ) .
Hyper QA achieves very competitive performance on both MAP and MRR metrics .
Specifically , Hyper QA outperforms the basic CNN model of ( S&M ) by 2 % ? 3 % in terms of MAP / MRR .
Moreover , the CNN ( S&M ) model uses handcrafted features which Hyper QA does not require .
Similarly , the a NMM model and HD - LSTM also benefit from additional features but are outperformed by Hyper QA .
Hyper QA also outperforms MP - CNN but is around 10 times faster and has 100 times less parameters .
MP - CNN consists of a huge number of filter banks and utilizes heavy parameterization to match multiple perspectives of questions and answers .
On the other hand , our proposed HyperQA is merely a single layered neural network with 90K parameters and yet outperforms MP - CNN .
Similarly , reports the results on TrecQA ( clean ) .
Similarly , Hyper QA also outperforms MP - CNN , AP - CNN and QA - CNN .
On both datasets , the performance of HyperQA is competitive to Rank MP - CNN .
Experimental Results on WikiQA .
Overall analysis .
Overall , we summarize the key findings of our experiments .
It is possible to achieve very competitive performance with small parameterization , and no word matching or interaction layers .
Hyper QA outperforms complex models such as MP - CNN and AP - BiLSTM on multiple datasets .
The relative performance of HyperQA is significantly better on large datasets , e.g. , YahooCQA ( 253K training pairs ) as opposed to smaller ones like WikiQA ( 5.9 K training pairs ) .
We believe that this is due to the fact that Hyperbolic space is seemingly larger than Euclidean space . Hyper
QA is extremely fast and trains at 10 ? 20 times faster than complex models like MP - CNN .
Note that if CPUs are used instead of GPUs ( which speed convolutions up significantly ) , this disparity would be significantly larger . In this section , we study the effects of the QA embedding size on performance .
describes the relationship between QA embedding size ( d ) and MAP on the WikiQA dataset .
Additionally , we include a simple baseline ( Cosine QA ) which is exactly the same as Hyper QA but uses cosine similarity instead of hyperbolic distance .
The MAP scores of three other reported models ( MP - CNN , CNN - Cnt and PV - Cnt ) are also reported for reference .
Firstly , we notice the disparity between Hyper QA and Cosine QA in terms of performance .
This is also observed across other datasets but is not reported due to the lack of space .
While Cosine
QA maintains a stable performance throughout embedding size , the performance of Hyper QA rapidly improves at d > 150 . In fact , the performance of Hyper QA at d = 150 ( 45 K parameters ) is already similar to the Multi - Perspective CNN which contains 10 million parameters .
Moreover , the performance of Hyper QA outperforms MP - CNN with d = 250-300 .
Effects of QA Embedding Size
DISCUSSION AND ANALYSIS
This section delves into qualitative analysis of our model and aims to investigate the following research questions :
( 1 ) RQ1 : Is there any hierarchical structure learned in the QA embeddings ?
How are QA embeddings organized in the final embedding space of Hyper QA ?
( 2 ) RQ2 : What are the impacts of embedding compositional embeddings in hyperbolic space ?
Is there an impact on the constituent word embeddings ?
( 3 ) RQ3 : Are we able to derive any insight about how word interaction and matching happens in Hyper QA ?.
QA embeddings are extracted from the network as discussed in Section 3.3 .
We observe that question embeddings form a ' sphere ' over answer embeddings .
Contrastingly , this is not exhibited when the cosine similarity is used as shown in ( b ) .
It is important to note that these are embeddings from the test set which have not been trained and therefore the model is not explicitly told whether a particular textual input is a question or answer .
This demonstrates the innate ability of Hyper QA to self - organize and learn latent hierarchies which directly answers RQ1 .
Additionally , ( a ) shows a histogram of the vector norms of question and answer embeddings .
We can clearly see that questions in general have a higher vector norm 2 and are at a different hierarchical level from answers .
In order to further understand what the model is doing , we delve deeper into the visualization at word - level .
shows some examples of words at each hierarchical level of the sphere on TrecQA .
Recall that the vector norms 3 allow us to infer the distance of the word embedding from the origin which depicts its hierarchical level in our context .
Interestingly , we found that HyperQA exhibits self - organizing ability even at word - level .
Specifically , we notice that the words closer to the origin are common words such as ' to ' , ' and ' which do not have much semantic values for QA problems .
At the middle of the hierarchy (?w ? ? 3 ) , we notice that there are more verbs .
Finally , as we move towards the surface of the ' sphere ' , the words become rarer and reflect more domain - specific words such as ' ebay ' and ' spielberg ' .
Moreover , we also found many names and proper nouns occurring at this hierarchical level .
Additionally , we also observe that words such as ' where ' or ' what ' have relatively high vector norms and located quite high up in the hierarchy .
This is in concert with which shows the question embeddings form a sphere around the answer embeddings .
At last , we parsed QA pairs word - by - word according to hierarchical level ( based on their vector norm ) .
reports the outcome of this experiment where H 1 ?
H 5 are hierarchical levels based on vector norms .
First , we find that questions often start with the over all context and drill down into more specific query words .
Take the first sample in for example , it begins at atop level with ' burger king ' and then drills down progressively to ' what is gross sales ? ' .
Similarly in the second example , it begins with ' florence nightingale ' and drills down to ' famous ' at H3 in which a match is being found with ' nursing ' in the same hierarchical level .
Overall , based on our qualitative analysis , we observe that , Hyper QA builds two hierarchical structures at the word - level ( in vector space ) towards the middle which strongly facilitates word - level matching .
Note that word embeddings are not constrained to ?x ?
< 1 .
Analysis of QA
Embeddings
Analysis of Word Embeddings
Pertaining to answers , it seems like the model builds a hierarchy by splitting on conjunctive words ( ' and ' ) , i.e. , the root node of the tree starts by conjunctive words at splits sentences into semantic phrases .
Overall , depicts our key intuitions regarding the inner workings of Hyper QA which explains both RQ2 and RQ3 .
This is also supported by ( b ) which shows the majority of the word norms are clustered with ?w ? ?
3 . This would be reasonable considering that the leaf nodes of both question and answer hierarchies would reside in the middle .
Answer Question
Starts with the main context and branches to more specific query words .
Splits root node by
CONCLUSION
We proposed a new neural ranking model for question answering .
Our proposed Hyper QA achieves very competitive performance on four well - studied benchmark datasets .
Our model is light - weight , fast and efficient , outperforming many state - of - the - art models with complex word interaction layers , attentive mechanisms or rich neural encoders .
Our model only has 40K - 90 K parameters as opposed to millions of parameters which plague many competitor models .
Moreover , we derive qualitative insights pertaining to our model which enable us to further understand its inner workings .
Finally , we observe that the superior generalization of our model ( despite small parameters ) can be attributed to self - organizing properties of not only question and answer embeddings but also word embeddings .
