title
Enriching Pre-trained Language Model with Entity Information for Relation Classification
abstract
Relation classification is an important NLP task to extract relations between entities .
The state - of - the - art methods for relation classification are primarily based on Convolutional or Recurrent Neural Networks .
Recently , the pre-trained BERT model achieves very successful results in many NLP classification / sequence labeling tasks .
Relation classification differs from those tasks in that it relies on information of both the sentence and the two target entities .
In this paper , we propose a model that both leverages the pretrained BERT language model and incorporates information from the target entities to tackle the relation classification task .
We locate the target entities and transfer the information through the pre-trained architecture and incorporate the corresponding encoding of the two entities .
We achieve significant improvement over the state - of - the - art method on the SemEval - 2010 task 8 relational dataset .
Introduction
The task of relation classification is to predict semantic relations between pairs of nominals .
Given a sequence of text ( usually a sentence ) sand a pair of nominals e 1 and e 2 , the objective is to identify the relation between e 1 and e 2 .
It is an important NLP task which is normally used as an intermediate step in variety of NLP applications .
The following example shows the Component - Whole relation between the nominals " kitchen " and " house " :
" The [ kitchen ] e 1 is the last renovated part of the [ house ] e 1 . "
Recently , deep neural networks have applied to relation classification .
These methods usually use some features derived from lexical resources such as Word - Net or NLP tools such as dependency parsers and named entity recognizers ( NER ) .
Language model pre-training has been shown to be effective for improving many natural language processing tasks .
The pretrained model BERT proposed by has especially significant impact .
It has been applied to multiple NLP tasks and obtains new state - of - theart results on eleven tasks .
The tasks that BERT has been applied to are typically modeled as classification problems and sequence labeling problems .
It has also been applied to the SQuAD question answering problem , in which the objective is to find the starting point and ending point of an answer span .
As far as we know , the pretrained BERT model has not been applied to relation classification , which relies not only on the information of the whole sentence but also on the information of the specific target entities .
In this paper , we apply the pretrained BERT model for relation classification .
We insert special tokens before and after the target entities before feeding the text to BERT for fine - tuning , in order to identify the locations of the two target entities and transfer the information into the BERT model .
We then locate the positions of the two target entities in the output embedding from BERT model .
We use their embeddings as well as the sentence encoding ( embedding of the special first token in the setting of BERT ) as the input to a multi - layer neural network for classification .
By this way , it captures both the semantics of the sentence and the two target entities to better fit the relation classification task .
Our contributions are as follows :
( 1 ) We put forward an innovative approach to incorporate entity - level information into the pretrained language model for relation classification .
( 2 ) We achieve the new state - of - the - art for the relation classification task .
Related Work
There has been some work with deep learning methods for relation classification , such as MVRNN model ) applies a recursive neural network ( RNN ) to relation classification .
They assign a matrix - vector representation to every node in a parse tree and compute the representation for the complete sentence from bottom up according to the syntactic structure of the parse tree .
propose a CNN model by incorporating both word embeddings and position features as input .
Then they concatenate lexical features and the output from CNN into a single vector and feed them into a softmax layer for prediction .
propose a Factor - based Compositional Embedding Model ( FCM ) by constructing sentencelevel and substructure embeddings from word embeddings , through dependency trees and named entities .
( Santos et al. , 2015 ) tackle the relation classification task by ranking with a convolutional neural network named CR - CNN .
Their loss function is based on pairwise ranking .
In our work , we take advantage of a pre-trained language model for the relation classification task , without relying on CNN or RNN architecutures . ) utilize a CNN encoder in conjunction with a sentence representation that weights the words by attention between the target entities and the words in the sentence to perform relation classification .
propose a convolutional neural network architecture with two levels of attention in order to catch the patterns in heterogeneous contexts to classify relations .
develop an end - to - end recurrent neural model which incorporates an entity - aware attention mechanism with a latent entity typing for relation classification .
There are some related work on the relation extraction based on distant supervision , for example , .
The difference between relation classification on regular data and on distantly supervised data is that the latter may contain a large number of noisy labels .
In this paper , we focus on the regular relation classification problem , without noisy labels .
Methodology
Pre-trained Model BERT
The pre-trained BERT model is a multi - layer bidirectional Transformer encoder .
The design of input representation of BERT is to be able to represent both a single text sentence and a pair of text sentences in one token sequence .
The input representation of each token is constructed by the summation of the corresponding token , segment and position embeddings .
'' is appended to the beginning of each sequence as the first token of the sequence .
The final hidden state from the Transformer output corresponding to the first token is used as the sentence representation for classification tasks .
In case there are two sentences in a task , ' [ SEP ] ' is used to separate the two sentences .
BERT pre-trains the model parameters by using a pre-training objective : the masked language model ( MLM ) , which randomly masks some of the tokens from the input , and set the optimization objective to predict the original vocabulary id of the masked word according to its context .
Unlike left - to - right language model pre-training , the MLM objective can help a state output to utilize both the left and the right context , which allows a pre-training system to apply a deep bidirectional Transformer .
Besides the masked language model , BERT also trains a " next sentence prediction " task that jointly pre-trains text - pair representations .
shows the architecture of our approach .
Model Architecture
For a sentence s with two target entities e 1 and e 2 , to make the BERT module capture the location information of the two entities , at both the beginning and end of the first entity , we insert a special token ' $ ' , and at both the beginning and end of the second entity , we insert a special token '# ' .
We also add '' to the beginning of each sentence .
For example , after insertion of the special separate tokens , for a sentence with target entities " kitchen " and " house " will become to :
" [ CLS ]
The $ kitchen $ is the last renovated part of the # house # . " :
The model architecture .
Given a sentence s with entity e 1 and e 2 , suppose its final hidden state output from BERT module is H . Suppose vectors H i to H j are the final hidden state vectors from BERT for entity e 1 , and H k to H mare the final hidden state vectors from BERT for entity e 2 .
We apply the average operation to get a vector representation for each of the two target entities .
Then after an activation operation ( i.e. tanh ) , we add a fully connected layer to each of the two vectors , and the output fore 1 and e 2 are H 1 and H 2 respectively .
This process can be mathematically formalized as Equation .
We make W 1 and W 2 , b 1 and b 2 share the same parameters .
In other words , we set W 1 = W 2 , b 1 = b 2 .
For the final hidden state vector of the first token ( i.e. ' [ CLS ] ' ) , we also add an activation operation and a fully connected layer , which is formally expressed as :
Matrices W 0 , W 1 , W 2 have the same dimensions , i.e. W 0 ?
R dd , W 1 ?
R dd , W 2 ?
R dd , where d is the hidden state size from BERT .
We concatenate H 0 , H 1 , H 2 and then add a fully connected layer and a softmax layer , which can be expressed as following :
where W 3 ? R L3d ( L is the number of relation types ) , and p is the probability output .
In Equations ( 1 ) , ( 2 ) , ( 3 ) , b 0 , b 1 , b 2 , b 3 are bias vectors .
We use cross entropy as the loss function .
We apply dropout before each fully connected layer during training .
We call our approach as R - BERT .
Experiments
Dataset and Evaluation Metric
We use the SemEval - 2010 Task 8 dataset in our experiments .
The dataset contains nine semantic relation types and one artificial relation type Other , which means that the relation does not belong to any of the nine relation types .
The nine relation types are Cause - Effect , Component - Whole , Content - Container , Entity - Destination , Entity - Origin , Instrument - Agency , Member - Collection , Message - Topic and Product - Producer .
The dataset contains 10,717 sentences , with each containing two nominals e 1 and e 2 , and the corresponding relation type in the sentence .
The relation is directional , which means that Component - Whole ( e1 , e 2 ) is different from Component - Whole ( e 2 , e 1 ) .
The dataset has already been partitioned into 8,000 training instances and 2,717 test instances .
We evaluate our solution by using the SemEval - 2010 Task 8 official scorer script .
It computes the macro-averaged F1 - scores for the nine actual relations ( excluding Other ) and considers directionality .
Parameter Settings
Table shows the major parameters used in our experiments .
We add dropout before each add - on layer .
For the pre-trained BERT model , we use the uncased basic model .
For the parameters of the pre-trained BERT model , please refer to for details .
Comparison with other
Methods
We compare our method , R - BERT , against results by multiple methods recently published for the SemEval - 2010 Task 8 dataset , including SVM , RNN , MVRNN , CNN + Softmax , FCM , CR - CNN , Attention - CNN , Entity Attention Bi-LSTM .
The SVM method by uses a rich feature set in a traditional way , which was the best result during the SemEval - 2010 task 8 competition .
Details of all other methods are briefly reviewed in Section 2 . reports the results .
We can see that R - BERT significantly beats all the baseline methods .
The MACRO F1 value of R - BERT is 89. 25 , which is much better than the previous best solution on this dataset .
Ablation Studies
Effect of Model Components
We have demonstrated the strong empirical results based on the proposed approach .
We further want to understand the specific contributions by the components besides the pre-trained BERT component .
For this purpose , we create three more configurations .
The first configuration is to discard the special separate tokens ( i.e. ' $ ' and ' # ') around the two SVM 82.2 RNN 77.6 MVRNN 82.4
CNN+ Softmax 82.7 FCM 83.0 84.1
CR
Attention CNN 85.9
Att-Pooling-CNN 88.0
Entity Attention Bi-LSTM 85.2 R- BERT 89.25
entities in the sentence and discard the hidden vector output of the two entities from concatenating with the hidden vector output of the sentence .
In other words , we add ' [ CLS ] ' at the beginning of the sentence and feed the sentence with the two entities into the BERT module , and use the first output vector for classification .
We label this method as BERT - NO - SEP - NO - ENT .
The second configuration is to discard the special separate tokens ( i.e. ' $ ' and ' # ' ) around the two entities in the sentence , but keep the hidden vector output of the two entities in concatenation for classification .
We label this method as BERT - NO - SEP .
The third configuration is to discard the hidden vector output of the two entities from concatenation for classification , but keep the special separate tokens .
We label this method as BERT - NO - ENT .
reports the results of the ablation study with the above three configurations .
We observe that the three methods all perform worse than R - BERT .
Of the methods , BERT - NO - SEP - NO - ENT performs worst , with its F1 8.16 absolute points worse than R - BERT .
This ablation study demonstrates that both the special separate tokens and the hidden entity vectors make important contributions to our approach .
In relation classification , the relation label is de-pendent on both the semantics of the sentence and the two target entities .
BERT without special separate tokens can not locate the target entities and lose this key information .
The reason why the special separate tokens help to improve the accuracy is that they identify the locations of the two target entities and transfer the information into the BERT model , which make the BERT output contain the location information of the two entities .
On the other hand , incorporating the output of the target entity vectors further enriches the information and helps to make more accurate prediction .
Conclusions
In this paper , we develop an approach for relation classification by enriching the pre-trained BERT model with entity information .
We add special separate tokens to each target entity pair and utilize the sentence vector as well as target entity representations for classification .
We conduct experiments on the SemEval - 2010 benchmark dataset and our results significantly outperform the stateof - the - art methods .
One possible future work is to extend the model to apply to distant supervision .
