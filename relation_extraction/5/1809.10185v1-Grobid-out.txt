title
Graph Convolution over Pruned Dependency Trees Improves Relation Extraction
abstract
Dependency trees help relation extraction models capture long-range relations between words. However, existing dependency-based models either neglect crucial information (e.g., negation) by pruning the dependency trees too aggressively, or are computationally inefficient because it is difficult to parallelize over different tree structures. We propose an extension of graph convolutional networks that is tailored for relation extraction, which pools information over arbitrary dependency structures efficiently in parallel. To incorporate relevant information while maximally removing irrelevant content, we further apply a novel pruning strategy to the input trees by keeping words immediately around the shortest path between the two entities among which a relation might hold. The resulting model achieves state-of-the-art performance on the large-scale TACRED dataset, outperforming existing sequence and dependency-based neural models. We also show through detailed analysis that this model has complementary strengths to sequence models, and combining them further improves the state of the art. * Equal contribution. The order of authorship was decided by a tossed coin.
Introduction
Relation extraction involves discerning whether a relation exists between two entities in a sentence (often termed subject and object, respectively). Successful relation extraction is the cornerstone of applications requiring relational understanding of unstructured text on a large scale, such as question answering, knowledge base population, and biomedical knowledge discovery.
Models making use of dependency parses of the input sentences, or dependency-based models,: An example modified from the TAC KBP challenge corpus. A subtree of the original UD dependency tree between the subject ("he") and object ("Mike Cane") is also shown, where the shortest dependency path between the entities is highlighted in bold. Note that negation ("not") is off the dependency path.
have proven to be very effective in relation extraction, because they capture long-range syntactic relations thatare obscure from the surface form alone (e.g., when long clauses or complex scoping are present). Traditional feature-based models are able to represent dependency information by featurizing dependency trees as overlapping paths along the trees. However, these models face the challenge of sparse feature spaces and are brittle to lexical variations. More recent neural models address this problem with distributed representations built from their computation graphs formed along parse trees. One common approach to leverage dependency information is to perform bottom-up or top-down computation along the parse tree or the subtree below the lowest common ancestor (LCA) of the entities. Another popular approach, inspired by, is to reduce the parse tree to the shortest dependency path between the entities. However, these models suffer from several drawbacks. Neural models operating directly on parse trees are usually difficult to parallelize and thus computationally inefficient, because aligning trees for efficient batch training is usually nontrivial. Models based on the shortest dependency path between the subject and object are computationally more efficient, but this simplifying assumption has major limitations as well. shows a real-world example where crucial information (i.e., negation) would be excluded when the model is restricted to only considering the dependency path.
In this work, we propose a novel extension of the graph convolutional network) that is tailored for relation extraction. Our model encodes the dependency structure over the input sentence with efficient graph convolution operations, then extracts entity-centric representations to make robust relation predictions. We also apply a novel path-centric pruning technique to remove irrelevant information from the tree while maximally keeping relevant content, which further improves the performance of several dependencybased models including ours. We test our model on the popular SemEval 2010 Task 8 dataset and the more recent, larger TAC-RED dataset. On both datasets, our model not only outperforms existing dependency-based neural models by a significant margin when combined with the new pruning technique, but also achieves a 10-100x speedup over existing tree-based models. On TACRED, our model further achieves the state-of-the-art performance, surpassing a competitive neural sequence model baseline. This model also exhibits complementary strengths to sequence models on TACRED, and combining these two model types through simple prediction interpolation further improves the state of the art.
To recap, our main contributions are: (i) we propose a neural model for relation extraction based on graph convolutional networks, which allows it to efficiently pool information over arbitrary dependency structures; (ii) we present a new pathcentric pruning technique to help dependencybased models maximally remove irrelevant information without damaging crucial content to improve their robustness; (iii) we present detailed analysis on the model and the pruning technique, and show that dependency-based models have complementary strengths with sequence models.

Models
In this section, we first describe graph convolutional networks (GCNs) over dependency tree structures, and then we introduce an architecture that uses GCNs at its core for relation extraction.

Graph Convolutional Networks over Dependency Trees
The graph convolutional network is an adaptation of the convolutional neural network for encoding graphs. Given a graph with n nodes, we can represent the graph structure with an n ? n adjacency matrix A where A ij = 1 if there is an edge going from node i to node j. In an L-layer GCN, if we denote by h (l?1) i the input vector and h (l) i the output vector of node i at the l-th layer, a graph convolution operation can be written as
where W (l) is a linear transformation, b (l) a bias term, and ? a nonlinear function (e.g., ReLU). Intuitively, during each graph convolution, each node gathers and summarizes information from its neighboring nodes in the graph.
We adapt the graph convolution operation to model dependency trees by converting each tree into its corresponding adjacency matrix A, where A ij = 1 if there is a dependency edge between tokens i and j. However, naively applying the graph convolution operation in Equation (1) could lead to node representations with drastically different magnitudes, since the degree of a token varies a lot. This could bias our sentence representation towards favoring high-degree nodes regardless of the information carried in the node (see details in Section 2.2). Furthermore, the information in h (l?1) i is never carried over to hi , since nodes never connect to themselves in a dependency tree.
We resolve these issues by normalizing the activations in the graph convolution before feeding it through the nonlinearity, and adding self-loops to each node in the graph:
where? = A + I with I being then ? n identity matrix, and d i = n j=1? ij is the degree of token i in the resulting graph.: Relation extraction with a graph convolutional network. The left side shows the over all architecture, while on the right side, we only show the detailed graph convolution computation for the word "relative" for clarity. A full unlabeled dependency parse of the sentence is also provided for reference.
Stacking this operation over L layers gives us a deep GCN network, where we set h Moreover, the propagation of information between tokens occurs in parallel, and the runtime does not depend on the depth of the dependency tree.
Note that the GCN model presented above uses the same parameters for all edges in the dependency graph. We also experimented with: (1) using different transformation matrices W for topdown, bottom-up, and self-loop edges; and (2) adding dependency relation-specific parameters for edge-wise gating, similar to. We found that modeling directions does not lead to improvement, 1 and adding edgewise gating further hurts performance. We hypothesize that this is because the presented GCN model is usually already able to capture dependency edge patterns thatare informative for classifying relations, and modeling edge directions and types does not offer additional discriminative power to the network before it leads to overfitting. For example, the relations entailed by "A's son, B" and "B's son, A" can be readily distinguished with "'s" attached to different entities, even when edge directionality is not considered.

Encoding Relations with GCN
We now formally define the task of relation extraction. Let X = [x 1 , ..., x n ] denote a sentence, where xi is the i th token. A subject entity and an object entity are identified and correspond to two spans in the sentence:
. Given X , X s , and X o , the goal of relation extraction is to predict a relation r ? R (a predefined relation set) that holds between the entities or "no relation" otherwise.
After applying an L-layer GCN over word vectors, we obtain hidden representations of each token thatare directly influenced by its neighbors no more than L edges apart in the dependency tree. To make use of these word representations for relation extraction, we first obtain a sentence representation as follows (see also left):
where h (l) denotes the collective hidden representations at layer l of the GCN, and f : R d?n ? Rd is a max pooling function that maps from n output vectors to the sentence vector. We also observe that information close to entity tokens in the dependency tree is often central to relation classification. Therefore, we also obtain a subject representation h s from h (L) as follows
as well as an object representation ho similarly. Inspired by recent work on relational learning between entities, we obtain the final representation used for classification by concatenating the sentence and the entity representations, and feeding them through a feed-forward neural network (FFNN):
This h final representation is then fed into a linear layer followed by a softmax operation to obtain a probability distribution over relations.

Contextualized GCN
The network architecture introduced so far learns effective representations for relation extraction, but it also leaves a few issues inadequately addressed. First, the input word vectors do not contain contextual information about word order or dis ambiguation. Second, the GCN highly depends on a correct parse tree to extract crucial information from the sentence (especially when pruning is performed), while existing parsing algorithms produce imperfect trees in many cases.
To resolve these issues, we further apply a Contextualized GCN (C-GCN) model, where the input word vectors are first fed into a bi-directional long short-term memory (LSTM) network to generate contextualized representations, which are then used ash (0) in the original model. This BiL-STM contextualization layer is trained jointly with the rest of the network. We show empirically in Section 5 that this augmentation substantially improves the performance over the original model.
We note that this relation extraction model is conceptually similar to graph kernel-based models, in that it aims to utilize local dependency tree patterns to inform relation classification. Our model also incorporates crucial off-path information, which greatly improves its robustness compared to shortest dependency pathbased approaches. Compared to tree-structured models (e.g., Tree-LSTM (Tai et al., 2015)), it not only is able to capture more global information through the use of pooling functions, but also achieves substantial speedup by not requiring recursive operations thatare difficult to parallelize. For example, we observe that on a Titan Xp GPU, training a Tree-LSTM model over a minibatch of 50 examples takes 6.54 seconds on average, while training the original GCN model takes only 0.07 seconds, and the C-GCN model 0.08 seconds.

Incorporating Off-path Information with Path-centric Pruning
Dependency trees provide rich structures that one can exploit in relation extraction, but most of the information pertinent to relations is usually contained within the subtree rooted at the lowest common ancestor (LCA) of the two entities. Previous studies have shown that removing tokens outside this scope helps relation extraction by eliminating irrelevant information from the sentence. It is therefore desirable to combine our GCN models with tree pruning strategies to further improve performance. However, pruning too aggressively (e.g., keeping only the dependency path) could lead to loss of crucial information and conversely hurt robustness. For instance, the negation in is neglected when a model is restricted to only looking at the dependency path between the entities. Similarly, in the sentence "She was diagnosed with cancer last year, and succumbed this June", the dependency path She?diagnosed?cancer is not sufficient to establish that cancer is the cause of death for the subject unless the conjunction dependency to succumbed is also present. Motivated by these observations, we propose path-centric pruning, a novel technique to incorporate information off the dependency path. This is achieved by including tokens thatare up to distance K away from the dependency path in the LCA subtree. K = 0, corresponds to pruning the tree down to the path, K = 1 keeps all nodes thatare directly attached to the path, and K = ? retains the entire LCA subtree. We combine this pruning strategy with our GCN model, by directly feeding the pruned trees into the graph convolutional layers. We show that pruning with K = 1 achieves the best balance between including relevant information (e.g., negation and conjunction) and keeping irrelevant content out of the resulting pruned tree as much as possible.

Related Work
At the core of fully-supervised and distantlysupervised relation extraction approaches are statistical classifiers, many of which find syntactic information beneficial. For example, explored adding syntactic features to a statistical classifier and found them to be useful when sentences are long. Various kernel-based approaches also leverage syntactic information to measure similarity between training and test examples to predict the relation, finding that tree-based kernels and dependency path-based kernels (Bunescu and Mooney, 2005) are effective for this task.
Recent studies have found neural models effective in relation extraction. first applied a one-dimensional convolutional neural network (CNN) with manual features to encode relations. showed that combining a CNN with a recurrent neural network (RNN) through a voting scheme can further improve performance. and proposed to use attention mechanisms over RNN and CNN architectures for this task.
Apart from neural models over word sequences, incorporating dependency trees into neural models has also been shown to improve relation extraction performance by capturing long-distance relations. generalized the idea of dependency path kernels by applying a LSTM network over the shortest dependency path between entities. Liu et al. first applied a recursive network over the subtrees rooted at the words on the dependency path and then applied a CNN over the path. Miwa and Bansal (2016) applied a Tree-LSTM, a generalized form of LSTM over dependency trees, in a joint entity and relation extraction setting. They found it to be most effective when applied to the subtree rooted at the LCA of the two entities.
More recently, and have shown that relatively simple neural models (CNN and augmented LSTM, respectively) can achieve comparable or superior performance to dependency-based models when trained on larger datasets. In this paper, we study dependency-based models in depth and show that with a properly designed architecture, they can outperform and have complementary advantages to sequence models, even in a large-scale setting.
Finally, we note that a technique similar to pathcentric pruning has been applied to reduce the space of possible arguments in semantic role labeling. The authors showed pruning words too faraway from the path between the predicate and the root to be beneficial, but reported the best pruning distance to be 10, which almost always retains the entire tree. Our method differs in that it is applied to the shortest dependency path between entities, and we show that in our technique the best pruning distance is 1 for several dependency-based relation extraction models.

Experiments

Baseline Models
We compare our models with several competitive dependency-based and neural sequence models.
Dependency-based models. In our main experiments we compare with three types of dependency-based models. (1) A logistic regression (LR) classifier which combines dependencybased features with other lexical features. (2) Shortest Dependency Path LSTM (SDP-LSTM), which applies a neural sequence model on the shortest path between the subject and object entities in the dependency tree. Tree-LSTM, which is a recursive model that generalizes the LSTM to arbitrary tree structures. We investigate the child-sum variant of Tree-LSTM, and apply it to the dependency tree (or part of it). In practice, we find that modifying this model by concatenating dependency label embeddings to the input of forget gates improves its performance on relation extraction, and therefore use this variant in our experiments. Earlier, our group compared and with sequence models, and we report these results; for (3) we report results with our own implementation.
Neural sequence model. Our group presented a competitive sequence model that employs a position-aware attention mechanism over LSTM outputs (PA-LSTM), and showed that it outperforms several CNN and dependency-based models by a substantial margin. We compare with this strong baseline, and use its open implementation in further analysis. 3

Experimental Setup
We conduct experiments on two relation extraction datasets: (1) TACRED: Introduced in, TACRED contains over 106k mention pairs drawn from the yearly TAC KBP 4 challenge. It represents 41 relation types and a special no relation class when the mention pair does not have a relation between them within these categories. Mentions in TACRED are typed, with subjects categorized into person and organization, and objects into 16 fine-grained types (e.g., date and location). We report micro-averaged F 1 scores on this dataset as is conventional. For fair comparisons on the TACRED dataset, we follow the evaluation protocol used in by selecting the model with the median dev F 1 from 5 independent runs and reporting its test F 1 . We also use the same "entity mask" strategy where we replace each subject (and object similarly) entity with a special SUBJ-<NER> token. For all models, we also adopt the "multichannel" strategy by concatenating the input word embeddings with POS and NER embeddings.
Traditionally, evaluation on SemEval is conducted without entity mentions masked. However, as we will discuss in Section 6.4, this method encourages models to overfit to these mentions and fails to test their actual ability to generalize. We therefore report results with two evaluation protocols: (1) with-mention, where mentions are kept for comparison with previous work; and (2) maskmention, where they are masked to test the generalization of our model in a more realistic setting.
Due to space limitations, we report model training details in the supplementary material.

Results on the TACRED Dataset
We present our main results on the TACRED test set in. We observe that our GCN model Our Model (C-GCN) 84.8 * 76.5 * outperforms all dependency-based models by at least 1.6 F 1 . By using contextualized word representations, the C-GCN model further outperforms the strong PA-LSTM model by 1.3 F 1 , and achieves a new state of the art. In addition, we find our model improves upon other dependencybased models in both precision and recall. Comparing the C-GCN model with the GCN model, we find that the gain mainly comes from improved recall. We hypothesize that this is because the C-GCN is more robust to parse errors by capturing local word patterns (see also Section 6.2). As we will show in Section 6.2, we find that our GCN models have complementary strengths when compared to the PA-LSTM. To leverage this result, we experiment with a simple interpolation strategy to combine these models. Given the output probabilities PG (r|x) from a GCN model and PS (r|x) from the sequence model for any relation r, we calculate the interpolated probability as
where ? ? [0, 1] is chosen on the dev set and set to 0.6. This simple interpolation between a GCN and a PA-LSTM achieves an F 1 score of 67.1, outperforming each model alone by at least 2.0 F 1 . An interpolation between a C-GCN and a PA-LSTM further improves the result to 68.2.

Results on the SemEval Dataset
To study the generalizability of our proposed model, we also trained and evaluated our best C-GCN model on the SemEval test set). We find that under the conventional with-entity evaluation, our C-GCN model outperforms all existing dependency-based neural models on this sep- arate dataset. Notably, by properly incorporating off-path information, our model outperforms the previous shortest dependency path-based model (SDP-LSTM). Under the mask-entity evaluation, our C-GCN model also outperforms PA-LSTM by a substantial margin, suggesting its generalizability even when entities are not seen.

Effect of Path-centric Pruning
To show the effectiveness of path-centric pruning, we compare the two GCN models and the Tree-LSTM when the pruning distance K is varied. We experimented with K ? {0, 1, 2, ?} on the TACRED dev set, and also include results when the full tree is used. As shown in, the performance of all three models peaks when K = 1, outperforming their respective dependency path-based counterpart (K = 0). This confirms our hypothesis in Section 3 that incorporating off-path information is crucial to relation extraction. Miwa and Bansal (2016) reported that a Tree-LSTM achieves similar performance when the dependency path and the LCA subtree are used respectively. Our experiments confirm this, and further show that the result can be improved by path-centric pruning with K = 1.
We find that all three models are less effective when the entire dependency tree is present, indicating that including extra information hurts performance. Finally, we note that contextualizing the GCN makes it less sensitive to changes in the tree structures provided, presumably because the   model can use word sequence information in the LSTM layer to recover any off-path information that it needs for correct relation extraction.

Analysis & Discussion

Ablation Study
To study the contribution of each component in the C-GCN model, we ran an ablation study on the TACRED dev set). We find that: The entity representations and feedforward layers contribute 1.0 F 1 .
(2) When we remove the dependency structure (i.e., setting? to I), the score drops by 3.2 F 1 .
(3) F 1 drops by 10.3 when we remove the feedforward layers, the LSTM component and the dependency structure altogether. (4) Removing the pruning (i.e., using full trees as input) further hurts the result by another 9.7 F 1 .

Complementary Strengths of GCNs and PA-LSTMs
To understand what the GCN models are capturing and how they differ from a sequence model such as the PA-LSTM, we compared their performance: The three dependency edges that contribute the most to the classification of different relations in the TACRED dev set. For clarity, we removed edges which 1) connect to common punctuation (i.e., commas, periods, and quotation marks), 2) connect to common prepositions (i.e., of, to, by), and 3) connect between tokens within the same entity. We use PER, ORG for entity types of PERSON, ORGANIZATION. We use S-and O-to denote subject and object entities, respectively. We also include edges for more relations in the supplementary material.
over examples in the TACRED dev set. Specifically, for each model, we trained it for 5 independent runs with different seeds, and for each example we evaluated the model's accuracy over these 5 runs. For instance, if a model correctly classifies an example for 3 out of 5 times, it achieves an accuracy of 60% on this example. We observe that on 847 (3.7%) dev examples, our C-GCN model achieves an accuracy at least 60% higher than that of the PA-LSTM, while on 629 (2.8%) examples the PA-LSTM achieves 60% higher. This complementary performance explains the gain we see in when the two models are combined. We further show that this difference is due to each model's competitive advantage: dependency-based models are better at handling sentences with entities farther apart, while sequence models can better leverage local word patterns regardless of parsing quality (see also. We include further analysis in the supplementary material.

Understanding Model Behavior
To gain more insights into the C-GCN model's behavior, we visualized the partial dependency tree it is processing and how much each token's final representation contributed to h sent (). We find that the model often focuses on the dependency path, but sometimes also incorporates offpath information to help reinforce its prediction. The model also learns to ignore determiners (e.g., "the") as they rarely affect relation prediction.
To further understand what dependency edges contribute most to the classification of different relations, we scored each dependency edge by summing up the number of dimensions each of its connected nodes contributed to h sent . We present the top scoring edges in. As can be seen in the table, most of these edges are associated with indicative nouns or verbs of each relation. 5

Entity Bias in the SemEval Dataset
In our study, we observed a high correlation between the entity mentions in a sentence and its relation label in the SemEval dataset. We experimented with PA-LSTM models to analyze this  dependency tree corresponding to K = 1 in path-centric pruning is shown, and the shortest dependency path is thickened. We omit edges to punctuation for clarity. The first example shows that the C-GCN is effective at leveraging long-range dependencies while reducing noise with the help of pruning (while the PA-LSTM predicts no relation twice, org:alternate names twice, and org:parents once in this case). The second example shows that the PA-LSTM is better at leveraging the proximity of the word "migrated" regardless of attachment errors in the parse (while the C-GCN is misled to predict per:country of birth three times, and no relation twice).
phenomenon. We started by simplifying every sentence in the SemEval training and dev sets to "subject and object", where subject and object are the actual entities in the sentence. Surprisingly, a trained PA-LSTM model on this data is able to achieve 65.1 F 1 on the dev set if GloVe is used to initialize word vectors, and 47.9 dev F 1 even without GloVe initialization. To further evaluate the model in a more realistic setting, we trained one model with the original SemEval training set (unmasked) and one with mentions masked in the training set, following what we have done for TACRED (masked). While the unmasked model achieves a 83.6 F 1 on the original SemEval dev set, F 1 drops drastically to 62.4 if we replace dev set entity mentions with a special <UNK> token to simulate the presence of unseen entities. In contrast, the masked model is unaffected by unseen entity mentions and achieves a stable dev F 1 of 74.7. This suggests that models trained without entities masked generalize poorly to new examples with unseen entities. Our findings call for more careful evaluation that takes dataset biases into account in future relation extraction studies.

Conclusion
We showed the success of a neural architecture based on a graph convolutional network for relation extraction. We also proposed path-centric pruning to improve the robustness of dependencybased models by removing irrelevant content without ignoring crucial information. We showed through detailed analysis that our model has complementary strengths to sequence models, and that the proposed pruning technique can be effectively applied to other dependency-based models.

A Experimental Details
A.1 Hyperparameters TACRED We set LSTM hidden size to 200 in all neural models. We also use hidden size 200 for the output feedforward layers in the GCN model. We use 2 GCN layers and 2 feedforward (FFNN) layers in our experiments. We employ the ReLU function for all nonlinearities in the GCN layers and the standard max pooling operations in all pooling layers. For the Tree-LSTM model, we find a 2-layer architecture works substantially better than the vanilla 1-layer model, and use it in all our experiments. For both the Tree-LSTM and our models, we apply path-centric pruning with K = 1, as we find that this generates best results for all models (also see). We use the pretrained 300-dimensional GloVe vectors to initialize word embeddings, and we use embedding size of 30 for all other embeddings (i.e., POS, NER). We use the dependency parse trees, POS and NER sequences as included in the original release of the dataset, which was generated with Stanford CoreNLP. For regularization we apply dropout with p = 0.5 to all LSTM layers and all but the last GCN layers.
SemEval We use LSTM hidden size of 100 and use 1 GCN layer for the SemEval dataset. We preprocess the dataset with Stanford CoreNLP to generate the dependency parse trees, POS and NER annotations. All other hyperparameters are set to be the same. For both datasets, we work with the Universal Dependencies v1 formalism.

A.2 Training
For training we use Stochastic Gradient Descent with an initial learning rate of 1.0. We use a cutoff of 5 for gradient clipping. For GCN models, we train every model for 100 epochs on the TAC-RED dataset, and from epoch 5 we start to anneal the learning rate by a factor of 0.9 every time the F 1 score on the dev set does not increase after an epoch. For Tree-LSTM models we find 30 total epochs to be enough. Due to the small size of the SemEval dataset, we train all models for 150 epochs, and use an initial learning rate of 0.5 with a decay rate of 0.95.
In our experiments we found that the output vector h sent tends to have large magnitude, and: Aggregated 5-run difference compared to PA-LSTM on the TACRED dev set. For each example, if X out of 5 GCN models predicted its label correctly and Y PA-LSTM models did, it is aggregated in the bar labeled X ? Y . "0" is omitted due to redundancy. therefore adding the following regularization term to the cross entropy loss of each example improves the results:
Here, reg functions as an l 2 regularization on the learned sentence representations. ? controls the regularization strength and we set ? = 0.003. We empirically found this to be more effective than applying l 2 regularization on the convolutional weights.

B Comparing GCN models and PA-LSTM on TACRED
We compared the performance of both GCN models with the PA-LSTM on the TACRED dev set.
To minimize randomness that is not inherent to these models, we accumulate statistics over 5 independent runs of each model, and report them in. As is shown in the figure, both GCN models capture very different examples from the PA-LSTM model. In the entire dev set of 22,631 examples, 1,450 had at least 3 more GCN models predicting the label correctly compared to the PA-LSTM, and 1,550 saw an improvement from using the PA-LSTM. The C-GCN, on the other hand, outperformed the PA-LSTM by at least 3 models on a total of 847 examples, and lost by a margin of at least 3 on another 629 examples, as reported in the main text. This smaller difference is also reflected in the diminished gain from ensembling with the PA-LSTM shown in. We hypoth-